{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"source/images/7.gif","path":"images/7.gif","modified":1,"renderable":0},{"_id":"source/images/dip.jpg","path":"images/dip.jpg","modified":1,"renderable":0},{"_id":"source/images/lsp.jpg","path":"images/lsp.jpg","modified":1,"renderable":0},{"_id":"source/images/ocp.jpg","path":"images/ocp.jpg","modified":1,"renderable":0},{"_id":"source/images/orm.png","path":"images/orm.png","modified":1,"renderable":0},{"_id":"source/images/sexymeo.jpg","path":"images/sexymeo.jpg","modified":1,"renderable":0},{"_id":"source/images/solid.png","path":"images/solid.png","modified":1,"renderable":0},{"_id":"source/images/hoptra.jpg","path":"images/hoptra.jpg","modified":1,"renderable":0},{"_id":"source/images/isp.png","path":"images/isp.png","modified":1,"renderable":0},{"_id":"source/images/rack.jpeg","path":"images/rack.jpeg","modified":1,"renderable":0},{"_id":"source/images/ruby-exception.jpg","path":"images/ruby-exception.jpg","modified":1,"renderable":0},{"_id":"source/images/thanhcong.jpg","path":"images/thanhcong.jpg","modified":1,"renderable":0},{"_id":"source/images/ssl1.png","path":"images/ssl1.png","modified":1,"renderable":0},{"_id":"themes/cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":1,"renderable":1},{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"source/images/file_permission.gif","path":"images/file_permission.gif","modified":1,"renderable":0},{"_id":"source/images/thecon.jpg","path":"images/thecon.jpg","modified":1,"renderable":0},{"_id":"themes/cactus/source/images/logo.png","path":"images/logo.png","modified":1,"renderable":1},{"_id":"source/images/vangcon.jpeg","path":"images/vangcon.jpeg","modified":1,"renderable":0},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","path":"lib/clipboard/clipboard.min.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/old/apple-touch-icon.png","path":"images/old/apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/old/favicon-192x192.png","path":"images/old/favicon-192x192.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/old/favicon.ico","path":"images/old/favicon.ico","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","path":"lib/vazir-font/Vazir.woff","modified":1,"renderable":1},{"_id":"source/images/3sum_2.jpeg","path":"images/3sum_2.jpeg","modified":1,"renderable":0},{"_id":"source/images/meta2/1.png","path":"images/meta2/1.png","modified":1,"renderable":0},{"_id":"source/images/meta2/2.png","path":"images/meta2/2.png","modified":1,"renderable":0},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","path":"lib/vazir-font/Vazir.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","path":"lib/vazir-font/Vazir.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","path":"lib/vazir-font/Vazir.ttf","modified":1,"renderable":1},{"_id":"source/images/srp.jpg","path":"images/srp.jpg","modified":1,"renderable":0},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","path":"lib/font-awesome/webfonts/fa-regular-400.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","path":"lib/font-awesome/webfonts/fa-regular-400.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","path":"lib/font-awesome/webfonts/fa-brands-400.woff","modified":1,"renderable":1},{"_id":"source/images/meta2/5.png","path":"images/meta2/5.png","modified":1,"renderable":0},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","path":"lib/font-awesome/webfonts/fa-solid-900.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","path":"lib/font-awesome/webfonts/fa-brands-400.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/old/logo.png","path":"images/old/logo.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","path":"lib/font-awesome/webfonts/fa-regular-400.svg","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","path":"lib/font-awesome/webfonts/fa-solid-900.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":1,"renderable":1},{"_id":"source/images/meta2/3.png","path":"images/meta2/3.png","modified":1,"renderable":0},{"_id":"source/images/meta2/9.png","path":"images/meta2/9.png","modified":1,"renderable":0},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":1,"renderable":1},{"_id":"source/images/meta2/7.png","path":"images/meta2/7.png","modified":1,"renderable":0},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","path":"lib/font-awesome/webfonts/fa-brands-400.svg","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","path":"lib/font-awesome/webfonts/fa-solid-900.svg","modified":1,"renderable":1},{"_id":"source/images/meta2/8.png","path":"images/meta2/8.png","modified":1,"renderable":0},{"_id":"source/images/meta2/4.png","path":"images/meta2/4.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"39c4853ce505a9ad8ac02f570e1376b5a6f29d76","modified":1575198576715},{"_id":"themes/cactus/.gitignore","hash":"c5345a2c5fa6c136dbe2020a405e541b4755a259","modified":1573628158000},{"_id":"themes/cactus/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1573628158000},{"_id":"themes/cactus/.DS_Store","hash":"9c0c6f6a3a81e605e5d2857f913670580ed5d7aa","modified":1575688355224},{"_id":"themes/cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1573628158000},{"_id":"themes/cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1573628158000},{"_id":"themes/cactus/README.md","hash":"859d11941c46be4f7b4a6d62297ccbeb4f732bc9","modified":1573628158000},{"_id":"themes/cactus/gulpfile.js","hash":"2bae290993507026a509665ee5a5326b616f8d68","modified":1573628158000},{"_id":"themes/cactus/_config.yml","hash":"bbb6da5a679baaf02d6cf88793d4000dc8d06a30","modified":1573646730697},{"_id":"themes/cactus/package.json","hash":"5bbdbc429e9d46acf97baf7ac5654edde0781064","modified":1573628158000},{"_id":"source/_posts/2018-01-01-file-permission-in-linux.md","hash":"d769f7aeb685618cbab0368bed15001426890c16","modified":1573617324000},{"_id":"source/_posts/2019-01-23-open-command-in-macos.md","hash":"f1d6afc6c9a1f3ae3fdf596af31f27e0071477a7","modified":1573617402000},{"_id":"source/_posts/2019-01-28-count-vs-length-size-in-ruby-and-ror.md","hash":"1623862fe875f6851e7b7716501537f877b61f9e","modified":1573617496000},{"_id":"source/_posts/2019-01-30-bash-file-in-macos-and-linux.md","hash":"218f318dc4f4e9440a2e6f7fb479892dc538fa8e","modified":1573617546000},{"_id":"source/_posts/2019-02-05-root-sudo-and-package-management-system.md","hash":"7bd43423d24c4ca39899ebc1d47bbe2f29a20318","modified":1573617572000},{"_id":"source/_posts/2019-02-19-truyen-tham-tri-va-truyen-tham-chieu.md","hash":"37517200972b9f50e091dfcc43589602248205b6","modified":1573617600000},{"_id":"source/_posts/2019-02-20-cac-trinh-thong-dich-trong-ruby.md","hash":"17123f9e88b8a38c67b65ace5b943dad87b3fa19","modified":1573617624000},{"_id":"source/_posts/2019-02-22-quy-luat-80-20.md","hash":"c341cc1a05ed0300f3696979a57b940a2121649a","modified":1573617654000},{"_id":"source/_posts/2019-02-22-xu-ly-thong-tin-quan-trong-trong-rails.md","hash":"f0b17342720a4eea7dfaa57ae7956c8f540b7cbc","modified":1573617692000},{"_id":"source/_posts/2019-02-24-ruby-method-lookup.md","hash":"944d2fc5cd4790361d6590e8dbb7bf5250982c73","modified":1573617714000},{"_id":"source/_posts/2019-02-25-van-de-n-1-trong-rails.md","hash":"16901976d429bb0db5f096c0d90525ae9720826a","modified":1573617736000},{"_id":"source/_posts/2019-04-08-immutable-va-mutable-trong-ruby.md","hash":"c18fe6b4e276a106e6e7e6b3b7e7c72a5b70600a","modified":1573617764000},{"_id":"source/_posts/2019-04-10-iaas-paas-saas.md","hash":"2fab20e8223475e7adae9fdbf6826afb2d5711ef","modified":1573617794000},{"_id":"source/_posts/2019-04-10-upload-file-len-aws-s3-va-nhung-van-de-can-luu-y.md","hash":"b47e4e23474f7a4214956ca269cd2e27bf27ac33","modified":1573617824000},{"_id":"source/_posts/2019-04-11-su-dung-carrierwave-voi-s3.md","hash":"039b44d93a1e69b5093c3edd5d147d5d0326e4a3","modified":1573617846000},{"_id":"source/_posts/2019-04-17-doi-dieu-ve-session-va-cookie-trong-rails.md","hash":"f7f2e0b8e47f2bcc2184c6b09915cb728605720d","modified":1573617872000},{"_id":"source/_posts/2019-05-04-https-vai-dieu-can-nho.md","hash":"ff24d26c702925d8df0b66e88957fe347709186d","modified":1573617900000},{"_id":"source/_posts/2019-05-08-phan-biet-update-update-column-va-update-attribute-trong-rails.md","hash":"b1bcf19d06c629390d535d651c8d311574241170","modified":1573617926000},{"_id":"source/_posts/2019-05-15-require-load-include-va-extend-trong-ruby.md","hash":"537817c171e2a5590d03389bad9e43c5ddb927db","modified":1573617952000},{"_id":"source/_posts/2019-05-16-autoloading-va-reloading-constants-trong-rails.md","hash":"624a56495bc3caf58dce481bfd3a3c0f513af417","modified":1573617976000},{"_id":"source/_posts/2019-06-09-luu-y-ngan-gon-ve-scope-va-class-method.md","hash":"44f952d7b847e5c5282124b29991ab37d8b4a88f","modified":1575646722091},{"_id":"source/_posts/2019-06-09-so-sanh-symbol-va-string-trong-ruby.md","hash":"891450590dd1039f93a6b13124373642212bdc57","modified":1575646754224},{"_id":"source/_posts/2019-06-08-tan-cong-sql-injection-va-cach-phong-chong-trong-rails.md","hash":"7853a083c45375b6feed19e0c3b02a9a0f4b28c6","modified":1575646705177},{"_id":"source/_posts/2019-05-17-nguyen-ly-solid-trong-code-ruby.md","hash":"3302c51bcbfb0c832fcee4654e4208262c0d8001","modified":1575646752027},{"_id":"source/_posts/2019-06-10-xu-ly-ngoai-le-trong-rails.md","hash":"2adad492901d56bc60b12eac125321ed2a6ac700","modified":1575646767947},{"_id":"source/_posts/2019-06-11-public-private-va-protected-method-trong-ruby.md","hash":"9c1c9e3f79aaed3ce4c7906f6159c8d26713c1e1","modified":1575646782434},{"_id":"source/_posts/2019-06-16-tu-khoa-super-trong-ruby.md","hash":"10c0bc09143277eebac965f11e3bffb06e186d74","modified":1575646792594},{"_id":"source/_posts/2019-06-24-simple-rack-application.md","hash":"b16aa64b6bb48b4e7a7b36203908cdf937acc8b2","modified":1575646806678},{"_id":"source/_posts/2019-06-25-xay-dung-mot-orm-don-gian-bang-ruby.md","hash":"6531dec301c753bd5e7fc7e7def16459c77c59fe","modified":1575646826844},{"_id":"source/_posts/2019-08-05-setup-terminal-macos.md","hash":"12bc2b394a0319bd743b19620a3263f7d9c61a53","modified":1575646834080},{"_id":"source/_posts/2019-09-20-vscode-extension.md","hash":"bffd3e1657ad68ad580a3f3473808a012e58d933","modified":1575646840390},{"_id":"source/_posts/2019-12-01-basic-bash-file-to-deploy-my-blog.md","hash":"34a690a5805cd39d0939a072b6c1189aee5c03ba","modified":1575372588900},{"_id":"source/_posts/2019-12-01-how-to-use-multi-account-with-ssh.md","hash":"755f1b4e139fd71eceb23fcb457726132d7240c4","modified":1575372751401},{"_id":"source/_posts/2019-12-01-simple-bst-in-ruby.md","hash":"39f1d00030a37d808367d5d1ff943bf054852375","modified":1576386567159},{"_id":"source/_posts/2019-12-05-ruby-argument.md","hash":"4f5f5019ce2b2e080042965655728cb7c28955d0","modified":1575646282772},{"_id":"source/_posts/2019-12-20-example-of-two-pointer.md","hash":"73f228f8e3f0c0b96a5516de9b079d4607b6d157","modified":1576850013490},{"_id":"source/_posts/2019-12-16-search-in-array.md","hash":"7a96990ebf9cf6e4d859a320b89b65c29b3462f2","modified":1576849557967},{"_id":"source/_posts/basic-vim-setup.md","hash":"cb4a6d3f95e2c4545a279fc7d4f2bc99369b3a22","modified":1573646339536},{"_id":"source/_posts/2019-12-06-linked-list-with-ruby.md","hash":"2d04de05353f30fc08a4acf89b42177b33a2641e","modified":1575641242063},{"_id":"source/_posts/hello-hexo.md","hash":"a58b28fcd18c9ed87a4867c337fefd2ea609c891","modified":1575111540003},{"_id":"source/_posts/meta-programming-ruby.md","hash":"28f4a759d5a8646ed001a7c6e40071133897be5d","modified":1573646382647},{"_id":"source/about/index.md","hash":"3b53feeaede94d42e5518391385128af24fdb7b0","modified":1573619538000},{"_id":"source/images/.DS_Store","hash":"d688fd4a96e85dc8aa83120936949ad179fafaa3","modified":1573646481811},{"_id":"source/images/7.gif","hash":"b85ec503cfc4a20438125cfdf351ef1047ee437b","modified":1573618324000},{"_id":"source/images/dip.jpg","hash":"3d4204d18b0b55499ff7e209f955456a90edc8fb","modified":1573618324000},{"_id":"source/images/lsp.jpg","hash":"65e9b6cae517487c256665e96e85d24efc597986","modified":1573618324000},{"_id":"source/images/ocp.jpg","hash":"2cf898d6f4747d7280f5ea94a46baf6070e2a48e","modified":1573618324000},{"_id":"source/images/orm.png","hash":"0c5c1839671d39b0ebe69609cc1849716ad4dfc8","modified":1573618324000},{"_id":"source/images/sexymeo.jpg","hash":"b184f24368abd09d5a11b9cbd612a9de3d0be01b","modified":1573618324000},{"_id":"source/images/solid.png","hash":"85d377189186938860534c3a13ff9b55199ac388","modified":1573618324000},{"_id":"source/projects/index.md","hash":"de841cb2cb061913cdf3967926e44db0d324d4ae","modified":1573619498000},{"_id":"themes/cactus/layout/archive.ejs","hash":"53de8817e37be01b3ba8fa5ca31b9cafa2f3c011","modified":1573628158000},{"_id":"themes/cactus/layout/index.ejs","hash":"c53484094a7c30ab82b0ea984404157ab9711e71","modified":1573628734000},{"_id":"themes/cactus/layout/layout.ejs","hash":"8504004f2ed78914f806c6699d9bd722318cbe56","modified":1573628158000},{"_id":"themes/cactus/layout/post.ejs","hash":"a7d164ce888a60cd3eddd9c04bc6762428fa66bb","modified":1573628158000},{"_id":"themes/cactus/layout/page.ejs","hash":"c5465d5315a7544aa466b01fd8cfb62917a8bb1d","modified":1573628158000},{"_id":"themes/cactus/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1573628158000},{"_id":"themes/cactus/languages/default.yml","hash":"703548ad90034d4e5207a27eb50f726dc27e4c0c","modified":1573628158000},{"_id":"themes/cactus/languages/en.yml","hash":"703548ad90034d4e5207a27eb50f726dc27e4c0c","modified":1573628158000},{"_id":"themes/cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1573628158000},{"_id":"themes/cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1573628158000},{"_id":"themes/cactus/languages/fr.yml","hash":"4fea266d3c522903f3eee4fffee6e66c44775005","modified":1573628158000},{"_id":"themes/cactus/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1573628158000},{"_id":"themes/cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1573628158000},{"_id":"themes/cactus/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1573628158000},{"_id":"themes/cactus/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1573628158000},{"_id":"themes/cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1573628158000},{"_id":"themes/cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1573628158000},{"_id":"themes/cactus/languages/vi.yml","hash":"f84893c3ec3e45875c90069e14b17ed3016ed973","modified":1573628158000},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"8f81faaad9a0615b09dbc23868484a55ec958f6f","modified":1573628158000},{"_id":"themes/cactus/languages/zh-TW.yml","hash":"2f4e050c9b35a67f4a7278cec3a949533c2ac16a","modified":1573628158000},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1573628158000},{"_id":"themes/cactus/scripts/meta.js","hash":"fa6055a39851c9953d033e70c1614547b94dce60","modified":1573628158000},{"_id":"themes/cactus/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1573628158000},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1573628158000},{"_id":"themes/cactus/source/.DS_Store","hash":"10c34740433d8ef49920ad6c03ae6f4efa57a774","modified":1575688355220},{"_id":"source/images/hoptra.jpg","hash":"4b0a09ac3695f5ba09f3c92ae5b844c33a45ff9f","modified":1573618324000},{"_id":"source/images/isp.png","hash":"8cb5c14b38c4396246f9202dacc29491936e380d","modified":1573618324000},{"_id":"source/images/rack.jpeg","hash":"f6e3a0bd75b58db47ac18d1eeb2b71727a5230e7","modified":1573618324000},{"_id":"source/images/ruby-exception.jpg","hash":"a8d929aac3fe8c1472f08ef1fe16081a716d906e","modified":1573618324000},{"_id":"source/images/thanhcong.jpg","hash":"c84daf2145d5aa0d8aefc4d5c608539801f9b4c1","modified":1573618324000},{"_id":"source/images/ssl1.png","hash":"b1ceda2df1849ff840ccad660cdbd6aa984ff3f6","modified":1573618324000},{"_id":"source/images/meta2/.DS_Store","hash":"11cbac41f5cf11c5c611812d3daa887b2780d710","modified":1569062072862},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"4cf8d0059e5f8bc8ae1dd1a426293583fd398052","modified":1573628158000},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"c3a80e347cb11022baf5e65fb4d0209b8d205693","modified":1573628158000},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"b7db191b7ad066b1f3f9c34d8a4b77e1ee815215","modified":1573646888480},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"8c8f071ae2fd1e17ae0405da7dfce59690c690f0","modified":1573646875355},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1573646966361},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"83d912956b00537e0b20a9905f14885ff3899ed4","modified":1573628158000},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1573628158000},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"be1b54388eb02176dd4722285dda19e3dce2e62e","modified":1573628158000},{"_id":"themes/cactus/source/css/_extend.styl","hash":"2c8751d132e62f5f068dc3a184d160670737ba1f","modified":1573628158000},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1573628158000},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1573628158000},{"_id":"themes/cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1573628158000},{"_id":"themes/cactus/source/css/_variables.styl","hash":"02079fb71b7d1c01d15fa512a1948ad4cbb416b5","modified":1573628158000},{"_id":"themes/cactus/source/css/rtl.styl","hash":"98355abe9ef3a398a5b4cb40d3d33bf86ac8d1d4","modified":1573628158000},{"_id":"themes/cactus/source/css/style.styl","hash":"9a946631f0e59addc57c39bd7f2081b3e9256ab1","modified":1573628158000},{"_id":"themes/cactus/source/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1573628158000},{"_id":"themes/cactus/source/images/.DS_Store","hash":"aaee02e3de70fe9a40a93cf4d1a35840985874bb","modified":1575688877717},{"_id":"themes/cactus/source/js/search.js","hash":"a74d0c601f820160825a2e4ad13618074d714933","modified":1573628158000},{"_id":"themes/cactus/source/images/apple-touch-icon.png","hash":"31ca762b3d9e3c7653fcc5bdf1cf60cbb9186dd5","modified":1575663124000},{"_id":"themes/cactus/source/images/favicon-192x192.png","hash":"60d0a28942cfa9c78e4be6cb9d4f13b4e3d8a00b","modified":1575663124000},{"_id":"themes/cactus/source/images/favicon.ico","hash":"2cd3a34c0c2bf3450edf795377d5acb09d1350b3","modified":1575663596000},{"_id":"source/images/file_permission.gif","hash":"7045495d2b775ec3c73765211edb06381d683daa","modified":1573618324000},{"_id":"source/images/thecon.jpg","hash":"272a340a5748fb56151f65386685c6d838386996","modified":1573200442000},{"_id":"themes/cactus/source/images/logo.png","hash":"d01dd8c061d0b2b3f583f026bd216bcec3075e0e","modified":1575688667032},{"_id":"source/images/vangcon.jpeg","hash":"81d20645ed37382ea561ee93fb99f915879d25c4","modified":1556069772624},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"5728f8c2808465c6be801b8c8c4f5bb6b96dd64e","modified":1573647072216},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"79b234ff3c264e66b2e71c819228e62bf92b48e4","modified":1573628158000},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"b5bfa049f17868fb09d9d2a7e1d5279fa0381d37","modified":1573628158000},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1573628158000},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1573628158000},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"847a400e79b775246ca9067e40c3f104d571413d","modified":1573628158000},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"e08fae30da060f49c087f6c121868b08eb55c795","modified":1573628158000},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1573628158000},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"0f0ec41a4165814ce69688425d5ac4d701b7cc70","modified":1573628158000},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"9c9655b42b85f754b8a573a1d4634c23c680e1bf","modified":1573628158000},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"d09f781cb02394850737b3a9efc6693307d5bf09","modified":1573628158000},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"2b25ad24573bded8b42f9d80112eab9fadbed1a5","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1573628158000},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1573628158000},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"ef8fc52337c4c7b010cad7c427cb78009b30f9d8","modified":1573628158000},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"c6a3c395ceb4aacba8c995bcde7b58a7ca501919","modified":1573628158000},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1573628158000},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1573628158000},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"d9b13e402808175dc90761cc4fdfe3d4808034f8","modified":1573628158000},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"b64021d680f856d24dc17bc8f53674bfe2e241e4","modified":1573628158000},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1573628158000},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1573628158000},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1573628158000},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"d571d5c7c960300d29c5f0ec3fe1140322ecd6b3","modified":1573628158000},{"_id":"themes/cactus/source/css/_partial/tooltip.styl","hash":"2daff581ec3efaec840cbfdee512195919c32629","modified":1573628158000},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","hash":"ee60ca5ba9401456105ef703a98092369b579c80","modified":1573628158000},{"_id":"themes/cactus/source/images/old/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1573628158000},{"_id":"themes/cactus/source/images/old/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1573628158000},{"_id":"themes/cactus/source/images/old/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1573628158000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"37443d0040f0d7af381c955e4c15919a15d0349e","modified":1573628158000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"0a257c8b60e0f20802c1dc8daeed2d3cb0d44f17","modified":1573628158000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"df15fd1e74b6f4a50bea57e2b44d9627f38495b5","modified":1573628158000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"62447a951d48b21c4696ae72df4bc4adef636e26","modified":1573628158000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"32ae5c0d1d5943c8bb8e0f6ab07c3269c6f8b8a8","modified":1573628158000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"ef07a250766fea840c1049e67c0405d9216ee0a8","modified":1573628158000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"668400ae92700965f03f2371faaee0ab8c8347c3","modified":1573628158000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"f5653059b2a5929516e4aab02329a978600b9b67","modified":1573628158000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"ad4d46a99a1daf6353c86c79ac3a2b030213859c","modified":1573628158000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"c3be79b553ec394db71268d604b1d29183b867dc","modified":1573628158000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","hash":"bbee70033f0f5882e9869e417b69c6a38f56f187","modified":1573628158000},{"_id":"source/images/3sum_2.jpeg","hash":"3ca9dd693e2ca0bc6a34a801383ee347d4d9f138","modified":1576849914508},{"_id":"source/images/meta2/1.png","hash":"2fa2eeecf403fa05a9624e2cb3feb8001ad2dba9","modified":1568992716702},{"_id":"source/images/meta2/2.png","hash":"acf16dbf3b15e3941acc63c4cbfc56aa4fb7449d","modified":1568993381684},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"8f2bf6b59ae1f2ed4c2fead6cea4b8314fcf62e5","modified":1573628158000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","hash":"30ce165216db078951a690a6ad665b9b78f5dd81","modified":1573628158000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"13d026ff857c853cbd0dc519b6e58669db309441","modified":1573628158000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"594dc3344ad14903c247615427d1009709f0f5a4","modified":1573628158000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"f76ec625e15522ff60d21f7a9a3b71c65bc27556","modified":1573628158000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"2e6c9df9f775373fb1988ae8529aa8f05313dae6","modified":1573628158000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"3edffd7bb61eee8cd46b57225f9f9e5264e3362b","modified":1573628158000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"9f1e2934098a6a4a7c5584c8f3fa24a707070da3","modified":1573628158000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"1f5a73db7947ef22c8a2bb19d6449b80496c03c4","modified":1573628158000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"295f7e02c9b157e7ea63ad09613b00ceab85c5cd","modified":1573628158000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"08e1503d1181188690fd9c81860d6c890c1465f6","modified":1573628158000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"a6aa450ee6e0f85786474ca6b04827ef97e81af4","modified":1573628158000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","hash":"31a9219c25fe1991fb745ec8dbbcf45c6094a702","modified":1573628158000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","hash":"f22b219824026e490a581ddb3b36b07997dff0e3","modified":1573628158000},{"_id":"source/images/srp.jpg","hash":"81710dc7159876b7164aa9bd7e77472f55e3a8ea","modified":1573618324000},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"dc726537928fc0d7703e73c0a5e4b82ad1731d59","modified":1573628158000},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1573628158000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"42ff503f20e97503cef8e5b2ec10ae07699d7c01","modified":1573628158000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"d902f8db3e021155f177f698a252fb98d6e61768","modified":1573628158000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"c140085833a38abec6b7df99d4ccac93eb266031","modified":1573628158000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"7b3f44b4d3028f3c87ddf0f4bd62511c9bf4a87e","modified":1573628158000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"9784edb76f8a2ed595ea4bf74d46cda4eff3b303","modified":1573628158000},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1573628158000},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1573628158000},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1573628158000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"92da6e3c7121e21cdfde25ef08797a3937a683e1","modified":1573628158000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"f9d835a0f9248b1bb33d66968e87c4a50103ed8d","modified":1573628158000},{"_id":"source/images/meta2/5.png","hash":"bb982c8aed9c8e3f81e8d71bd6c2d01b894cafcc","modified":1569052008080},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"cf1a3fd771900af34f2af22142beecfb47367548","modified":1573628158000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"80d33a73cbb60e206ef6f5c898988641576c7dda","modified":1573628158000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"644ece8263d2f96b087eebf7f6d4e309e5898eb5","modified":1573628158000},{"_id":"themes/cactus/source/images/old/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1573628158000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"33e86c0ad6fb9c5c0c8c2af4cb2d790c6b14a8aa","modified":1573628158000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"c445864a9646948e0d7ff44930ad732ee61427d8","modified":1573628158000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"19e302760e39e25a5f8d90d6cd0164ef6cd74f8c","modified":1573628158000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"10740942ec6b3f4985529d343402d0bf32f9f847","modified":1573628158000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1573628158000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1573628158000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1573628158000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1573628158000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1573628158000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1573628158000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1573628158000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1573628158000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1573628158000},{"_id":"source/images/meta2/3.png","hash":"0bd5f388f8660ab278e5e5b840bad6825e0745a1","modified":1568994636513},{"_id":"source/images/meta2/9.png","hash":"5e4a5eb7f3a8956dc2f215fd5e253965e9ed7d73","modified":1569058906592},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1573628158000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1573628158000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1573628158000},{"_id":"source/images/meta2/7.png","hash":"b0a9c548892f127bec56bf2921f1e6e81786b186","modified":1569058506199},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"b0bb9e6ac7709206b9510f1718516d89aead5b21","modified":1573628158000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"ed6c1ed8f24df909f40fe5e5c652d7ff9570c821","modified":1573628158000},{"_id":"source/images/meta2/8.png","hash":"9f222f8dadd5976e00ed74dbdefd21debede4a5e","modified":1569058528145},{"_id":"source/images/meta2/4.png","hash":"a747f18f540a439daf4f7877801dd03917f25dbd","modified":1568995114699}],"Category":[{"name":"hệ điều hành","_id":"ck4e7sueu00045rrs3k2t2xgj"},{"name":"ruby notes","_id":"ck4e7suf9000g5rrshumo9feg"},{"name":"Random","_id":"ck4e7sufp00115rrs4ofn8pzs"},{"name":"rails notes","_id":"ck4e7suft00185rrs5tj0b12t"},{"name":"programming","parent":"ck4e7suf9000g5rrshumo9feg","_id":"ck4e7sufx001g5rrsdjqeb0bq"},{"name":"RAILS","_id":"ck4e7sugr002q5rrsc4fw2xck"},{"name":"RUBY","_id":"ck4e7sugx002w5rrsgljt6lzt"},{"name":"TIL","_id":"ck4e7suhp00435rrscmqu6shp"},{"name":"PROGRAMMING","parent":"ck4e7sugx002w5rrsgljt6lzt","_id":"ck4e7suhs004b5rrsgvxzadr6"},{"name":"til","_id":"ck4e7suhu004h5rrs7g1seoe0"}],"Data":[],"Page":[{"title":"about","date":"2019-11-11T03:38:10.000Z","_content":"\n![the con](/../images/thecon.jpg)\n\n> Nhìn mặt tui có giống người có thông tin để giới thiệu không?\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-11-11 10:38:10\n---\n\n![the con](/../images/thecon.jpg)\n\n> Nhìn mặt tui có giống người có thông tin để giới thiệu không?\n","updated":"2019-11-13T04:32:18.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck4e7sueq00015rrshmxg20tv","content":"<p><img src=\"/../images/thecon.jpg\" alt=\"the con\"></p>\n<blockquote>\n<p>Nhìn mặt tui có giống người có thông tin để giới thiệu không?</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/../images/thecon.jpg\" alt=\"the con\"></p>\n<blockquote>\n<p>Nhìn mặt tui có giống người có thông tin để giới thiệu không?</p>\n</blockquote>\n"},{"title":"Projects","date":"2019-11-10T17:00:00.000Z","_content":"\n![the con](/../images/thecon.jpg)\n\n> Nhìn mặt tui có giống người có projects để khoe không?\n","source":"projects/index.md","raw":"---\ntitle: Projects\ndate: 2019-11-11\n---\n\n![the con](/../images/thecon.jpg)\n\n> Nhìn mặt tui có giống người có projects để khoe không?\n","updated":"2019-11-13T04:31:38.000Z","path":"projects/index.html","comments":1,"layout":"page","_id":"ck4e7suet00035rrs9qhhbr0q","content":"<p><img src=\"/../images/thecon.jpg\" alt=\"the con\"></p>\n<blockquote>\n<p>Nhìn mặt tui có giống người có projects để khoe không?</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/../images/thecon.jpg\" alt=\"the con\"></p>\n<blockquote>\n<p>Nhìn mặt tui có giống người có projects để khoe không?</p>\n</blockquote>\n"}],"Post":[{"title":"Permission Trong Unix Là Gì?","date":"2017-12-31T17:00:00.000Z","draft":false,"mytag":"OS","mytrend":"COOL","_content":"\n# Đặt vấn đề\n\nPhần lớn thời gian thời đại học, tôi được học trên nền tảng window với bộ công cụ visual studio và ms sql server. Mọi thứ đều ổn cho đến khi ra trường và đi làm. Môi trường làm việc không còn là window nữa mà chuyển sang gia đình linux-unix. Rất nhiều thứ lạ lẫm, tuy nhiên, cũng như nhiều lập trình viên khác. Copy paste không có gì khó khăn với tôi.\n\nTừ những tutorial trên mạng, với những dòng lệnh tôi không hiểu, nhưng đâu thành vấn đề gì? Nó đang chạy và vậy là đã đủ hạnh phúc cho một cậu lập trình viên thiếu kinh nghiệm mới ra trường rồi. Tuy nhiên, việc phải làm những công việc lặp đi lặp lại hàng ngày mà không thực sự hiểu chúng khiến chúng ta khó chịu. Chẳng hạn như những câu lệnh set permission chẳng hạn.\n\n# Luận bàn\n\n# 1.File permission là gì?\n\nTương tự như ngôi nhà của bạn, bạn sống cùng gia đình và thi thoảng có những vị khách ghé thăm. Có những vật dụng trong nhà mà bạn chỉ muốn riêng mình bạn có thể sử dụng, cũng có những đồ vật khác, thứ mà chỉ bạn và gia đình được phép sử dụng, và cũng có những đồ vật mà bạn, gia đình và cả những vị khách đều có thể sử dụng.\n\nTài nguyên trong unix tương tự như vậy, mọi thứ trong unix đều là file. Vậy nên có những file quan trọng chỉ mình bạn có thể xài, cũng có những file mà bạn có thể chia sẻ thêm cho 1 nhóm nào đó. Còn những thứ không quá quan trọng bạn có thể mở cửa cho ai cũng có thể sử dụng.\n\n=> Đó là lý do permission cần tồn tại.\n\n# 2.Sử dụng là sử dụng thế nào?\n\nHiểu đơn giản như thế này, nhà của bạn, bạn cho tôi vào và cho phép tôi ngồi ghế uống nước xem tivi, nhưng không đồng nghĩa với việc tôi muốn làm gì cái ghế hay cái tivi cũng được. Tôi chỉ có thể sử dụng chứ không được phép thay đổi hay đập phá đồ đạc của bạn.\n\nTrong unix có 3 quyền sử dụng:\n\n1. Quyền đọc.\n2. Quyền ghi.\n3. Quyền thực thi.\n\n# 3.Các loại người dùng.\n\n1. Owner (người sở hữu file đó - người tạo ra file đó).\n2. Group (nhóm sở hữu file).\n3. Other (phần còn lại của hệ thống có thể là guest).\n\n| Ngoài ra trên unix thì còn 1 người dùng thứ 4 gọi là root. Đây là người dùng siêu quyền lực và không thể bị ảnh hưởng bởi mấy lệnh phân quyền của bạn\n\nHiểu đơn giản như việc bạn ở nhà của mình và nghĩ bạn có thể làm mọi việc với căn nhà đó mà không ai có thể can thiệp. Tuy nhiên khi mở sổ đỏ ra thì bạn sẽ thấy là bạn chỉ đang có quyền sử dụng đất chứ không phải sở hữu đất. Mọi đất đai đều thuộc quyền sở hữu của nhà nước.\n\nĐây chính là root trong trường hợp này, và nếu nhà nước thích thì quyền sở hữu nhà hay mọi tài nguyên trong nhà của bạn có thể bay màu.\n\n| Vì vậy hãy thật cẩn thận khi sử dụng quyền root trên máy tính. Trong trường hợp máy tính, thì chúng ta là chủ sở hữu nên chúng ta có thể enable hay disable root đi. Trên Mac thì mặc định là disable.\n\n# 4.Cách phân quyền\n\n`chmod xyz file/folder`\n\nVí dụ:  `chmod 007 duychinh.bin`\n\nGiải thích câu lệnh trên:\n-xyz là 3 số nguyên liền nhau( giá trị của ba số này có thể là 0,1,2,3,4,5,6,7).\nVới x ứng với quyền phân cho owner, y ứng với quyền phân cho group và z là cho everyone.\n\n:zero: không có quyền gì cả.\n\n:one: quyền thực thi tập tin.\n\n:two: quyền write only.\n\n:four: quyền read only.\n\nVới 4 số trên ta có thể cộng lại và ra 1 số mới với permission được cộng dồn.\nVí dụ: 7 = 4 + 2 + 1 => tất cả các quyền. Tương tự với cả tổ hợp khác.\n\nSuy ra với lệnh `chmod 777 file_name` --> Ta đã gán tất cả quyền cho cả 3 loại user(như liệt kê ở mục 3).\n\nHình ảnh minh hoạ:\n\n![Branching](http://www.macinstruct.com/images/permissions/permissions1.png)\n\nTrong nhiều trường hợp để có thể thực hiện được lệnh set permission kể trên, ta phải thêm câu lệnh `sudo`\nvào phía trước. Trong các bài tiếp theo sẽ giải thích về ý nghĩa của câu lệnh này.\n\n# 5.Tham khảo\n\n[1] [guru99](https://www.guru99.com/file-permissions.html)\n\n# Kết luận\n\nTrên là 1 cái nhìn tổng quan về phân quyền trên linux. Thế giới unix còn rất nhiều điều thú vị, hi vọng trong thời gian tôi có thể có thời gian để tìm hiểu sâu sắc hơn về nền tảng này.\n\n![File Permission](/images/file_permission.gif)\n","source":"_posts/2018-01-01-file-permission-in-linux.md","raw":"---\ntitle: \"Permission Trong Unix Là Gì?\"\ndate: 2018-01-01\ndraft: false\ntags: [\"unix\"]\ncategories: [\"hệ điều hành\"]\nmytag: \"OS\"\nmytrend: \"COOL\"\n\n---\n\n# Đặt vấn đề\n\nPhần lớn thời gian thời đại học, tôi được học trên nền tảng window với bộ công cụ visual studio và ms sql server. Mọi thứ đều ổn cho đến khi ra trường và đi làm. Môi trường làm việc không còn là window nữa mà chuyển sang gia đình linux-unix. Rất nhiều thứ lạ lẫm, tuy nhiên, cũng như nhiều lập trình viên khác. Copy paste không có gì khó khăn với tôi.\n\nTừ những tutorial trên mạng, với những dòng lệnh tôi không hiểu, nhưng đâu thành vấn đề gì? Nó đang chạy và vậy là đã đủ hạnh phúc cho một cậu lập trình viên thiếu kinh nghiệm mới ra trường rồi. Tuy nhiên, việc phải làm những công việc lặp đi lặp lại hàng ngày mà không thực sự hiểu chúng khiến chúng ta khó chịu. Chẳng hạn như những câu lệnh set permission chẳng hạn.\n\n# Luận bàn\n\n# 1.File permission là gì?\n\nTương tự như ngôi nhà của bạn, bạn sống cùng gia đình và thi thoảng có những vị khách ghé thăm. Có những vật dụng trong nhà mà bạn chỉ muốn riêng mình bạn có thể sử dụng, cũng có những đồ vật khác, thứ mà chỉ bạn và gia đình được phép sử dụng, và cũng có những đồ vật mà bạn, gia đình và cả những vị khách đều có thể sử dụng.\n\nTài nguyên trong unix tương tự như vậy, mọi thứ trong unix đều là file. Vậy nên có những file quan trọng chỉ mình bạn có thể xài, cũng có những file mà bạn có thể chia sẻ thêm cho 1 nhóm nào đó. Còn những thứ không quá quan trọng bạn có thể mở cửa cho ai cũng có thể sử dụng.\n\n=> Đó là lý do permission cần tồn tại.\n\n# 2.Sử dụng là sử dụng thế nào?\n\nHiểu đơn giản như thế này, nhà của bạn, bạn cho tôi vào và cho phép tôi ngồi ghế uống nước xem tivi, nhưng không đồng nghĩa với việc tôi muốn làm gì cái ghế hay cái tivi cũng được. Tôi chỉ có thể sử dụng chứ không được phép thay đổi hay đập phá đồ đạc của bạn.\n\nTrong unix có 3 quyền sử dụng:\n\n1. Quyền đọc.\n2. Quyền ghi.\n3. Quyền thực thi.\n\n# 3.Các loại người dùng.\n\n1. Owner (người sở hữu file đó - người tạo ra file đó).\n2. Group (nhóm sở hữu file).\n3. Other (phần còn lại của hệ thống có thể là guest).\n\n| Ngoài ra trên unix thì còn 1 người dùng thứ 4 gọi là root. Đây là người dùng siêu quyền lực và không thể bị ảnh hưởng bởi mấy lệnh phân quyền của bạn\n\nHiểu đơn giản như việc bạn ở nhà của mình và nghĩ bạn có thể làm mọi việc với căn nhà đó mà không ai có thể can thiệp. Tuy nhiên khi mở sổ đỏ ra thì bạn sẽ thấy là bạn chỉ đang có quyền sử dụng đất chứ không phải sở hữu đất. Mọi đất đai đều thuộc quyền sở hữu của nhà nước.\n\nĐây chính là root trong trường hợp này, và nếu nhà nước thích thì quyền sở hữu nhà hay mọi tài nguyên trong nhà của bạn có thể bay màu.\n\n| Vì vậy hãy thật cẩn thận khi sử dụng quyền root trên máy tính. Trong trường hợp máy tính, thì chúng ta là chủ sở hữu nên chúng ta có thể enable hay disable root đi. Trên Mac thì mặc định là disable.\n\n# 4.Cách phân quyền\n\n`chmod xyz file/folder`\n\nVí dụ:  `chmod 007 duychinh.bin`\n\nGiải thích câu lệnh trên:\n-xyz là 3 số nguyên liền nhau( giá trị của ba số này có thể là 0,1,2,3,4,5,6,7).\nVới x ứng với quyền phân cho owner, y ứng với quyền phân cho group và z là cho everyone.\n\n:zero: không có quyền gì cả.\n\n:one: quyền thực thi tập tin.\n\n:two: quyền write only.\n\n:four: quyền read only.\n\nVới 4 số trên ta có thể cộng lại và ra 1 số mới với permission được cộng dồn.\nVí dụ: 7 = 4 + 2 + 1 => tất cả các quyền. Tương tự với cả tổ hợp khác.\n\nSuy ra với lệnh `chmod 777 file_name` --> Ta đã gán tất cả quyền cho cả 3 loại user(như liệt kê ở mục 3).\n\nHình ảnh minh hoạ:\n\n![Branching](http://www.macinstruct.com/images/permissions/permissions1.png)\n\nTrong nhiều trường hợp để có thể thực hiện được lệnh set permission kể trên, ta phải thêm câu lệnh `sudo`\nvào phía trước. Trong các bài tiếp theo sẽ giải thích về ý nghĩa của câu lệnh này.\n\n# 5.Tham khảo\n\n[1] [guru99](https://www.guru99.com/file-permissions.html)\n\n# Kết luận\n\nTrên là 1 cái nhìn tổng quan về phân quyền trên linux. Thế giới unix còn rất nhiều điều thú vị, hi vọng trong thời gian tôi có thể có thời gian để tìm hiểu sâu sắc hơn về nền tảng này.\n\n![File Permission](/images/file_permission.gif)\n","slug":"2018-01-01-file-permission-in-linux","published":1,"updated":"2019-11-13T03:55:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7suef00005rrs9up9f8ql","content":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Phần lớn thời gian thời đại học, tôi được học trên nền tảng window với bộ công cụ visual studio và ms sql server. Mọi thứ đều ổn cho đến khi ra trường và đi làm. Môi trường làm việc không còn là window nữa mà chuyển sang gia đình linux-unix. Rất nhiều thứ lạ lẫm, tuy nhiên, cũng như nhiều lập trình viên khác. Copy paste không có gì khó khăn với tôi.</p>\n<p>Từ những tutorial trên mạng, với những dòng lệnh tôi không hiểu, nhưng đâu thành vấn đề gì? Nó đang chạy và vậy là đã đủ hạnh phúc cho một cậu lập trình viên thiếu kinh nghiệm mới ra trường rồi. Tuy nhiên, việc phải làm những công việc lặp đi lặp lại hàng ngày mà không thực sự hiểu chúng khiến chúng ta khó chịu. Chẳng hạn như những câu lệnh set permission chẳng hạn.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-File-permission-la-gi\"><a href=\"#1-File-permission-la-gi\" class=\"headerlink\" title=\"1.File permission là gì?\"></a>1.File permission là gì?</h1><p>Tương tự như ngôi nhà của bạn, bạn sống cùng gia đình và thi thoảng có những vị khách ghé thăm. Có những vật dụng trong nhà mà bạn chỉ muốn riêng mình bạn có thể sử dụng, cũng có những đồ vật khác, thứ mà chỉ bạn và gia đình được phép sử dụng, và cũng có những đồ vật mà bạn, gia đình và cả những vị khách đều có thể sử dụng.</p>\n<p>Tài nguyên trong unix tương tự như vậy, mọi thứ trong unix đều là file. Vậy nên có những file quan trọng chỉ mình bạn có thể xài, cũng có những file mà bạn có thể chia sẻ thêm cho 1 nhóm nào đó. Còn những thứ không quá quan trọng bạn có thể mở cửa cho ai cũng có thể sử dụng.</p>\n<p>=&gt; Đó là lý do permission cần tồn tại.</p>\n<h1 id=\"2-Su-dung-la-su-dung-the-nao\"><a href=\"#2-Su-dung-la-su-dung-the-nao\" class=\"headerlink\" title=\"2.Sử dụng là sử dụng thế nào?\"></a>2.Sử dụng là sử dụng thế nào?</h1><p>Hiểu đơn giản như thế này, nhà của bạn, bạn cho tôi vào và cho phép tôi ngồi ghế uống nước xem tivi, nhưng không đồng nghĩa với việc tôi muốn làm gì cái ghế hay cái tivi cũng được. Tôi chỉ có thể sử dụng chứ không được phép thay đổi hay đập phá đồ đạc của bạn.</p>\n<p>Trong unix có 3 quyền sử dụng:</p>\n<ol>\n<li>Quyền đọc.</li>\n<li>Quyền ghi.</li>\n<li>Quyền thực thi.</li>\n</ol>\n<h1 id=\"3-Cac-loai-nguoi-dung\"><a href=\"#3-Cac-loai-nguoi-dung\" class=\"headerlink\" title=\"3.Các loại người dùng.\"></a>3.Các loại người dùng.</h1><ol>\n<li>Owner (người sở hữu file đó - người tạo ra file đó).</li>\n<li>Group (nhóm sở hữu file).</li>\n<li>Other (phần còn lại của hệ thống có thể là guest).</li>\n</ol>\n<p>| Ngoài ra trên unix thì còn 1 người dùng thứ 4 gọi là root. Đây là người dùng siêu quyền lực và không thể bị ảnh hưởng bởi mấy lệnh phân quyền của bạn</p>\n<p>Hiểu đơn giản như việc bạn ở nhà của mình và nghĩ bạn có thể làm mọi việc với căn nhà đó mà không ai có thể can thiệp. Tuy nhiên khi mở sổ đỏ ra thì bạn sẽ thấy là bạn chỉ đang có quyền sử dụng đất chứ không phải sở hữu đất. Mọi đất đai đều thuộc quyền sở hữu của nhà nước.</p>\n<p>Đây chính là root trong trường hợp này, và nếu nhà nước thích thì quyền sở hữu nhà hay mọi tài nguyên trong nhà của bạn có thể bay màu.</p>\n<p>| Vì vậy hãy thật cẩn thận khi sử dụng quyền root trên máy tính. Trong trường hợp máy tính, thì chúng ta là chủ sở hữu nên chúng ta có thể enable hay disable root đi. Trên Mac thì mặc định là disable.</p>\n<h1 id=\"4-Cach-phan-quyen\"><a href=\"#4-Cach-phan-quyen\" class=\"headerlink\" title=\"4.Cách phân quyền\"></a>4.Cách phân quyền</h1><p><code>chmod xyz file/folder</code></p>\n<p>Ví dụ:  <code>chmod 007 duychinh.bin</code></p>\n<p>Giải thích câu lệnh trên:<br>-xyz là 3 số nguyên liền nhau( giá trị của ba số này có thể là 0,1,2,3,4,5,6,7).<br>Với x ứng với quyền phân cho owner, y ứng với quyền phân cho group và z là cho everyone.</p>\n<p>:zero: không có quyền gì cả.</p>\n<p>:one: quyền thực thi tập tin.</p>\n<p>:two: quyền write only.</p>\n<p>:four: quyền read only.</p>\n<p>Với 4 số trên ta có thể cộng lại và ra 1 số mới với permission được cộng dồn.<br>Ví dụ: 7 = 4 + 2 + 1 =&gt; tất cả các quyền. Tương tự với cả tổ hợp khác.</p>\n<p>Suy ra với lệnh <code>chmod 777 file_name</code> –&gt; Ta đã gán tất cả quyền cho cả 3 loại user(như liệt kê ở mục 3).</p>\n<p>Hình ảnh minh hoạ:</p>\n<p><img src=\"http://www.macinstruct.com/images/permissions/permissions1.png\" alt=\"Branching\"></p>\n<p>Trong nhiều trường hợp để có thể thực hiện được lệnh set permission kể trên, ta phải thêm câu lệnh <code>sudo</code><br>vào phía trước. Trong các bài tiếp theo sẽ giải thích về ý nghĩa của câu lệnh này.</p>\n<h1 id=\"5-Tham-khao\"><a href=\"#5-Tham-khao\" class=\"headerlink\" title=\"5.Tham khảo\"></a>5.Tham khảo</h1><p>[1] <a href=\"https://www.guru99.com/file-permissions.html\" target=\"_blank\" rel=\"noopener\">guru99</a></p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Trên là 1 cái nhìn tổng quan về phân quyền trên linux. Thế giới unix còn rất nhiều điều thú vị, hi vọng trong thời gian tôi có thể có thời gian để tìm hiểu sâu sắc hơn về nền tảng này.</p>\n<p><img src=\"/images/file_permission.gif\" alt=\"File Permission\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Phần lớn thời gian thời đại học, tôi được học trên nền tảng window với bộ công cụ visual studio và ms sql server. Mọi thứ đều ổn cho đến khi ra trường và đi làm. Môi trường làm việc không còn là window nữa mà chuyển sang gia đình linux-unix. Rất nhiều thứ lạ lẫm, tuy nhiên, cũng như nhiều lập trình viên khác. Copy paste không có gì khó khăn với tôi.</p>\n<p>Từ những tutorial trên mạng, với những dòng lệnh tôi không hiểu, nhưng đâu thành vấn đề gì? Nó đang chạy và vậy là đã đủ hạnh phúc cho một cậu lập trình viên thiếu kinh nghiệm mới ra trường rồi. Tuy nhiên, việc phải làm những công việc lặp đi lặp lại hàng ngày mà không thực sự hiểu chúng khiến chúng ta khó chịu. Chẳng hạn như những câu lệnh set permission chẳng hạn.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-File-permission-la-gi\"><a href=\"#1-File-permission-la-gi\" class=\"headerlink\" title=\"1.File permission là gì?\"></a>1.File permission là gì?</h1><p>Tương tự như ngôi nhà của bạn, bạn sống cùng gia đình và thi thoảng có những vị khách ghé thăm. Có những vật dụng trong nhà mà bạn chỉ muốn riêng mình bạn có thể sử dụng, cũng có những đồ vật khác, thứ mà chỉ bạn và gia đình được phép sử dụng, và cũng có những đồ vật mà bạn, gia đình và cả những vị khách đều có thể sử dụng.</p>\n<p>Tài nguyên trong unix tương tự như vậy, mọi thứ trong unix đều là file. Vậy nên có những file quan trọng chỉ mình bạn có thể xài, cũng có những file mà bạn có thể chia sẻ thêm cho 1 nhóm nào đó. Còn những thứ không quá quan trọng bạn có thể mở cửa cho ai cũng có thể sử dụng.</p>\n<p>=&gt; Đó là lý do permission cần tồn tại.</p>\n<h1 id=\"2-Su-dung-la-su-dung-the-nao\"><a href=\"#2-Su-dung-la-su-dung-the-nao\" class=\"headerlink\" title=\"2.Sử dụng là sử dụng thế nào?\"></a>2.Sử dụng là sử dụng thế nào?</h1><p>Hiểu đơn giản như thế này, nhà của bạn, bạn cho tôi vào và cho phép tôi ngồi ghế uống nước xem tivi, nhưng không đồng nghĩa với việc tôi muốn làm gì cái ghế hay cái tivi cũng được. Tôi chỉ có thể sử dụng chứ không được phép thay đổi hay đập phá đồ đạc của bạn.</p>\n<p>Trong unix có 3 quyền sử dụng:</p>\n<ol>\n<li>Quyền đọc.</li>\n<li>Quyền ghi.</li>\n<li>Quyền thực thi.</li>\n</ol>\n<h1 id=\"3-Cac-loai-nguoi-dung\"><a href=\"#3-Cac-loai-nguoi-dung\" class=\"headerlink\" title=\"3.Các loại người dùng.\"></a>3.Các loại người dùng.</h1><ol>\n<li>Owner (người sở hữu file đó - người tạo ra file đó).</li>\n<li>Group (nhóm sở hữu file).</li>\n<li>Other (phần còn lại của hệ thống có thể là guest).</li>\n</ol>\n<p>| Ngoài ra trên unix thì còn 1 người dùng thứ 4 gọi là root. Đây là người dùng siêu quyền lực và không thể bị ảnh hưởng bởi mấy lệnh phân quyền của bạn</p>\n<p>Hiểu đơn giản như việc bạn ở nhà của mình và nghĩ bạn có thể làm mọi việc với căn nhà đó mà không ai có thể can thiệp. Tuy nhiên khi mở sổ đỏ ra thì bạn sẽ thấy là bạn chỉ đang có quyền sử dụng đất chứ không phải sở hữu đất. Mọi đất đai đều thuộc quyền sở hữu của nhà nước.</p>\n<p>Đây chính là root trong trường hợp này, và nếu nhà nước thích thì quyền sở hữu nhà hay mọi tài nguyên trong nhà của bạn có thể bay màu.</p>\n<p>| Vì vậy hãy thật cẩn thận khi sử dụng quyền root trên máy tính. Trong trường hợp máy tính, thì chúng ta là chủ sở hữu nên chúng ta có thể enable hay disable root đi. Trên Mac thì mặc định là disable.</p>\n<h1 id=\"4-Cach-phan-quyen\"><a href=\"#4-Cach-phan-quyen\" class=\"headerlink\" title=\"4.Cách phân quyền\"></a>4.Cách phân quyền</h1><p><code>chmod xyz file/folder</code></p>\n<p>Ví dụ:  <code>chmod 007 duychinh.bin</code></p>\n<p>Giải thích câu lệnh trên:<br>-xyz là 3 số nguyên liền nhau( giá trị của ba số này có thể là 0,1,2,3,4,5,6,7).<br>Với x ứng với quyền phân cho owner, y ứng với quyền phân cho group và z là cho everyone.</p>\n<p>:zero: không có quyền gì cả.</p>\n<p>:one: quyền thực thi tập tin.</p>\n<p>:two: quyền write only.</p>\n<p>:four: quyền read only.</p>\n<p>Với 4 số trên ta có thể cộng lại và ra 1 số mới với permission được cộng dồn.<br>Ví dụ: 7 = 4 + 2 + 1 =&gt; tất cả các quyền. Tương tự với cả tổ hợp khác.</p>\n<p>Suy ra với lệnh <code>chmod 777 file_name</code> –&gt; Ta đã gán tất cả quyền cho cả 3 loại user(như liệt kê ở mục 3).</p>\n<p>Hình ảnh minh hoạ:</p>\n<p><img src=\"http://www.macinstruct.com/images/permissions/permissions1.png\" alt=\"Branching\"></p>\n<p>Trong nhiều trường hợp để có thể thực hiện được lệnh set permission kể trên, ta phải thêm câu lệnh <code>sudo</code><br>vào phía trước. Trong các bài tiếp theo sẽ giải thích về ý nghĩa của câu lệnh này.</p>\n<h1 id=\"5-Tham-khao\"><a href=\"#5-Tham-khao\" class=\"headerlink\" title=\"5.Tham khảo\"></a>5.Tham khảo</h1><p>[1] <a href=\"https://www.guru99.com/file-permissions.html\" target=\"_blank\" rel=\"noopener\">guru99</a></p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Trên là 1 cái nhìn tổng quan về phân quyền trên linux. Thế giới unix còn rất nhiều điều thú vị, hi vọng trong thời gian tôi có thể có thời gian để tìm hiểu sâu sắc hơn về nền tảng này.</p>\n<p><img src=\"/images/file_permission.gif\" alt=\"File Permission\"></p>\n"},{"title":"Lệnh Open Trên Unix?","date":"2018-01-22T17:00:00.000Z","draft":false,"mytag":"OS","mytrend":"COOL","_content":"\n# Đặt vấn đề\n\nChắc hẳn không chỉ tôi mà nhiều người dùng MacOS khác đã quen thuộc với câu lệnh `open` trên terminal.\nHiểu một cách cơ bản nhất câu lệnh này giúp chúng ta mở thư mục hiện tại trong cửa sổ Finder. Tuy nhiên, câu lệnh này còn có thể làm được nhiều điều hơn chúng ta tưởng.\n\n# Luận bàn\n\n# 1.Folders\n\nNgoài việc có thể mở được thư mục bạn đang làm việc, nó có thể mở được các thư mục khác trong máy tính của bạn chỉ bằng việc bạn cung cấp đường dẫn phía sau câu lệnh open thay vì dấu chấm như chúng ta đã làm ở trên. Bạn cũng có thể mở các thư mục ẩn hay mở nhiều thư mục cùng một lúc.\nDưới đây là một vài ví dụ cho những gì chúng ta đã thảo luận ở trên:\n\n`open ~/`\n\n`open ~/etc ~/desktop ~/documents`\n\n# 2.File\n\nOpen cũng có thể mở tập tin, lại tiếp tục suy nghĩ đơn giản, chúng ta có thể thấy câu lệnh này giống như một cú click chuột double vào file hay folder thì đều có chức năng mở nó lên. Ví dụ:\n\n`open ~/desktop/meo.rb`\n\nNó sẽ mở file meo.rb. Bạn cũng có thể sử dụng điều này với nhiều tệp.\n\n`open ~/desktop/meo.rb ~/desktop/meo.jpg`\n\n# 3.Applications\n\nGiả sử tôi có file meo.rb, bây giờ file đó sẽ được mở mặc định bởi phần mềm Xcode trong máy của tôi. Khi đó, tôi có thể override lại phần mềm mặc định để mở file này bằng câu lệnh sau:\n\n`open -a Sublime ~/desktop/meo.rb`\n\n# 4.URLs\n\nOpen cũng có thể mở các đường dẫn URL với cú pháp đơn giản như sau:\n\n`open https://google.com.vn`\n\nVới câu lệnh này thì đường dẫn bạn cung cấp sẽ được mở bằng trình duyệt mặc định. Bạn cũng có thể sử dụng trình duyệt khác làm trình duyệt mặc định bằng tuỳ chọn –a như sau:\n\n`open -a Firefox https://google.com.vn`\n\n# Kết luận\n\nBài viết này có giá trị nào không?\n\nCâu trả lời là có, biết thêm về các lệnh Termial sẽ khiến cuộc đời developer của bạn bớt khổ.\n","source":"_posts/2019-01-23-open-command-in-macos.md","raw":"---\ntitle: \"Lệnh Open Trên Unix?\"\ndate: 2018-01-23\ndraft: false\ntags: [\"unix\"]\ncategories: [\"hệ điều hành\"]\nmytag: \"OS\"\nmytrend: \"COOL\"\n\n---\n\n# Đặt vấn đề\n\nChắc hẳn không chỉ tôi mà nhiều người dùng MacOS khác đã quen thuộc với câu lệnh `open` trên terminal.\nHiểu một cách cơ bản nhất câu lệnh này giúp chúng ta mở thư mục hiện tại trong cửa sổ Finder. Tuy nhiên, câu lệnh này còn có thể làm được nhiều điều hơn chúng ta tưởng.\n\n# Luận bàn\n\n# 1.Folders\n\nNgoài việc có thể mở được thư mục bạn đang làm việc, nó có thể mở được các thư mục khác trong máy tính của bạn chỉ bằng việc bạn cung cấp đường dẫn phía sau câu lệnh open thay vì dấu chấm như chúng ta đã làm ở trên. Bạn cũng có thể mở các thư mục ẩn hay mở nhiều thư mục cùng một lúc.\nDưới đây là một vài ví dụ cho những gì chúng ta đã thảo luận ở trên:\n\n`open ~/`\n\n`open ~/etc ~/desktop ~/documents`\n\n# 2.File\n\nOpen cũng có thể mở tập tin, lại tiếp tục suy nghĩ đơn giản, chúng ta có thể thấy câu lệnh này giống như một cú click chuột double vào file hay folder thì đều có chức năng mở nó lên. Ví dụ:\n\n`open ~/desktop/meo.rb`\n\nNó sẽ mở file meo.rb. Bạn cũng có thể sử dụng điều này với nhiều tệp.\n\n`open ~/desktop/meo.rb ~/desktop/meo.jpg`\n\n# 3.Applications\n\nGiả sử tôi có file meo.rb, bây giờ file đó sẽ được mở mặc định bởi phần mềm Xcode trong máy của tôi. Khi đó, tôi có thể override lại phần mềm mặc định để mở file này bằng câu lệnh sau:\n\n`open -a Sublime ~/desktop/meo.rb`\n\n# 4.URLs\n\nOpen cũng có thể mở các đường dẫn URL với cú pháp đơn giản như sau:\n\n`open https://google.com.vn`\n\nVới câu lệnh này thì đường dẫn bạn cung cấp sẽ được mở bằng trình duyệt mặc định. Bạn cũng có thể sử dụng trình duyệt khác làm trình duyệt mặc định bằng tuỳ chọn –a như sau:\n\n`open -a Firefox https://google.com.vn`\n\n# Kết luận\n\nBài viết này có giá trị nào không?\n\nCâu trả lời là có, biết thêm về các lệnh Termial sẽ khiến cuộc đời developer của bạn bớt khổ.\n","slug":"2019-01-23-open-command-in-macos","published":1,"updated":"2019-11-13T03:56:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7suer00025rrs3e373bzc","content":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Chắc hẳn không chỉ tôi mà nhiều người dùng MacOS khác đã quen thuộc với câu lệnh <code>open</code> trên terminal.<br>Hiểu một cách cơ bản nhất câu lệnh này giúp chúng ta mở thư mục hiện tại trong cửa sổ Finder. Tuy nhiên, câu lệnh này còn có thể làm được nhiều điều hơn chúng ta tưởng.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-Folders\"><a href=\"#1-Folders\" class=\"headerlink\" title=\"1.Folders\"></a>1.Folders</h1><p>Ngoài việc có thể mở được thư mục bạn đang làm việc, nó có thể mở được các thư mục khác trong máy tính của bạn chỉ bằng việc bạn cung cấp đường dẫn phía sau câu lệnh open thay vì dấu chấm như chúng ta đã làm ở trên. Bạn cũng có thể mở các thư mục ẩn hay mở nhiều thư mục cùng một lúc.<br>Dưới đây là một vài ví dụ cho những gì chúng ta đã thảo luận ở trên:</p>\n<p><code>open ~/</code></p>\n<p><code>open ~/etc ~/desktop ~/documents</code></p>\n<h1 id=\"2-File\"><a href=\"#2-File\" class=\"headerlink\" title=\"2.File\"></a>2.File</h1><p>Open cũng có thể mở tập tin, lại tiếp tục suy nghĩ đơn giản, chúng ta có thể thấy câu lệnh này giống như một cú click chuột double vào file hay folder thì đều có chức năng mở nó lên. Ví dụ:</p>\n<p><code>open ~/desktop/meo.rb</code></p>\n<p>Nó sẽ mở file meo.rb. Bạn cũng có thể sử dụng điều này với nhiều tệp.</p>\n<p><code>open ~/desktop/meo.rb ~/desktop/meo.jpg</code></p>\n<h1 id=\"3-Applications\"><a href=\"#3-Applications\" class=\"headerlink\" title=\"3.Applications\"></a>3.Applications</h1><p>Giả sử tôi có file meo.rb, bây giờ file đó sẽ được mở mặc định bởi phần mềm Xcode trong máy của tôi. Khi đó, tôi có thể override lại phần mềm mặc định để mở file này bằng câu lệnh sau:</p>\n<p><code>open -a Sublime ~/desktop/meo.rb</code></p>\n<h1 id=\"4-URLs\"><a href=\"#4-URLs\" class=\"headerlink\" title=\"4.URLs\"></a>4.URLs</h1><p>Open cũng có thể mở các đường dẫn URL với cú pháp đơn giản như sau:</p>\n<p><code>open https://google.com.vn</code></p>\n<p>Với câu lệnh này thì đường dẫn bạn cung cấp sẽ được mở bằng trình duyệt mặc định. Bạn cũng có thể sử dụng trình duyệt khác làm trình duyệt mặc định bằng tuỳ chọn –a như sau:</p>\n<p><code>open -a Firefox https://google.com.vn</code></p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Bài viết này có giá trị nào không?</p>\n<p>Câu trả lời là có, biết thêm về các lệnh Termial sẽ khiến cuộc đời developer của bạn bớt khổ.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Chắc hẳn không chỉ tôi mà nhiều người dùng MacOS khác đã quen thuộc với câu lệnh <code>open</code> trên terminal.<br>Hiểu một cách cơ bản nhất câu lệnh này giúp chúng ta mở thư mục hiện tại trong cửa sổ Finder. Tuy nhiên, câu lệnh này còn có thể làm được nhiều điều hơn chúng ta tưởng.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-Folders\"><a href=\"#1-Folders\" class=\"headerlink\" title=\"1.Folders\"></a>1.Folders</h1><p>Ngoài việc có thể mở được thư mục bạn đang làm việc, nó có thể mở được các thư mục khác trong máy tính của bạn chỉ bằng việc bạn cung cấp đường dẫn phía sau câu lệnh open thay vì dấu chấm như chúng ta đã làm ở trên. Bạn cũng có thể mở các thư mục ẩn hay mở nhiều thư mục cùng một lúc.<br>Dưới đây là một vài ví dụ cho những gì chúng ta đã thảo luận ở trên:</p>\n<p><code>open ~/</code></p>\n<p><code>open ~/etc ~/desktop ~/documents</code></p>\n<h1 id=\"2-File\"><a href=\"#2-File\" class=\"headerlink\" title=\"2.File\"></a>2.File</h1><p>Open cũng có thể mở tập tin, lại tiếp tục suy nghĩ đơn giản, chúng ta có thể thấy câu lệnh này giống như một cú click chuột double vào file hay folder thì đều có chức năng mở nó lên. Ví dụ:</p>\n<p><code>open ~/desktop/meo.rb</code></p>\n<p>Nó sẽ mở file meo.rb. Bạn cũng có thể sử dụng điều này với nhiều tệp.</p>\n<p><code>open ~/desktop/meo.rb ~/desktop/meo.jpg</code></p>\n<h1 id=\"3-Applications\"><a href=\"#3-Applications\" class=\"headerlink\" title=\"3.Applications\"></a>3.Applications</h1><p>Giả sử tôi có file meo.rb, bây giờ file đó sẽ được mở mặc định bởi phần mềm Xcode trong máy của tôi. Khi đó, tôi có thể override lại phần mềm mặc định để mở file này bằng câu lệnh sau:</p>\n<p><code>open -a Sublime ~/desktop/meo.rb</code></p>\n<h1 id=\"4-URLs\"><a href=\"#4-URLs\" class=\"headerlink\" title=\"4.URLs\"></a>4.URLs</h1><p>Open cũng có thể mở các đường dẫn URL với cú pháp đơn giản như sau:</p>\n<p><code>open https://google.com.vn</code></p>\n<p>Với câu lệnh này thì đường dẫn bạn cung cấp sẽ được mở bằng trình duyệt mặc định. Bạn cũng có thể sử dụng trình duyệt khác làm trình duyệt mặc định bằng tuỳ chọn –a như sau:</p>\n<p><code>open -a Firefox https://google.com.vn</code></p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Bài viết này có giá trị nào không?</p>\n<p>Câu trả lời là có, biết thêm về các lệnh Termial sẽ khiến cuộc đời developer của bạn bớt khổ.</p>\n"},{"title":"Length, Count và Size","date":"2018-06-27T17:00:00.000Z","mytag":"Ruby","mytrend":"COOL","_content":"\n# Đặt vấn đề\n\nKhoảng 1 năm trước, khi tôi bắt đầu học về Ruby on Rails, giống như nhiều developers khác, tôi chủ yếu tập trung vào cách để có thể xây dựng một ứng dụng ruby on rails chạy được mà không tập trung nhiều vào kiến thức Ruby nền tảng. Có lẽ đấy cũng là lựa chọn duy nhất vào thời điểm đó với một cậu sinh viên mới ra trường như tôi, khi mà có quá nhiều khái niệm, quá nhiều thứ phải học mà sếp của tôi cũng như sếp của bạn sẽ không trả lương cho chúng ta lên công ty để “học”.\nThời gian trôi qua, khi đã có nhiều kinh nghiệm hơn, tôi bắt đầu ngày càng hứng thú về những kiến thức nền tảng mà ngày xưa tôi chỉ từng đọc lướt qua. Trong đó có Count, Length và Size, những thứ tưởng như không có gì để nói hay tìm hiểu thêm, nhưng liệu chúng có thực sự đơn giản như vậy?\n\n# Luận bàn\n\n# 1.Tổng quan\n\nVề cơ bản, đây là ba phương thức được Ruby cung cấp, và dĩ nhiên, nó hoàn toàn có thể sử dụng trong rails. Một cách thường xuyên nhất, bạn có thể thấy người ta sử dụng những phương thức này cho một mảng dữ liệu bất kì trong Ruby hay một mảng record trong Rails. Ý nghĩa của nó là trả về kích thước của mảng/hash. Ví dụ:\n\n```ruby\narray = Array.new(3,1)\n#=> Tạo 1 mảng tên array có 3 phần tử đều có giá trị là 1.\narray.size, array.length, array.count\n#=> Kết quả trả về cùng là 3.\n```\n\nNhưng mọi chuyện không dừng lại ở đấy, nếu chúng chỉ cùng có chung một chức năng thì không có lý do gì để chúng cùng tồn tại.\n\n# 2.Trong ruby\n\nNgoài chức năng tính kích thước của một mảng hay một hash như đã được đề cập ở trên, Size có thể được sử dụng với cả đối tượng dạng chuỗi và dạng số nguyên.\nVới chuỗi, Size sẽ trả về kết quả là số lượng ký tự của chuỗi. Còn với số nguyên, nó sẽ trả về số bite mà đối tượng đó nắm giữ trên bộ nhớ. Ví dụ:\n\n```ruby\nstr_temp = \"hduychinh\"\nstr_temp.size\n#=> Kết quả trả về độ dài chuỗi là 9.\nint_temp = 12\nint_temp.size\n#=> Kết quả trả về là 8, ứng với 8 bytes mà int_temp lưu trữ trên bộ nhớ.\n```\n\nLength kém hơn size một chút, Length chỉ có thể sử dụng thêm cho các đối tượng dạng chuỗi để trả về số lượng ký tự trong chuỗi, mà không thể sử dụng trên số nguyên.\n\nCuối cùng là Count, nó không có chức năng gì bổ sung so với phần đã đề cập. Tuy nhiên, một điểm mạnh của Count đó là khi sử dụng với mảng/hash thì nó có thể nhận tham số chuyển vào. Ví dụ:\n\n```ruby\nc = [1, 2, 3, 3]\nc.count 3\n#=> Kết quả trả về là 2.\nc.count { |i| i > 1 }\n#=> Kết quả trả về là 3.\n```\n\n# 3.Trong Active Record\n\nKhi sử dụng Count thực chất là bạn đang sử dụng lệnh sql `select count(*) from table_names` để truy vấn ra số lượng mà chúng ta đang cần tìm hiểu. Thứ hai, Count không được lưu trữ lại, điều đó có nghĩa mỗi lần bạn chạy hàm Count thì nó sẽ truy vấn vào cơ sở dữ liệu mà không hề quan tâm là bạn có gọi lệnh Count trước đó hay không. Thứ ba, Count là lệnh duy nhất trong ba lệnh trên có thể gọi trực tiếp thông qua một model class, ví dụ như: `Cat.count`.\n\nKhi sử dụng Length, điều đầu tiên đó là load toàn bộ record mà bạn đang định đếm số lượng vào bộ nhớ rồi tính toán. Từ lần gọi thứ hai, nó sẽ lấy lại kết quả cũ chứ không load dữ liệu lên nữa. Đây thực sự là một điều tồi tệ nếu bạn có một cơ sở dữ liệu lớn, nó có thể load hàng triệu record vào bộ nhớ.\n\n```ruby\nCat.all.length\n#=> Cat Load (0.2ms)  SELECT \"cats\".* FROM \"cats\"\n```\n\nKhi sử dụng Size, điều đầu tiên của nó là tìm xem kết quả của truy vấn đã có trong bộ nhớ hay chưa, nếu có rồi thì nó sẽ lấy ra và sử dụng, còn nếu chưa có, nó sẽ sử dụng một câu truy vấn SQL vào cơ sở dữ liệu để đếm số lượng. Điều này thật sự tuyệt vời, như một sự kết hợp giữa length và count.\n\n# Kết luận\n\nTheo dữ liệu từ fast-ruby thì method length chạy gần tương đương với size và chạy nhanh hơn hẳn so với count. Điểm lợi của count là nó có thể được gọi từ 1 class Model, giúp cú pháp tường minh hơn, cũng như việc có thể truyền tham số vào hàm.\nNgược lại trong các trường hợp khác, việc sử dụng size là khả dĩ hơn cả, đặc biệt với dữ liệu lớn thì nên tránh sử dụng length, vì đó có thể mang lại 1 thảm hoạ cho chương trình khi quá nhiều dữ liệu bị nạp vào bộ nhớ 1 cách vô ích.\n","source":"_posts/2019-01-28-count-vs-length-size-in-ruby-and-ror.md","raw":"---\ntitle: \"Length, Count và Size\"\ndate: 2018-06-28\n# draft: false\ntags: [\"ruby\", \"rails\"]\ncategories: [\"ruby notes\"]\nmytag: \"Ruby\"\nmytrend: \"COOL\"\n\n---\n\n# Đặt vấn đề\n\nKhoảng 1 năm trước, khi tôi bắt đầu học về Ruby on Rails, giống như nhiều developers khác, tôi chủ yếu tập trung vào cách để có thể xây dựng một ứng dụng ruby on rails chạy được mà không tập trung nhiều vào kiến thức Ruby nền tảng. Có lẽ đấy cũng là lựa chọn duy nhất vào thời điểm đó với một cậu sinh viên mới ra trường như tôi, khi mà có quá nhiều khái niệm, quá nhiều thứ phải học mà sếp của tôi cũng như sếp của bạn sẽ không trả lương cho chúng ta lên công ty để “học”.\nThời gian trôi qua, khi đã có nhiều kinh nghiệm hơn, tôi bắt đầu ngày càng hứng thú về những kiến thức nền tảng mà ngày xưa tôi chỉ từng đọc lướt qua. Trong đó có Count, Length và Size, những thứ tưởng như không có gì để nói hay tìm hiểu thêm, nhưng liệu chúng có thực sự đơn giản như vậy?\n\n# Luận bàn\n\n# 1.Tổng quan\n\nVề cơ bản, đây là ba phương thức được Ruby cung cấp, và dĩ nhiên, nó hoàn toàn có thể sử dụng trong rails. Một cách thường xuyên nhất, bạn có thể thấy người ta sử dụng những phương thức này cho một mảng dữ liệu bất kì trong Ruby hay một mảng record trong Rails. Ý nghĩa của nó là trả về kích thước của mảng/hash. Ví dụ:\n\n```ruby\narray = Array.new(3,1)\n#=> Tạo 1 mảng tên array có 3 phần tử đều có giá trị là 1.\narray.size, array.length, array.count\n#=> Kết quả trả về cùng là 3.\n```\n\nNhưng mọi chuyện không dừng lại ở đấy, nếu chúng chỉ cùng có chung một chức năng thì không có lý do gì để chúng cùng tồn tại.\n\n# 2.Trong ruby\n\nNgoài chức năng tính kích thước của một mảng hay một hash như đã được đề cập ở trên, Size có thể được sử dụng với cả đối tượng dạng chuỗi và dạng số nguyên.\nVới chuỗi, Size sẽ trả về kết quả là số lượng ký tự của chuỗi. Còn với số nguyên, nó sẽ trả về số bite mà đối tượng đó nắm giữ trên bộ nhớ. Ví dụ:\n\n```ruby\nstr_temp = \"hduychinh\"\nstr_temp.size\n#=> Kết quả trả về độ dài chuỗi là 9.\nint_temp = 12\nint_temp.size\n#=> Kết quả trả về là 8, ứng với 8 bytes mà int_temp lưu trữ trên bộ nhớ.\n```\n\nLength kém hơn size một chút, Length chỉ có thể sử dụng thêm cho các đối tượng dạng chuỗi để trả về số lượng ký tự trong chuỗi, mà không thể sử dụng trên số nguyên.\n\nCuối cùng là Count, nó không có chức năng gì bổ sung so với phần đã đề cập. Tuy nhiên, một điểm mạnh của Count đó là khi sử dụng với mảng/hash thì nó có thể nhận tham số chuyển vào. Ví dụ:\n\n```ruby\nc = [1, 2, 3, 3]\nc.count 3\n#=> Kết quả trả về là 2.\nc.count { |i| i > 1 }\n#=> Kết quả trả về là 3.\n```\n\n# 3.Trong Active Record\n\nKhi sử dụng Count thực chất là bạn đang sử dụng lệnh sql `select count(*) from table_names` để truy vấn ra số lượng mà chúng ta đang cần tìm hiểu. Thứ hai, Count không được lưu trữ lại, điều đó có nghĩa mỗi lần bạn chạy hàm Count thì nó sẽ truy vấn vào cơ sở dữ liệu mà không hề quan tâm là bạn có gọi lệnh Count trước đó hay không. Thứ ba, Count là lệnh duy nhất trong ba lệnh trên có thể gọi trực tiếp thông qua một model class, ví dụ như: `Cat.count`.\n\nKhi sử dụng Length, điều đầu tiên đó là load toàn bộ record mà bạn đang định đếm số lượng vào bộ nhớ rồi tính toán. Từ lần gọi thứ hai, nó sẽ lấy lại kết quả cũ chứ không load dữ liệu lên nữa. Đây thực sự là một điều tồi tệ nếu bạn có một cơ sở dữ liệu lớn, nó có thể load hàng triệu record vào bộ nhớ.\n\n```ruby\nCat.all.length\n#=> Cat Load (0.2ms)  SELECT \"cats\".* FROM \"cats\"\n```\n\nKhi sử dụng Size, điều đầu tiên của nó là tìm xem kết quả của truy vấn đã có trong bộ nhớ hay chưa, nếu có rồi thì nó sẽ lấy ra và sử dụng, còn nếu chưa có, nó sẽ sử dụng một câu truy vấn SQL vào cơ sở dữ liệu để đếm số lượng. Điều này thật sự tuyệt vời, như một sự kết hợp giữa length và count.\n\n# Kết luận\n\nTheo dữ liệu từ fast-ruby thì method length chạy gần tương đương với size và chạy nhanh hơn hẳn so với count. Điểm lợi của count là nó có thể được gọi từ 1 class Model, giúp cú pháp tường minh hơn, cũng như việc có thể truyền tham số vào hàm.\nNgược lại trong các trường hợp khác, việc sử dụng size là khả dĩ hơn cả, đặc biệt với dữ liệu lớn thì nên tránh sử dụng length, vì đó có thể mang lại 1 thảm hoạ cho chương trình khi quá nhiều dữ liệu bị nạp vào bộ nhớ 1 cách vô ích.\n","slug":"2019-01-28-count-vs-length-size-in-ruby-and-ror","published":1,"updated":"2019-11-13T03:58:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7suey00065rrsdkt25rug","content":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Khoảng 1 năm trước, khi tôi bắt đầu học về Ruby on Rails, giống như nhiều developers khác, tôi chủ yếu tập trung vào cách để có thể xây dựng một ứng dụng ruby on rails chạy được mà không tập trung nhiều vào kiến thức Ruby nền tảng. Có lẽ đấy cũng là lựa chọn duy nhất vào thời điểm đó với một cậu sinh viên mới ra trường như tôi, khi mà có quá nhiều khái niệm, quá nhiều thứ phải học mà sếp của tôi cũng như sếp của bạn sẽ không trả lương cho chúng ta lên công ty để “học”.<br>Thời gian trôi qua, khi đã có nhiều kinh nghiệm hơn, tôi bắt đầu ngày càng hứng thú về những kiến thức nền tảng mà ngày xưa tôi chỉ từng đọc lướt qua. Trong đó có Count, Length và Size, những thứ tưởng như không có gì để nói hay tìm hiểu thêm, nhưng liệu chúng có thực sự đơn giản như vậy?</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-Tong-quan\"><a href=\"#1-Tong-quan\" class=\"headerlink\" title=\"1.Tổng quan\"></a>1.Tổng quan</h1><p>Về cơ bản, đây là ba phương thức được Ruby cung cấp, và dĩ nhiên, nó hoàn toàn có thể sử dụng trong rails. Một cách thường xuyên nhất, bạn có thể thấy người ta sử dụng những phương thức này cho một mảng dữ liệu bất kì trong Ruby hay một mảng record trong Rails. Ý nghĩa của nó là trả về kích thước của mảng/hash. Ví dụ:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array = Array.new(<span class=\"number\">3</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">#=&gt; Tạo 1 mảng tên array có 3 phần tử đều có giá trị là 1.</span></span><br><span class=\"line\">array.size, array.length, array.count</span><br><span class=\"line\"><span class=\"comment\">#=&gt; Kết quả trả về cùng là 3.</span></span><br></pre></td></tr></table></figure>\n\n<p>Nhưng mọi chuyện không dừng lại ở đấy, nếu chúng chỉ cùng có chung một chức năng thì không có lý do gì để chúng cùng tồn tại.</p>\n<h1 id=\"2-Trong-ruby\"><a href=\"#2-Trong-ruby\" class=\"headerlink\" title=\"2.Trong ruby\"></a>2.Trong ruby</h1><p>Ngoài chức năng tính kích thước của một mảng hay một hash như đã được đề cập ở trên, Size có thể được sử dụng với cả đối tượng dạng chuỗi và dạng số nguyên.<br>Với chuỗi, Size sẽ trả về kết quả là số lượng ký tự của chuỗi. Còn với số nguyên, nó sẽ trả về số bite mà đối tượng đó nắm giữ trên bộ nhớ. Ví dụ:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str_temp = <span class=\"string\">\"hduychinh\"</span></span><br><span class=\"line\">str_temp.size</span><br><span class=\"line\"><span class=\"comment\">#=&gt; Kết quả trả về độ dài chuỗi là 9.</span></span><br><span class=\"line\">int_temp = <span class=\"number\">12</span></span><br><span class=\"line\">int_temp.size</span><br><span class=\"line\"><span class=\"comment\">#=&gt; Kết quả trả về là 8, ứng với 8 bytes mà int_temp lưu trữ trên bộ nhớ.</span></span><br></pre></td></tr></table></figure>\n\n<p>Length kém hơn size một chút, Length chỉ có thể sử dụng thêm cho các đối tượng dạng chuỗi để trả về số lượng ký tự trong chuỗi, mà không thể sử dụng trên số nguyên.</p>\n<p>Cuối cùng là Count, nó không có chức năng gì bổ sung so với phần đã đề cập. Tuy nhiên, một điểm mạnh của Count đó là khi sử dụng với mảng/hash thì nó có thể nhận tham số chuyển vào. Ví dụ:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">c.count <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\">#=&gt; Kết quả trả về là 2.</span></span><br><span class=\"line\">c.count &#123; <span class=\"params\">|i|</span> i &gt; <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"><span class=\"comment\">#=&gt; Kết quả trả về là 3.</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-Trong-Active-Record\"><a href=\"#3-Trong-Active-Record\" class=\"headerlink\" title=\"3.Trong Active Record\"></a>3.Trong Active Record</h1><p>Khi sử dụng Count thực chất là bạn đang sử dụng lệnh sql <code>select count(*) from table_names</code> để truy vấn ra số lượng mà chúng ta đang cần tìm hiểu. Thứ hai, Count không được lưu trữ lại, điều đó có nghĩa mỗi lần bạn chạy hàm Count thì nó sẽ truy vấn vào cơ sở dữ liệu mà không hề quan tâm là bạn có gọi lệnh Count trước đó hay không. Thứ ba, Count là lệnh duy nhất trong ba lệnh trên có thể gọi trực tiếp thông qua một model class, ví dụ như: <code>Cat.count</code>.</p>\n<p>Khi sử dụng Length, điều đầu tiên đó là load toàn bộ record mà bạn đang định đếm số lượng vào bộ nhớ rồi tính toán. Từ lần gọi thứ hai, nó sẽ lấy lại kết quả cũ chứ không load dữ liệu lên nữa. Đây thực sự là một điều tồi tệ nếu bạn có một cơ sở dữ liệu lớn, nó có thể load hàng triệu record vào bộ nhớ.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cat.all.length</span><br><span class=\"line\"><span class=\"comment\">#=&gt; Cat Load (0.2ms)  SELECT \"cats\".* FROM \"cats\"</span></span><br></pre></td></tr></table></figure>\n\n<p>Khi sử dụng Size, điều đầu tiên của nó là tìm xem kết quả của truy vấn đã có trong bộ nhớ hay chưa, nếu có rồi thì nó sẽ lấy ra và sử dụng, còn nếu chưa có, nó sẽ sử dụng một câu truy vấn SQL vào cơ sở dữ liệu để đếm số lượng. Điều này thật sự tuyệt vời, như một sự kết hợp giữa length và count.</p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Theo dữ liệu từ fast-ruby thì method length chạy gần tương đương với size và chạy nhanh hơn hẳn so với count. Điểm lợi của count là nó có thể được gọi từ 1 class Model, giúp cú pháp tường minh hơn, cũng như việc có thể truyền tham số vào hàm.<br>Ngược lại trong các trường hợp khác, việc sử dụng size là khả dĩ hơn cả, đặc biệt với dữ liệu lớn thì nên tránh sử dụng length, vì đó có thể mang lại 1 thảm hoạ cho chương trình khi quá nhiều dữ liệu bị nạp vào bộ nhớ 1 cách vô ích.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Khoảng 1 năm trước, khi tôi bắt đầu học về Ruby on Rails, giống như nhiều developers khác, tôi chủ yếu tập trung vào cách để có thể xây dựng một ứng dụng ruby on rails chạy được mà không tập trung nhiều vào kiến thức Ruby nền tảng. Có lẽ đấy cũng là lựa chọn duy nhất vào thời điểm đó với một cậu sinh viên mới ra trường như tôi, khi mà có quá nhiều khái niệm, quá nhiều thứ phải học mà sếp của tôi cũng như sếp của bạn sẽ không trả lương cho chúng ta lên công ty để “học”.<br>Thời gian trôi qua, khi đã có nhiều kinh nghiệm hơn, tôi bắt đầu ngày càng hứng thú về những kiến thức nền tảng mà ngày xưa tôi chỉ từng đọc lướt qua. Trong đó có Count, Length và Size, những thứ tưởng như không có gì để nói hay tìm hiểu thêm, nhưng liệu chúng có thực sự đơn giản như vậy?</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-Tong-quan\"><a href=\"#1-Tong-quan\" class=\"headerlink\" title=\"1.Tổng quan\"></a>1.Tổng quan</h1><p>Về cơ bản, đây là ba phương thức được Ruby cung cấp, và dĩ nhiên, nó hoàn toàn có thể sử dụng trong rails. Một cách thường xuyên nhất, bạn có thể thấy người ta sử dụng những phương thức này cho một mảng dữ liệu bất kì trong Ruby hay một mảng record trong Rails. Ý nghĩa của nó là trả về kích thước của mảng/hash. Ví dụ:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array = Array.new(<span class=\"number\">3</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">#=&gt; Tạo 1 mảng tên array có 3 phần tử đều có giá trị là 1.</span></span><br><span class=\"line\">array.size, array.length, array.count</span><br><span class=\"line\"><span class=\"comment\">#=&gt; Kết quả trả về cùng là 3.</span></span><br></pre></td></tr></table></figure>\n\n<p>Nhưng mọi chuyện không dừng lại ở đấy, nếu chúng chỉ cùng có chung một chức năng thì không có lý do gì để chúng cùng tồn tại.</p>\n<h1 id=\"2-Trong-ruby\"><a href=\"#2-Trong-ruby\" class=\"headerlink\" title=\"2.Trong ruby\"></a>2.Trong ruby</h1><p>Ngoài chức năng tính kích thước của một mảng hay một hash như đã được đề cập ở trên, Size có thể được sử dụng với cả đối tượng dạng chuỗi và dạng số nguyên.<br>Với chuỗi, Size sẽ trả về kết quả là số lượng ký tự của chuỗi. Còn với số nguyên, nó sẽ trả về số bite mà đối tượng đó nắm giữ trên bộ nhớ. Ví dụ:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str_temp = <span class=\"string\">\"hduychinh\"</span></span><br><span class=\"line\">str_temp.size</span><br><span class=\"line\"><span class=\"comment\">#=&gt; Kết quả trả về độ dài chuỗi là 9.</span></span><br><span class=\"line\">int_temp = <span class=\"number\">12</span></span><br><span class=\"line\">int_temp.size</span><br><span class=\"line\"><span class=\"comment\">#=&gt; Kết quả trả về là 8, ứng với 8 bytes mà int_temp lưu trữ trên bộ nhớ.</span></span><br></pre></td></tr></table></figure>\n\n<p>Length kém hơn size một chút, Length chỉ có thể sử dụng thêm cho các đối tượng dạng chuỗi để trả về số lượng ký tự trong chuỗi, mà không thể sử dụng trên số nguyên.</p>\n<p>Cuối cùng là Count, nó không có chức năng gì bổ sung so với phần đã đề cập. Tuy nhiên, một điểm mạnh của Count đó là khi sử dụng với mảng/hash thì nó có thể nhận tham số chuyển vào. Ví dụ:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">c.count <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\">#=&gt; Kết quả trả về là 2.</span></span><br><span class=\"line\">c.count &#123; <span class=\"params\">|i|</span> i &gt; <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"><span class=\"comment\">#=&gt; Kết quả trả về là 3.</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-Trong-Active-Record\"><a href=\"#3-Trong-Active-Record\" class=\"headerlink\" title=\"3.Trong Active Record\"></a>3.Trong Active Record</h1><p>Khi sử dụng Count thực chất là bạn đang sử dụng lệnh sql <code>select count(*) from table_names</code> để truy vấn ra số lượng mà chúng ta đang cần tìm hiểu. Thứ hai, Count không được lưu trữ lại, điều đó có nghĩa mỗi lần bạn chạy hàm Count thì nó sẽ truy vấn vào cơ sở dữ liệu mà không hề quan tâm là bạn có gọi lệnh Count trước đó hay không. Thứ ba, Count là lệnh duy nhất trong ba lệnh trên có thể gọi trực tiếp thông qua một model class, ví dụ như: <code>Cat.count</code>.</p>\n<p>Khi sử dụng Length, điều đầu tiên đó là load toàn bộ record mà bạn đang định đếm số lượng vào bộ nhớ rồi tính toán. Từ lần gọi thứ hai, nó sẽ lấy lại kết quả cũ chứ không load dữ liệu lên nữa. Đây thực sự là một điều tồi tệ nếu bạn có một cơ sở dữ liệu lớn, nó có thể load hàng triệu record vào bộ nhớ.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cat.all.length</span><br><span class=\"line\"><span class=\"comment\">#=&gt; Cat Load (0.2ms)  SELECT \"cats\".* FROM \"cats\"</span></span><br></pre></td></tr></table></figure>\n\n<p>Khi sử dụng Size, điều đầu tiên của nó là tìm xem kết quả của truy vấn đã có trong bộ nhớ hay chưa, nếu có rồi thì nó sẽ lấy ra và sử dụng, còn nếu chưa có, nó sẽ sử dụng một câu truy vấn SQL vào cơ sở dữ liệu để đếm số lượng. Điều này thật sự tuyệt vời, như một sự kết hợp giữa length và count.</p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Theo dữ liệu từ fast-ruby thì method length chạy gần tương đương với size và chạy nhanh hơn hẳn so với count. Điểm lợi của count là nó có thể được gọi từ 1 class Model, giúp cú pháp tường minh hơn, cũng như việc có thể truyền tham số vào hàm.<br>Ngược lại trong các trường hợp khác, việc sử dụng size là khả dĩ hơn cả, đặc biệt với dữ liệu lớn thì nên tránh sử dụng length, vì đó có thể mang lại 1 thảm hoạ cho chương trình khi quá nhiều dữ liệu bị nạp vào bộ nhớ 1 cách vô ích.</p>\n"},{"title":"Bash File Trên Unix","date":"2018-12-29T17:00:00.000Z","draft":false,"mytag":"OS","mytrend":"COOL","_content":"\n# Đặt vấn đề\n\nĐây lại là một bài viết tiếp theo về chủ đề liên quan đến các hệ điều hành và dòng lệnh. Khi mới tiếp xúc với máy tính, OS mà tôi sử dụng là windows, đến khi lên đại học, phần lớn thời gian học tập vẫn gắn liền với windows, còn phần nhỏ thời gian còn lại là làm quen với một hệ điều hành lạ lẫm mang tên Linux.\n\nViệc cài đặt phần mềm trên Linux có khó khăn hơn windows một chút, đó là thay vì click chuột rồi next next next next... thì phần nhiều các phần mềm phục vụ công việc lập trình đều phải cài đặt qua dòng lệnh. Mọi thứ không có vấn đề gì cho đến khi việc copy những dòng lệnh đó rồi enter, bạn sẽ không còn nhận được một kết quả thành công mỹ mãn nữa mà thay vào đó là một đống lỗi được trả về.\n\nKhi làm việc với Ruby, tôi đã từng gặp những lỗi liên quan đến Rbenv và RVM. Điều đó thực sự là một cơn ác mộng khi liên tục phải google tìm kiếm câu trả lời cho vấn đề gặp phải, copy những dòng lệnh trên stackoverflow paste vào terminal và chờ đợi rằng vấn đề sẽ được giải quyết dù chẳng hiểu dòng lệnh này có nghĩa là gì. Lâu dần tôi đã tích luỹ thêm được một số hiểu biết muốn chia sẻ mà bắt đầu là các File hệt thống.\n\n# Luận bàn\n\nĐể bắt đầu chia sẻ về những file kể trên, có lẽ chúng ta sẽ phải điểm qua một số khái niệm cơ bản.\n\n# 1.Một số khái niệm cơ bản.\n\n`Unix` là một hệ điều hành ra đời đã rất lâu, nó là tiền thân của hai nhánh hệ điều hành rất nổi tiếng khác, bản thương mại chính là `macOS` và bản mã nguồn mở chính là `GNU`. Cho đến những năm 90, có một sự kết hợp giữa các phần mềm của `GNU` và phần core của một dự án mã nguồn mở khác tên là `Linux` đã tạo thành một hệ điều hành hoàn chỉnh mang tên là `GNU/Linux`, ngày nay đa số chúng ta chỉ thường gọi tắt là `Linux`\n\nQua đó chúng ta có thể thấy, `Linux` và các hệ điều hành con cháu của `Unix` có rất nhiều điểm chung.\n\n`Shell`: Đây cũng là một khái niệm quan trọng cần tìm hiểu. Trước khi đi vào chủ đề chính của bài viết, để tìm hiểu một cách sâu sắc về Shell, có lẽ sẽ cần đến một bài viết khác, nên ở đây tôi chỉ mô tả một cách bao quát về nó. `Shell` là phần nằm giữa ứng dụng và phần core của hệ điều hành.\n\nHãy tưởng tượng chúng ta có một chồng sách gồm ba quyển với quyển trên cùng là những ứng dụng đang chạy trên máy tính của bạn vì dụ như word, excel, cuốn ở dưới cùng chính là phần nhân của hệ điều hành. Để các ứng dụng của bạn có thể sử dụng các tài nguyên của máy tính như bộ nhớ, ram, IO... điều tất yếu phải xảy ra đó là ứng dụng của bạn phải giao tiếp được với hệ điều hành.\n\nTuy nhiên, vấn đề gặp phải đó là hệ điều hành chỉ hiểu mã máy, một thứ quá phức tạp để người dùng khi sử dụng ứng dụng có thể thao tác được. Đó là lý do ra đời của “quyển sách” ở giữa mà chúng ta gọi là `Shell`. Nhiệm vụ của nó là gì? Đó là chuyển đổi các lệnh từ “quyển sách” đầu tiên thành các lệnh mà “quyển sách” thứ ba có thể hiểu và thực hiện được (Thông dịch).\n\nVí dụ terminal được xem là một `Shell CLI`, mỗi khi bạn gõ một lệnh bất kỳ trên terminal, nó sẽ chuyển đổi câu lệnh bạn viết thành một câu lệnh khác mà phần nhân hệ điều hành có thể hiểu và thực hiện được.\n\n# 2.Điều gì xảy ra khi bạn gõ một lệnh trên terminal?\n\nĐã bao giờ bạn tự hỏi chuyện gì sẽ xảy ra tiếp theo khi ta gõ một lệnh trong terminal? Ví dụ:\n\n```ruby\nls -a\n#=> Hiển thị tất cả file và folder nằm trong current folder.\n```\n\nChúng ta sẽ thường tự an ủi bản thân rằng những câu lệnh đó đã được hệ điều hành lưu lại như một cuốn từ điển để đến khi được gọi chúng sẽ biết tìm câu trả lời ở đâu. Thực tế suy nghĩ trên không hẳn đã sai, mọi thứ trong Unix đều là file, nếu bạn gõ dòng lệnh:\n\n```ruby\necho $PATH\n```\n\nKết quả bạn nhận được chính là một danh sách các thư mục mà terminal sẽ tìm kiếm câu lệnh bạn gõ theo thứ tự từ trái qua phải. Với một hệ điều hành thuần khiết chưa cài đặt thêm các phần mềm bên ngoài thì PATH sẽ có giá trị mặc định như sau:\n\n`/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin`\n\nCòn trên máy tính của tôi thì PATH lại có giá trị là:\n\n`/Users/admin/.rbenv/shims:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin`\n\nCó một sự khác biệt nhỏ, ta có thể thấy chuỗi PATH trên máy tính của tôi có phần đầu chuỗi được thêm bởi một thư mục .rbenv nào đó. Đây chính là mấu chốt của vấn đề, lý do xuất hiện của phần mở rộng nêu trên đó là tôi đã cài đặt thêm Ruby vào máy tính của mình bằng công cụ rbenv.\n\nHiển nhiên, khi hệ điều hành còn thuần khiết, nó không thể hiểu được câu lệnh `ruby – v`. Việc cài đặt Ruby vào máy tính đồng nghĩa với việc tôi đã tải các file liên quan vào một thư mục nào đó, và để chỉ cho terminal biết phải vào đâu để tìm kiếm các lệnh liên quan đến Ruby vừa cài đặt, chuỗi PATH sẽ được ghi đè bổ sung thêm đường dẫn vào thư mục chứa các file thực thi của Ruby. Từ đây, mỗi khi bạn gõ bất cứ một câu lệnh nào liên quan đến Ruby, terminal sẽ theo chuỗi PATH vào từng thư mục để tìm kiếm và thực thi câu lệnh đó.\n\nSuy ra, có một lỗi rất hay xảy ra cho những người mới sử dụng Ruby, đó là họ thêm và xoá Ruby khá thường xuyên dẫn đến đường dẫn bị sai và terminal không thể tìm được thư mục có thể thực thi câu lệnh một cách chính xác.\n\nTrong terminal, bạn có thể nối thêm một thư mục vào chuỗi PATH bằng câu lệnh sau:\n\n`export PATH=\"$PATH:new_path\"`\n\n# 3.Một số file quan trọng trên Macos.\n\nKhi quá trình làm việc với terminal nhiều hơn và chúng ta cần cài đặt một số thứ cần thiết trong quá trình làm việc, chúng ta sử dụng các `dot file`. Nội dung của các `dot file` này là các câu lệnh shell script (chức năng của câu lệnh này có thể chúng ta sẽ tìm hiểu sau).\n\nKhi bạn mở một terminal mà nó đòi hỏi bạn phải login (ví dụ như khi bạn remote access vào một máy tính khác thông qua SSH, bạn cần nhập tên đăng nhập và mật khẩu) thì đó là một `Login Shell`.\nVới trường hợp Login Shell thì `dot file` được load lên là file `.bash_profile`.\nTrong một trường hợp khác, bạn mở một terminal mà không cần đăng nhập thì `dot file` được load là  `bashrc`.\n\nNote: Khác với những người anh em khác, terminal trên Macos sẽ chạy `dot file` `.bash_profile` khi bạn mở một cửa sổ mới nên tôi thường đặt những cấu hình cần thiết vào một file duy nhất đó là `.bash_profile`. Tất nhiên, từ `.bash_profile` ta có thể load các `dot file` khác nếu cần thiết (chúng ta sẽ bàn về nó trong tương lai).\n\nThứ tự các `dot file` được khởi chạy trên macOS:\n\n```ruby\n#=> etc/profile\n#=> etc/bashrc\n#=> ~/.bash_profile\n#=> ~/.bash_login (nếu ~/.bash_profile không tồn tại).\n#=> ~/.profile (nếu ~/.bash_profile và ~/.bash_login đều không tồn tại).\n```\n\n# 4.Các file quan trọng trên Linux\n\nNhư đã trình bày ở trên, có một sự giống nhau đáng kể giữa `macOS` và `Linux`. Vì vậy, tôi chỉ có một số điều bổ sung như sau: Trên Linux, thông thường chúng ta sẽ có các `dot file` sau đây:\n\n```ruby\n#=> ~/.bash_login (chạy khi login shell)\n#=> ~/.bashrc (chạy khi không login)\n#=> ~/.bash_logout (chạy khi logout shell)\n#=> ~/bash_history (lịch sử trên shell)\n```\n\n# Kết luận\n\nCòn rất nhiều điều cần nói và bàn luận thêm trong các bài viết tiếp theo.\n","source":"_posts/2019-01-30-bash-file-in-macos-and-linux.md","raw":"---\ntitle: \"Bash File Trên Unix\"\ndate: 2018-12-30\ndraft: false\ntags: [\"unix\"]\ncategories: [\"hệ điều hành\"]\nmytag: \"OS\"\n# mytop: \"TOP VIEWS\"\nmytrend: \"COOL\"\n\n---\n\n# Đặt vấn đề\n\nĐây lại là một bài viết tiếp theo về chủ đề liên quan đến các hệ điều hành và dòng lệnh. Khi mới tiếp xúc với máy tính, OS mà tôi sử dụng là windows, đến khi lên đại học, phần lớn thời gian học tập vẫn gắn liền với windows, còn phần nhỏ thời gian còn lại là làm quen với một hệ điều hành lạ lẫm mang tên Linux.\n\nViệc cài đặt phần mềm trên Linux có khó khăn hơn windows một chút, đó là thay vì click chuột rồi next next next next... thì phần nhiều các phần mềm phục vụ công việc lập trình đều phải cài đặt qua dòng lệnh. Mọi thứ không có vấn đề gì cho đến khi việc copy những dòng lệnh đó rồi enter, bạn sẽ không còn nhận được một kết quả thành công mỹ mãn nữa mà thay vào đó là một đống lỗi được trả về.\n\nKhi làm việc với Ruby, tôi đã từng gặp những lỗi liên quan đến Rbenv và RVM. Điều đó thực sự là một cơn ác mộng khi liên tục phải google tìm kiếm câu trả lời cho vấn đề gặp phải, copy những dòng lệnh trên stackoverflow paste vào terminal và chờ đợi rằng vấn đề sẽ được giải quyết dù chẳng hiểu dòng lệnh này có nghĩa là gì. Lâu dần tôi đã tích luỹ thêm được một số hiểu biết muốn chia sẻ mà bắt đầu là các File hệt thống.\n\n# Luận bàn\n\nĐể bắt đầu chia sẻ về những file kể trên, có lẽ chúng ta sẽ phải điểm qua một số khái niệm cơ bản.\n\n# 1.Một số khái niệm cơ bản.\n\n`Unix` là một hệ điều hành ra đời đã rất lâu, nó là tiền thân của hai nhánh hệ điều hành rất nổi tiếng khác, bản thương mại chính là `macOS` và bản mã nguồn mở chính là `GNU`. Cho đến những năm 90, có một sự kết hợp giữa các phần mềm của `GNU` và phần core của một dự án mã nguồn mở khác tên là `Linux` đã tạo thành một hệ điều hành hoàn chỉnh mang tên là `GNU/Linux`, ngày nay đa số chúng ta chỉ thường gọi tắt là `Linux`\n\nQua đó chúng ta có thể thấy, `Linux` và các hệ điều hành con cháu của `Unix` có rất nhiều điểm chung.\n\n`Shell`: Đây cũng là một khái niệm quan trọng cần tìm hiểu. Trước khi đi vào chủ đề chính của bài viết, để tìm hiểu một cách sâu sắc về Shell, có lẽ sẽ cần đến một bài viết khác, nên ở đây tôi chỉ mô tả một cách bao quát về nó. `Shell` là phần nằm giữa ứng dụng và phần core của hệ điều hành.\n\nHãy tưởng tượng chúng ta có một chồng sách gồm ba quyển với quyển trên cùng là những ứng dụng đang chạy trên máy tính của bạn vì dụ như word, excel, cuốn ở dưới cùng chính là phần nhân của hệ điều hành. Để các ứng dụng của bạn có thể sử dụng các tài nguyên của máy tính như bộ nhớ, ram, IO... điều tất yếu phải xảy ra đó là ứng dụng của bạn phải giao tiếp được với hệ điều hành.\n\nTuy nhiên, vấn đề gặp phải đó là hệ điều hành chỉ hiểu mã máy, một thứ quá phức tạp để người dùng khi sử dụng ứng dụng có thể thao tác được. Đó là lý do ra đời của “quyển sách” ở giữa mà chúng ta gọi là `Shell`. Nhiệm vụ của nó là gì? Đó là chuyển đổi các lệnh từ “quyển sách” đầu tiên thành các lệnh mà “quyển sách” thứ ba có thể hiểu và thực hiện được (Thông dịch).\n\nVí dụ terminal được xem là một `Shell CLI`, mỗi khi bạn gõ một lệnh bất kỳ trên terminal, nó sẽ chuyển đổi câu lệnh bạn viết thành một câu lệnh khác mà phần nhân hệ điều hành có thể hiểu và thực hiện được.\n\n# 2.Điều gì xảy ra khi bạn gõ một lệnh trên terminal?\n\nĐã bao giờ bạn tự hỏi chuyện gì sẽ xảy ra tiếp theo khi ta gõ một lệnh trong terminal? Ví dụ:\n\n```ruby\nls -a\n#=> Hiển thị tất cả file và folder nằm trong current folder.\n```\n\nChúng ta sẽ thường tự an ủi bản thân rằng những câu lệnh đó đã được hệ điều hành lưu lại như một cuốn từ điển để đến khi được gọi chúng sẽ biết tìm câu trả lời ở đâu. Thực tế suy nghĩ trên không hẳn đã sai, mọi thứ trong Unix đều là file, nếu bạn gõ dòng lệnh:\n\n```ruby\necho $PATH\n```\n\nKết quả bạn nhận được chính là một danh sách các thư mục mà terminal sẽ tìm kiếm câu lệnh bạn gõ theo thứ tự từ trái qua phải. Với một hệ điều hành thuần khiết chưa cài đặt thêm các phần mềm bên ngoài thì PATH sẽ có giá trị mặc định như sau:\n\n`/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin`\n\nCòn trên máy tính của tôi thì PATH lại có giá trị là:\n\n`/Users/admin/.rbenv/shims:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin`\n\nCó một sự khác biệt nhỏ, ta có thể thấy chuỗi PATH trên máy tính của tôi có phần đầu chuỗi được thêm bởi một thư mục .rbenv nào đó. Đây chính là mấu chốt của vấn đề, lý do xuất hiện của phần mở rộng nêu trên đó là tôi đã cài đặt thêm Ruby vào máy tính của mình bằng công cụ rbenv.\n\nHiển nhiên, khi hệ điều hành còn thuần khiết, nó không thể hiểu được câu lệnh `ruby – v`. Việc cài đặt Ruby vào máy tính đồng nghĩa với việc tôi đã tải các file liên quan vào một thư mục nào đó, và để chỉ cho terminal biết phải vào đâu để tìm kiếm các lệnh liên quan đến Ruby vừa cài đặt, chuỗi PATH sẽ được ghi đè bổ sung thêm đường dẫn vào thư mục chứa các file thực thi của Ruby. Từ đây, mỗi khi bạn gõ bất cứ một câu lệnh nào liên quan đến Ruby, terminal sẽ theo chuỗi PATH vào từng thư mục để tìm kiếm và thực thi câu lệnh đó.\n\nSuy ra, có một lỗi rất hay xảy ra cho những người mới sử dụng Ruby, đó là họ thêm và xoá Ruby khá thường xuyên dẫn đến đường dẫn bị sai và terminal không thể tìm được thư mục có thể thực thi câu lệnh một cách chính xác.\n\nTrong terminal, bạn có thể nối thêm một thư mục vào chuỗi PATH bằng câu lệnh sau:\n\n`export PATH=\"$PATH:new_path\"`\n\n# 3.Một số file quan trọng trên Macos.\n\nKhi quá trình làm việc với terminal nhiều hơn và chúng ta cần cài đặt một số thứ cần thiết trong quá trình làm việc, chúng ta sử dụng các `dot file`. Nội dung của các `dot file` này là các câu lệnh shell script (chức năng của câu lệnh này có thể chúng ta sẽ tìm hiểu sau).\n\nKhi bạn mở một terminal mà nó đòi hỏi bạn phải login (ví dụ như khi bạn remote access vào một máy tính khác thông qua SSH, bạn cần nhập tên đăng nhập và mật khẩu) thì đó là một `Login Shell`.\nVới trường hợp Login Shell thì `dot file` được load lên là file `.bash_profile`.\nTrong một trường hợp khác, bạn mở một terminal mà không cần đăng nhập thì `dot file` được load là  `bashrc`.\n\nNote: Khác với những người anh em khác, terminal trên Macos sẽ chạy `dot file` `.bash_profile` khi bạn mở một cửa sổ mới nên tôi thường đặt những cấu hình cần thiết vào một file duy nhất đó là `.bash_profile`. Tất nhiên, từ `.bash_profile` ta có thể load các `dot file` khác nếu cần thiết (chúng ta sẽ bàn về nó trong tương lai).\n\nThứ tự các `dot file` được khởi chạy trên macOS:\n\n```ruby\n#=> etc/profile\n#=> etc/bashrc\n#=> ~/.bash_profile\n#=> ~/.bash_login (nếu ~/.bash_profile không tồn tại).\n#=> ~/.profile (nếu ~/.bash_profile và ~/.bash_login đều không tồn tại).\n```\n\n# 4.Các file quan trọng trên Linux\n\nNhư đã trình bày ở trên, có một sự giống nhau đáng kể giữa `macOS` và `Linux`. Vì vậy, tôi chỉ có một số điều bổ sung như sau: Trên Linux, thông thường chúng ta sẽ có các `dot file` sau đây:\n\n```ruby\n#=> ~/.bash_login (chạy khi login shell)\n#=> ~/.bashrc (chạy khi không login)\n#=> ~/.bash_logout (chạy khi logout shell)\n#=> ~/bash_history (lịch sử trên shell)\n```\n\n# Kết luận\n\nCòn rất nhiều điều cần nói và bàn luận thêm trong các bài viết tiếp theo.\n","slug":"2019-01-30-bash-file-in-macos-and-linux","published":1,"updated":"2019-11-13T03:59:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7suf000075rrsclrd6f3j","content":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Đây lại là một bài viết tiếp theo về chủ đề liên quan đến các hệ điều hành và dòng lệnh. Khi mới tiếp xúc với máy tính, OS mà tôi sử dụng là windows, đến khi lên đại học, phần lớn thời gian học tập vẫn gắn liền với windows, còn phần nhỏ thời gian còn lại là làm quen với một hệ điều hành lạ lẫm mang tên Linux.</p>\n<p>Việc cài đặt phần mềm trên Linux có khó khăn hơn windows một chút, đó là thay vì click chuột rồi next next next next… thì phần nhiều các phần mềm phục vụ công việc lập trình đều phải cài đặt qua dòng lệnh. Mọi thứ không có vấn đề gì cho đến khi việc copy những dòng lệnh đó rồi enter, bạn sẽ không còn nhận được một kết quả thành công mỹ mãn nữa mà thay vào đó là một đống lỗi được trả về.</p>\n<p>Khi làm việc với Ruby, tôi đã từng gặp những lỗi liên quan đến Rbenv và RVM. Điều đó thực sự là một cơn ác mộng khi liên tục phải google tìm kiếm câu trả lời cho vấn đề gặp phải, copy những dòng lệnh trên stackoverflow paste vào terminal và chờ đợi rằng vấn đề sẽ được giải quyết dù chẳng hiểu dòng lệnh này có nghĩa là gì. Lâu dần tôi đã tích luỹ thêm được một số hiểu biết muốn chia sẻ mà bắt đầu là các File hệt thống.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><p>Để bắt đầu chia sẻ về những file kể trên, có lẽ chúng ta sẽ phải điểm qua một số khái niệm cơ bản.</p>\n<h1 id=\"1-Mot-so-khai-niem-co-ban\"><a href=\"#1-Mot-so-khai-niem-co-ban\" class=\"headerlink\" title=\"1.Một số khái niệm cơ bản.\"></a>1.Một số khái niệm cơ bản.</h1><p><code>Unix</code> là một hệ điều hành ra đời đã rất lâu, nó là tiền thân của hai nhánh hệ điều hành rất nổi tiếng khác, bản thương mại chính là <code>macOS</code> và bản mã nguồn mở chính là <code>GNU</code>. Cho đến những năm 90, có một sự kết hợp giữa các phần mềm của <code>GNU</code> và phần core của một dự án mã nguồn mở khác tên là <code>Linux</code> đã tạo thành một hệ điều hành hoàn chỉnh mang tên là <code>GNU/Linux</code>, ngày nay đa số chúng ta chỉ thường gọi tắt là <code>Linux</code></p>\n<p>Qua đó chúng ta có thể thấy, <code>Linux</code> và các hệ điều hành con cháu của <code>Unix</code> có rất nhiều điểm chung.</p>\n<p><code>Shell</code>: Đây cũng là một khái niệm quan trọng cần tìm hiểu. Trước khi đi vào chủ đề chính của bài viết, để tìm hiểu một cách sâu sắc về Shell, có lẽ sẽ cần đến một bài viết khác, nên ở đây tôi chỉ mô tả một cách bao quát về nó. <code>Shell</code> là phần nằm giữa ứng dụng và phần core của hệ điều hành.</p>\n<p>Hãy tưởng tượng chúng ta có một chồng sách gồm ba quyển với quyển trên cùng là những ứng dụng đang chạy trên máy tính của bạn vì dụ như word, excel, cuốn ở dưới cùng chính là phần nhân của hệ điều hành. Để các ứng dụng của bạn có thể sử dụng các tài nguyên của máy tính như bộ nhớ, ram, IO… điều tất yếu phải xảy ra đó là ứng dụng của bạn phải giao tiếp được với hệ điều hành.</p>\n<p>Tuy nhiên, vấn đề gặp phải đó là hệ điều hành chỉ hiểu mã máy, một thứ quá phức tạp để người dùng khi sử dụng ứng dụng có thể thao tác được. Đó là lý do ra đời của “quyển sách” ở giữa mà chúng ta gọi là <code>Shell</code>. Nhiệm vụ của nó là gì? Đó là chuyển đổi các lệnh từ “quyển sách” đầu tiên thành các lệnh mà “quyển sách” thứ ba có thể hiểu và thực hiện được (Thông dịch).</p>\n<p>Ví dụ terminal được xem là một <code>Shell CLI</code>, mỗi khi bạn gõ một lệnh bất kỳ trên terminal, nó sẽ chuyển đổi câu lệnh bạn viết thành một câu lệnh khác mà phần nhân hệ điều hành có thể hiểu và thực hiện được.</p>\n<h1 id=\"2-Dieu-gi-xay-ra-khi-ban-go-mot-lenh-tren-terminal\"><a href=\"#2-Dieu-gi-xay-ra-khi-ban-go-mot-lenh-tren-terminal\" class=\"headerlink\" title=\"2.Điều gì xảy ra khi bạn gõ một lệnh trên terminal?\"></a>2.Điều gì xảy ra khi bạn gõ một lệnh trên terminal?</h1><p>Đã bao giờ bạn tự hỏi chuyện gì sẽ xảy ra tiếp theo khi ta gõ một lệnh trong terminal? Ví dụ:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -a</span><br><span class=\"line\"><span class=\"comment\">#=&gt; Hiển thị tất cả file và folder nằm trong current folder.</span></span><br></pre></td></tr></table></figure>\n\n<p>Chúng ta sẽ thường tự an ủi bản thân rằng những câu lệnh đó đã được hệ điều hành lưu lại như một cuốn từ điển để đến khi được gọi chúng sẽ biết tìm câu trả lời ở đâu. Thực tế suy nghĩ trên không hẳn đã sai, mọi thứ trong Unix đều là file, nếu bạn gõ dòng lệnh:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $PATH</span><br></pre></td></tr></table></figure>\n\n<p>Kết quả bạn nhận được chính là một danh sách các thư mục mà terminal sẽ tìm kiếm câu lệnh bạn gõ theo thứ tự từ trái qua phải. Với một hệ điều hành thuần khiết chưa cài đặt thêm các phần mềm bên ngoài thì PATH sẽ có giá trị mặc định như sau:</p>\n<p><code>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin</code></p>\n<p>Còn trên máy tính của tôi thì PATH lại có giá trị là:</p>\n<p><code>/Users/admin/.rbenv/shims:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin</code></p>\n<p>Có một sự khác biệt nhỏ, ta có thể thấy chuỗi PATH trên máy tính của tôi có phần đầu chuỗi được thêm bởi một thư mục .rbenv nào đó. Đây chính là mấu chốt của vấn đề, lý do xuất hiện của phần mở rộng nêu trên đó là tôi đã cài đặt thêm Ruby vào máy tính của mình bằng công cụ rbenv.</p>\n<p>Hiển nhiên, khi hệ điều hành còn thuần khiết, nó không thể hiểu được câu lệnh <code>ruby – v</code>. Việc cài đặt Ruby vào máy tính đồng nghĩa với việc tôi đã tải các file liên quan vào một thư mục nào đó, và để chỉ cho terminal biết phải vào đâu để tìm kiếm các lệnh liên quan đến Ruby vừa cài đặt, chuỗi PATH sẽ được ghi đè bổ sung thêm đường dẫn vào thư mục chứa các file thực thi của Ruby. Từ đây, mỗi khi bạn gõ bất cứ một câu lệnh nào liên quan đến Ruby, terminal sẽ theo chuỗi PATH vào từng thư mục để tìm kiếm và thực thi câu lệnh đó.</p>\n<p>Suy ra, có một lỗi rất hay xảy ra cho những người mới sử dụng Ruby, đó là họ thêm và xoá Ruby khá thường xuyên dẫn đến đường dẫn bị sai và terminal không thể tìm được thư mục có thể thực thi câu lệnh một cách chính xác.</p>\n<p>Trong terminal, bạn có thể nối thêm một thư mục vào chuỗi PATH bằng câu lệnh sau:</p>\n<p><code>export PATH=&quot;$PATH:new_path&quot;</code></p>\n<h1 id=\"3-Mot-so-file-quan-trong-tren-Macos\"><a href=\"#3-Mot-so-file-quan-trong-tren-Macos\" class=\"headerlink\" title=\"3.Một số file quan trọng trên Macos.\"></a>3.Một số file quan trọng trên Macos.</h1><p>Khi quá trình làm việc với terminal nhiều hơn và chúng ta cần cài đặt một số thứ cần thiết trong quá trình làm việc, chúng ta sử dụng các <code>dot file</code>. Nội dung của các <code>dot file</code> này là các câu lệnh shell script (chức năng của câu lệnh này có thể chúng ta sẽ tìm hiểu sau).</p>\n<p>Khi bạn mở một terminal mà nó đòi hỏi bạn phải login (ví dụ như khi bạn remote access vào một máy tính khác thông qua SSH, bạn cần nhập tên đăng nhập và mật khẩu) thì đó là một <code>Login Shell</code>.<br>Với trường hợp Login Shell thì <code>dot file</code> được load lên là file <code>.bash_profile</code>.<br>Trong một trường hợp khác, bạn mở một terminal mà không cần đăng nhập thì <code>dot file</code> được load là  <code>bashrc</code>.</p>\n<p>Note: Khác với những người anh em khác, terminal trên Macos sẽ chạy <code>dot file</code> <code>.bash_profile</code> khi bạn mở một cửa sổ mới nên tôi thường đặt những cấu hình cần thiết vào một file duy nhất đó là <code>.bash_profile</code>. Tất nhiên, từ <code>.bash_profile</code> ta có thể load các <code>dot file</code> khác nếu cần thiết (chúng ta sẽ bàn về nó trong tương lai).</p>\n<p>Thứ tự các <code>dot file</code> được khởi chạy trên macOS:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#=&gt; etc/profile</span></span><br><span class=\"line\"><span class=\"comment\">#=&gt; etc/bashrc</span></span><br><span class=\"line\"><span class=\"comment\">#=&gt; ~/.bash_profile</span></span><br><span class=\"line\"><span class=\"comment\">#=&gt; ~/.bash_login (nếu ~/.bash_profile không tồn tại).</span></span><br><span class=\"line\"><span class=\"comment\">#=&gt; ~/.profile (nếu ~/.bash_profile và ~/.bash_login đều không tồn tại).</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-Cac-file-quan-trong-tren-Linux\"><a href=\"#4-Cac-file-quan-trong-tren-Linux\" class=\"headerlink\" title=\"4.Các file quan trọng trên Linux\"></a>4.Các file quan trọng trên Linux</h1><p>Như đã trình bày ở trên, có một sự giống nhau đáng kể giữa <code>macOS</code> và <code>Linux</code>. Vì vậy, tôi chỉ có một số điều bổ sung như sau: Trên Linux, thông thường chúng ta sẽ có các <code>dot file</code> sau đây:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#=&gt; ~/.bash_login (chạy khi login shell)</span></span><br><span class=\"line\"><span class=\"comment\">#=&gt; ~/.bashrc (chạy khi không login)</span></span><br><span class=\"line\"><span class=\"comment\">#=&gt; ~/.bash_logout (chạy khi logout shell)</span></span><br><span class=\"line\"><span class=\"comment\">#=&gt; ~/bash_history (lịch sử trên shell)</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Còn rất nhiều điều cần nói và bàn luận thêm trong các bài viết tiếp theo.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Đây lại là một bài viết tiếp theo về chủ đề liên quan đến các hệ điều hành và dòng lệnh. Khi mới tiếp xúc với máy tính, OS mà tôi sử dụng là windows, đến khi lên đại học, phần lớn thời gian học tập vẫn gắn liền với windows, còn phần nhỏ thời gian còn lại là làm quen với một hệ điều hành lạ lẫm mang tên Linux.</p>\n<p>Việc cài đặt phần mềm trên Linux có khó khăn hơn windows một chút, đó là thay vì click chuột rồi next next next next… thì phần nhiều các phần mềm phục vụ công việc lập trình đều phải cài đặt qua dòng lệnh. Mọi thứ không có vấn đề gì cho đến khi việc copy những dòng lệnh đó rồi enter, bạn sẽ không còn nhận được một kết quả thành công mỹ mãn nữa mà thay vào đó là một đống lỗi được trả về.</p>\n<p>Khi làm việc với Ruby, tôi đã từng gặp những lỗi liên quan đến Rbenv và RVM. Điều đó thực sự là một cơn ác mộng khi liên tục phải google tìm kiếm câu trả lời cho vấn đề gặp phải, copy những dòng lệnh trên stackoverflow paste vào terminal và chờ đợi rằng vấn đề sẽ được giải quyết dù chẳng hiểu dòng lệnh này có nghĩa là gì. Lâu dần tôi đã tích luỹ thêm được một số hiểu biết muốn chia sẻ mà bắt đầu là các File hệt thống.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><p>Để bắt đầu chia sẻ về những file kể trên, có lẽ chúng ta sẽ phải điểm qua một số khái niệm cơ bản.</p>\n<h1 id=\"1-Mot-so-khai-niem-co-ban\"><a href=\"#1-Mot-so-khai-niem-co-ban\" class=\"headerlink\" title=\"1.Một số khái niệm cơ bản.\"></a>1.Một số khái niệm cơ bản.</h1><p><code>Unix</code> là một hệ điều hành ra đời đã rất lâu, nó là tiền thân của hai nhánh hệ điều hành rất nổi tiếng khác, bản thương mại chính là <code>macOS</code> và bản mã nguồn mở chính là <code>GNU</code>. Cho đến những năm 90, có một sự kết hợp giữa các phần mềm của <code>GNU</code> và phần core của một dự án mã nguồn mở khác tên là <code>Linux</code> đã tạo thành một hệ điều hành hoàn chỉnh mang tên là <code>GNU/Linux</code>, ngày nay đa số chúng ta chỉ thường gọi tắt là <code>Linux</code></p>\n<p>Qua đó chúng ta có thể thấy, <code>Linux</code> và các hệ điều hành con cháu của <code>Unix</code> có rất nhiều điểm chung.</p>\n<p><code>Shell</code>: Đây cũng là một khái niệm quan trọng cần tìm hiểu. Trước khi đi vào chủ đề chính của bài viết, để tìm hiểu một cách sâu sắc về Shell, có lẽ sẽ cần đến một bài viết khác, nên ở đây tôi chỉ mô tả một cách bao quát về nó. <code>Shell</code> là phần nằm giữa ứng dụng và phần core của hệ điều hành.</p>\n<p>Hãy tưởng tượng chúng ta có một chồng sách gồm ba quyển với quyển trên cùng là những ứng dụng đang chạy trên máy tính của bạn vì dụ như word, excel, cuốn ở dưới cùng chính là phần nhân của hệ điều hành. Để các ứng dụng của bạn có thể sử dụng các tài nguyên của máy tính như bộ nhớ, ram, IO… điều tất yếu phải xảy ra đó là ứng dụng của bạn phải giao tiếp được với hệ điều hành.</p>\n<p>Tuy nhiên, vấn đề gặp phải đó là hệ điều hành chỉ hiểu mã máy, một thứ quá phức tạp để người dùng khi sử dụng ứng dụng có thể thao tác được. Đó là lý do ra đời của “quyển sách” ở giữa mà chúng ta gọi là <code>Shell</code>. Nhiệm vụ của nó là gì? Đó là chuyển đổi các lệnh từ “quyển sách” đầu tiên thành các lệnh mà “quyển sách” thứ ba có thể hiểu và thực hiện được (Thông dịch).</p>\n<p>Ví dụ terminal được xem là một <code>Shell CLI</code>, mỗi khi bạn gõ một lệnh bất kỳ trên terminal, nó sẽ chuyển đổi câu lệnh bạn viết thành một câu lệnh khác mà phần nhân hệ điều hành có thể hiểu và thực hiện được.</p>\n<h1 id=\"2-Dieu-gi-xay-ra-khi-ban-go-mot-lenh-tren-terminal\"><a href=\"#2-Dieu-gi-xay-ra-khi-ban-go-mot-lenh-tren-terminal\" class=\"headerlink\" title=\"2.Điều gì xảy ra khi bạn gõ một lệnh trên terminal?\"></a>2.Điều gì xảy ra khi bạn gõ một lệnh trên terminal?</h1><p>Đã bao giờ bạn tự hỏi chuyện gì sẽ xảy ra tiếp theo khi ta gõ một lệnh trong terminal? Ví dụ:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -a</span><br><span class=\"line\"><span class=\"comment\">#=&gt; Hiển thị tất cả file và folder nằm trong current folder.</span></span><br></pre></td></tr></table></figure>\n\n<p>Chúng ta sẽ thường tự an ủi bản thân rằng những câu lệnh đó đã được hệ điều hành lưu lại như một cuốn từ điển để đến khi được gọi chúng sẽ biết tìm câu trả lời ở đâu. Thực tế suy nghĩ trên không hẳn đã sai, mọi thứ trong Unix đều là file, nếu bạn gõ dòng lệnh:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $PATH</span><br></pre></td></tr></table></figure>\n\n<p>Kết quả bạn nhận được chính là một danh sách các thư mục mà terminal sẽ tìm kiếm câu lệnh bạn gõ theo thứ tự từ trái qua phải. Với một hệ điều hành thuần khiết chưa cài đặt thêm các phần mềm bên ngoài thì PATH sẽ có giá trị mặc định như sau:</p>\n<p><code>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin</code></p>\n<p>Còn trên máy tính của tôi thì PATH lại có giá trị là:</p>\n<p><code>/Users/admin/.rbenv/shims:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin</code></p>\n<p>Có một sự khác biệt nhỏ, ta có thể thấy chuỗi PATH trên máy tính của tôi có phần đầu chuỗi được thêm bởi một thư mục .rbenv nào đó. Đây chính là mấu chốt của vấn đề, lý do xuất hiện của phần mở rộng nêu trên đó là tôi đã cài đặt thêm Ruby vào máy tính của mình bằng công cụ rbenv.</p>\n<p>Hiển nhiên, khi hệ điều hành còn thuần khiết, nó không thể hiểu được câu lệnh <code>ruby – v</code>. Việc cài đặt Ruby vào máy tính đồng nghĩa với việc tôi đã tải các file liên quan vào một thư mục nào đó, và để chỉ cho terminal biết phải vào đâu để tìm kiếm các lệnh liên quan đến Ruby vừa cài đặt, chuỗi PATH sẽ được ghi đè bổ sung thêm đường dẫn vào thư mục chứa các file thực thi của Ruby. Từ đây, mỗi khi bạn gõ bất cứ một câu lệnh nào liên quan đến Ruby, terminal sẽ theo chuỗi PATH vào từng thư mục để tìm kiếm và thực thi câu lệnh đó.</p>\n<p>Suy ra, có một lỗi rất hay xảy ra cho những người mới sử dụng Ruby, đó là họ thêm và xoá Ruby khá thường xuyên dẫn đến đường dẫn bị sai và terminal không thể tìm được thư mục có thể thực thi câu lệnh một cách chính xác.</p>\n<p>Trong terminal, bạn có thể nối thêm một thư mục vào chuỗi PATH bằng câu lệnh sau:</p>\n<p><code>export PATH=&quot;$PATH:new_path&quot;</code></p>\n<h1 id=\"3-Mot-so-file-quan-trong-tren-Macos\"><a href=\"#3-Mot-so-file-quan-trong-tren-Macos\" class=\"headerlink\" title=\"3.Một số file quan trọng trên Macos.\"></a>3.Một số file quan trọng trên Macos.</h1><p>Khi quá trình làm việc với terminal nhiều hơn và chúng ta cần cài đặt một số thứ cần thiết trong quá trình làm việc, chúng ta sử dụng các <code>dot file</code>. Nội dung của các <code>dot file</code> này là các câu lệnh shell script (chức năng của câu lệnh này có thể chúng ta sẽ tìm hiểu sau).</p>\n<p>Khi bạn mở một terminal mà nó đòi hỏi bạn phải login (ví dụ như khi bạn remote access vào một máy tính khác thông qua SSH, bạn cần nhập tên đăng nhập và mật khẩu) thì đó là một <code>Login Shell</code>.<br>Với trường hợp Login Shell thì <code>dot file</code> được load lên là file <code>.bash_profile</code>.<br>Trong một trường hợp khác, bạn mở một terminal mà không cần đăng nhập thì <code>dot file</code> được load là  <code>bashrc</code>.</p>\n<p>Note: Khác với những người anh em khác, terminal trên Macos sẽ chạy <code>dot file</code> <code>.bash_profile</code> khi bạn mở một cửa sổ mới nên tôi thường đặt những cấu hình cần thiết vào một file duy nhất đó là <code>.bash_profile</code>. Tất nhiên, từ <code>.bash_profile</code> ta có thể load các <code>dot file</code> khác nếu cần thiết (chúng ta sẽ bàn về nó trong tương lai).</p>\n<p>Thứ tự các <code>dot file</code> được khởi chạy trên macOS:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#=&gt; etc/profile</span></span><br><span class=\"line\"><span class=\"comment\">#=&gt; etc/bashrc</span></span><br><span class=\"line\"><span class=\"comment\">#=&gt; ~/.bash_profile</span></span><br><span class=\"line\"><span class=\"comment\">#=&gt; ~/.bash_login (nếu ~/.bash_profile không tồn tại).</span></span><br><span class=\"line\"><span class=\"comment\">#=&gt; ~/.profile (nếu ~/.bash_profile và ~/.bash_login đều không tồn tại).</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-Cac-file-quan-trong-tren-Linux\"><a href=\"#4-Cac-file-quan-trong-tren-Linux\" class=\"headerlink\" title=\"4.Các file quan trọng trên Linux\"></a>4.Các file quan trọng trên Linux</h1><p>Như đã trình bày ở trên, có một sự giống nhau đáng kể giữa <code>macOS</code> và <code>Linux</code>. Vì vậy, tôi chỉ có một số điều bổ sung như sau: Trên Linux, thông thường chúng ta sẽ có các <code>dot file</code> sau đây:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#=&gt; ~/.bash_login (chạy khi login shell)</span></span><br><span class=\"line\"><span class=\"comment\">#=&gt; ~/.bashrc (chạy khi không login)</span></span><br><span class=\"line\"><span class=\"comment\">#=&gt; ~/.bash_logout (chạy khi logout shell)</span></span><br><span class=\"line\"><span class=\"comment\">#=&gt; ~/bash_history (lịch sử trên shell)</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Còn rất nhiều điều cần nói và bàn luận thêm trong các bài viết tiếp theo.</p>\n"},{"title":"Root, Sudo Và Package Management","date":"2019-02-04T17:00:00.000Z","draft":false,"mytag":"OS","mytrend":"COOL","_content":"\n# Đặt vấn đề\n\nTrong một bài viết gần đây về chủ đề file permission trên Unix/Linux, tôi có đề cập đến một người dùng quyền lực trên các hệ thống kể trên có tên gọi là `root`. Bài viết này sẽ khái quát về người dùng này kèm theo hai khái niệm có liên quan là `sudo` và `Package Management System`.\n\n# Luận bàn\n\n# 1.Root\n\nXin được nhắc lại một câu chuyện cũ tôi đã kể trong bài viết trước với ví dụ về mảnh đất nhà bạn, bạn sở hữu mảnh đất đó, vợ bạn sở hữu mảnh đất đó chung với bạn. Nhưng vợ chồng bạn không phải là những người sở hữu tối thượng của mảnh đất kể trên, mà quyền lực to lớn này thuộc về nhà nước, “người” thực ra là đang cho bạn thuê đất có thời hạn. Tương tự trọng Unix/Linux, sẽ có những user (như tài khoản bạn sử dụng để đăng nhập, hoặc tài khoản khách…).\n\nViệc những tài khoản này có thể đăng nhập vào hệ thống nhưng đặc quyền của chúng bị giới hạn. Khi login vào hệ thống, bạn có thể làm một số tác vụ nhất định chứ không thể thích làm gì thì làm, trong hệ thống của bạn chỉ có một user duy nhất được quyền làm bất cứ điều gì, đó là một super user.\n\nTrên windows, ta gọi đó là `administrator` (có lẽ quá quen thuộc, bạn còn nhớ những lúc cài phần mềm, bạn click vào file exe nhưng chương trình không chịu cài đặt, google một lát, bạn nhận được một hướng dẫn hãy click phải vào file exe đó và chọn `run as administrator`, đó chính là sức mạnh của super user trên windows), còn trên macOS hay Ubuntu(1 đại diện của Linux), nó được gọi là `root` (cuối cùng cũng chỉ là một cái tên gọi, nó có thể được đặt tên là mèo, là chó, nó có thể được đặt tên là bất cứ thứ gì, chúng ta không cần quan tâm, điều duy nhất chúng ta cần biết đó là trên các hệ điều hành con cháu của Unix sẽ luôn có một super user quyền lực như vậy).\n\nĐến lúc này, bạn sẽ tự hỏi tại sao phải thiết kế hệ thống phức tạp như vậy? Tại sao không chỉ dung duy nhất một loại user?\nCâu trả lời rất đơn giản, không phải ai sử dụng máy tính cũng là những người dung có hiểu biết sâu sắc về hệ điều hành. Vì vậy, nếu trao cho họ những quyền lực quá lớn, họ có thể vô tình gây ra những huỷ hoại nghiêm trọng cho hệ thống (quyền lực càng lớn thì trách nhiệm càng lớn).\n\nMột vấn đề phát sinh nếu việc sử dụng Root mang tính rủi ro quá cao nhưng những user bình thường lại không có các quyền để cài đặt một số phần mềm nâng cao thì phải làm sao? Vấn đề này sẽ được giải thích ở mục số 2.\n\nNote: Trên macOS và Ubuntu, `root` mặc định sẽ được disable, chúng có thể sẽ được enable trở lại và re-disable. Cách thực hiện thì có lẽ bạn nên tìm kiếm hướng dẫn từ trang chủ của những hệ điều hành này để câu lệnh của bạn đảm bảo chính xác và không bị lỗi thời.\n\n# 2.Sudo\n\nNhư vấn đề tôi đã nêu ở cuối mục 1, bây giờ tôi muốn cài đặt một số phần mềm đòi hỏi quyền của super user, về lý thuyết tôi đứng giữa hai lựa chọn hoặc chuyển sang `root` và cài đặt phần mềm bình thường (rất rủi ro), phương án 2 là tôi vẫn sử dụng user thường và nói lời tạm biệt với những phần mềm kể trên.\n\nQuá tệ, cả hai giải pháp trên đều không ổn, thật may, các nhà phát triển hệ thống đã cung cấp cho chúng ta một lựa chọn số 3, đó là bạn vẫn sử dụng user thường nhưng có thể triệu hồi quyền lực của super user để thực hiện những lệnh nào đó.\n\nCách sử dụng đó là bạn thêm câu lệnh `sudo` vào phía trước câu lệnh cần sử dụng quyền của super user. Ví dụ:\n\n`sudo apt-get update`\n\nMột nhầm lẫn thường xuyên với cả với tôi ngày mới tìm hiểu, đó là sau khi gõ những câu lệnh có `sudo`, hệ thống yêu cầu tôi nhập mật khẩu và tôi đã từng nghĩ đó là mật khẩu của `root` (nghe cũng hợp lý đấy chứ, ta mượn quyền của `root` thì phải sử dụng mật khẩu của `root` chứ nhỉ? Giống như khi tôi mượn nhà của bạn thì tôi phải có chìa khoá của bạn). Nhưng không phải như vậy, mật khẩu bạn nhập vào đơn thuần là chính mật khẩu của user thường bạn đang login trên máy.\n\nPhần đa các trường hợp khi bạn thêm `sudo`, các câu lệnh sẽ chạy một cách hoàn hảo. Tuy nhiên, cũng có những khi bạn không nhận được kết quả như mong đợi và lý do chính là không phải user nào cũng có thể triệu hồi quyền lực của super user. Điều bạn cần làm khi đó là \"nói\" với hệ điều hành rằng hãy cho user của tôi đang sử dụng được quyền triệu hồi sức mạnh của super user. Hãy xem ví dụ dưới đây:\n\n```ruby\n#=> /etc/sudoers (lưu trữ các user được quyền thực hiện đặc quyền của super user)\n#=> Ví dụ\nroot ALL=(ALL:ALL) ALL\n#=> user đang xét quyền tên là root\n#=> Chữ all đầu tiên chỉ ra rằng rule này được áp dụng cho tất cả các host\n#=> Chữ all thứ hai chỉ ra, account root có thể chạy lệnh với quyền của bất kỳ user nào.\n#=> Chữ all thứ ba chỉ ra, account root có thể chạy lệnh với quyền của bất kỳ group nào.\n#=> Chữ all cuối cùng chỉ ra, account root có thể chạy bất kỳ command nào.\n```\n\nNote: Kể từ khi bạn nhập mật khẩu sau khi gõ lệnh `sudo` lần đầu, thời gian có hiệu lực của mật khẩu này sẽ là 15 phút. Trong khoảng thời gian đó bạn có thể chạy các lệnh `sudo` khác mà hệ điều hành không yêu cầu bạn nhập lại mật khẩu.\n\n\n# 3.Package management system\n\nKhi sử dụng macOS, để cài đặt thêm các phần mềm phục vụ công việc (mà chúng không được support trên appstore), tôi sử dụng `homebrew`, một phần mềm giúp quản lý các phần mềm khác rất hiệu quả.\n\nVậy còn trên Linux chúng ta có gì?\n\nTrước hết cần phải làm rõ: Package management system là một công cụ hoặc một hệ thống các công cụ được sử dụng để handle các package.\n1.\tHandle là quản lý với đầy đủ các chức năng như thêm mới, gỡ bỏ, nâng cấp, tìm kiếm..v..v…\n2.\tPackage là một tiện ích hoặc những phần bổ trợ cho một tiện ích nào đó (thực sự cuối cùng nó cũng chỉ là tập hợp của các file).\n\nMột `Package Management System` nổi tiếng trên Linux đó là `DPKG`, nó là một công cụ để cài đặt các package có đuôi .deb (các package dành cho các hệ điều hành thuộc dòng debian).\nNhiệm vụ của `DPKG` là install hoặc remove một package (với điều kiện các file cần thiết đã có trên local).\n\nĐến đây nhiều bạn có thể thắc mắc rằng từ trước đến giờ bạn chưa hề sử dụng các dòng lệnh liên quan đến `DPKG`, vậy tại sao tôi lại bảo là nó rất phổ biến? Câu trả lời đó là bạn đang sử dụng các phần mềm package management system khác được xây dựng dựa trên phần core là `DPKG`, một trong số đó là `APT–GET/APT`.\n\nƯu điểm lớn nhất của `APT` so với `DPKG` đó là `DPKG` chỉ có thể cài đặt file khi mà file đó đã có trên local (tức là bằng cách nào đó bạn phải download hoặc copy file đó về máy của bạn). Còn với `APT`, nó sẽ tìm kiếm các package đó từ `remote repositories`, sau đó download chúng về máy.\n\nĐiểm mạnh thứ hai của `APT` so với `DPKG` đó là nó giải quyết được bài toán dependencies. Nếu package bạn cần cài đặt phụ thuộc vào một vài package khác, nếu sử dụng `DPKG` thì bạn sẽ phải cài đặt tất cả các package kể trên một cách thủ công.\nCòn với `APT`, nó sẽ tự hiểu được package đó cần thêm những phụ trợ nào và tự động cài đặt phần phụ trợ.\n\nĐiều thật sự diễn ra đó là trong `APT`, `DPKG` vẫn tồn tại. Nó tồn tại ở một cấp thấp hơn và thực hiện các chỉ thị của `APT`.\n\nNote: Các `remote repositories` để phần mềm package management của bạn tìm kiếm sẽ được lưu trữ trong file `/etc/apt/sources.list` (đa số là như vậy).\n\n# Kết luận\n\nCòn rất nhiều điều cần nói và bàn luận thêm trong các bài viết tiếp theo.\n","source":"_posts/2019-02-05-root-sudo-and-package-management-system.md","raw":"---\ntitle: \"Root, Sudo Và Package Management\"\ndate: 2019-02-05\ndraft: false\ntags: [\"unix\"]\ncategories: [\"hệ điều hành\"]\nmytag: \"OS\"\nmytrend: \"COOL\"\n---\n\n# Đặt vấn đề\n\nTrong một bài viết gần đây về chủ đề file permission trên Unix/Linux, tôi có đề cập đến một người dùng quyền lực trên các hệ thống kể trên có tên gọi là `root`. Bài viết này sẽ khái quát về người dùng này kèm theo hai khái niệm có liên quan là `sudo` và `Package Management System`.\n\n# Luận bàn\n\n# 1.Root\n\nXin được nhắc lại một câu chuyện cũ tôi đã kể trong bài viết trước với ví dụ về mảnh đất nhà bạn, bạn sở hữu mảnh đất đó, vợ bạn sở hữu mảnh đất đó chung với bạn. Nhưng vợ chồng bạn không phải là những người sở hữu tối thượng của mảnh đất kể trên, mà quyền lực to lớn này thuộc về nhà nước, “người” thực ra là đang cho bạn thuê đất có thời hạn. Tương tự trọng Unix/Linux, sẽ có những user (như tài khoản bạn sử dụng để đăng nhập, hoặc tài khoản khách…).\n\nViệc những tài khoản này có thể đăng nhập vào hệ thống nhưng đặc quyền của chúng bị giới hạn. Khi login vào hệ thống, bạn có thể làm một số tác vụ nhất định chứ không thể thích làm gì thì làm, trong hệ thống của bạn chỉ có một user duy nhất được quyền làm bất cứ điều gì, đó là một super user.\n\nTrên windows, ta gọi đó là `administrator` (có lẽ quá quen thuộc, bạn còn nhớ những lúc cài phần mềm, bạn click vào file exe nhưng chương trình không chịu cài đặt, google một lát, bạn nhận được một hướng dẫn hãy click phải vào file exe đó và chọn `run as administrator`, đó chính là sức mạnh của super user trên windows), còn trên macOS hay Ubuntu(1 đại diện của Linux), nó được gọi là `root` (cuối cùng cũng chỉ là một cái tên gọi, nó có thể được đặt tên là mèo, là chó, nó có thể được đặt tên là bất cứ thứ gì, chúng ta không cần quan tâm, điều duy nhất chúng ta cần biết đó là trên các hệ điều hành con cháu của Unix sẽ luôn có một super user quyền lực như vậy).\n\nĐến lúc này, bạn sẽ tự hỏi tại sao phải thiết kế hệ thống phức tạp như vậy? Tại sao không chỉ dung duy nhất một loại user?\nCâu trả lời rất đơn giản, không phải ai sử dụng máy tính cũng là những người dung có hiểu biết sâu sắc về hệ điều hành. Vì vậy, nếu trao cho họ những quyền lực quá lớn, họ có thể vô tình gây ra những huỷ hoại nghiêm trọng cho hệ thống (quyền lực càng lớn thì trách nhiệm càng lớn).\n\nMột vấn đề phát sinh nếu việc sử dụng Root mang tính rủi ro quá cao nhưng những user bình thường lại không có các quyền để cài đặt một số phần mềm nâng cao thì phải làm sao? Vấn đề này sẽ được giải thích ở mục số 2.\n\nNote: Trên macOS và Ubuntu, `root` mặc định sẽ được disable, chúng có thể sẽ được enable trở lại và re-disable. Cách thực hiện thì có lẽ bạn nên tìm kiếm hướng dẫn từ trang chủ của những hệ điều hành này để câu lệnh của bạn đảm bảo chính xác và không bị lỗi thời.\n\n# 2.Sudo\n\nNhư vấn đề tôi đã nêu ở cuối mục 1, bây giờ tôi muốn cài đặt một số phần mềm đòi hỏi quyền của super user, về lý thuyết tôi đứng giữa hai lựa chọn hoặc chuyển sang `root` và cài đặt phần mềm bình thường (rất rủi ro), phương án 2 là tôi vẫn sử dụng user thường và nói lời tạm biệt với những phần mềm kể trên.\n\nQuá tệ, cả hai giải pháp trên đều không ổn, thật may, các nhà phát triển hệ thống đã cung cấp cho chúng ta một lựa chọn số 3, đó là bạn vẫn sử dụng user thường nhưng có thể triệu hồi quyền lực của super user để thực hiện những lệnh nào đó.\n\nCách sử dụng đó là bạn thêm câu lệnh `sudo` vào phía trước câu lệnh cần sử dụng quyền của super user. Ví dụ:\n\n`sudo apt-get update`\n\nMột nhầm lẫn thường xuyên với cả với tôi ngày mới tìm hiểu, đó là sau khi gõ những câu lệnh có `sudo`, hệ thống yêu cầu tôi nhập mật khẩu và tôi đã từng nghĩ đó là mật khẩu của `root` (nghe cũng hợp lý đấy chứ, ta mượn quyền của `root` thì phải sử dụng mật khẩu của `root` chứ nhỉ? Giống như khi tôi mượn nhà của bạn thì tôi phải có chìa khoá của bạn). Nhưng không phải như vậy, mật khẩu bạn nhập vào đơn thuần là chính mật khẩu của user thường bạn đang login trên máy.\n\nPhần đa các trường hợp khi bạn thêm `sudo`, các câu lệnh sẽ chạy một cách hoàn hảo. Tuy nhiên, cũng có những khi bạn không nhận được kết quả như mong đợi và lý do chính là không phải user nào cũng có thể triệu hồi quyền lực của super user. Điều bạn cần làm khi đó là \"nói\" với hệ điều hành rằng hãy cho user của tôi đang sử dụng được quyền triệu hồi sức mạnh của super user. Hãy xem ví dụ dưới đây:\n\n```ruby\n#=> /etc/sudoers (lưu trữ các user được quyền thực hiện đặc quyền của super user)\n#=> Ví dụ\nroot ALL=(ALL:ALL) ALL\n#=> user đang xét quyền tên là root\n#=> Chữ all đầu tiên chỉ ra rằng rule này được áp dụng cho tất cả các host\n#=> Chữ all thứ hai chỉ ra, account root có thể chạy lệnh với quyền của bất kỳ user nào.\n#=> Chữ all thứ ba chỉ ra, account root có thể chạy lệnh với quyền của bất kỳ group nào.\n#=> Chữ all cuối cùng chỉ ra, account root có thể chạy bất kỳ command nào.\n```\n\nNote: Kể từ khi bạn nhập mật khẩu sau khi gõ lệnh `sudo` lần đầu, thời gian có hiệu lực của mật khẩu này sẽ là 15 phút. Trong khoảng thời gian đó bạn có thể chạy các lệnh `sudo` khác mà hệ điều hành không yêu cầu bạn nhập lại mật khẩu.\n\n\n# 3.Package management system\n\nKhi sử dụng macOS, để cài đặt thêm các phần mềm phục vụ công việc (mà chúng không được support trên appstore), tôi sử dụng `homebrew`, một phần mềm giúp quản lý các phần mềm khác rất hiệu quả.\n\nVậy còn trên Linux chúng ta có gì?\n\nTrước hết cần phải làm rõ: Package management system là một công cụ hoặc một hệ thống các công cụ được sử dụng để handle các package.\n1.\tHandle là quản lý với đầy đủ các chức năng như thêm mới, gỡ bỏ, nâng cấp, tìm kiếm..v..v…\n2.\tPackage là một tiện ích hoặc những phần bổ trợ cho một tiện ích nào đó (thực sự cuối cùng nó cũng chỉ là tập hợp của các file).\n\nMột `Package Management System` nổi tiếng trên Linux đó là `DPKG`, nó là một công cụ để cài đặt các package có đuôi .deb (các package dành cho các hệ điều hành thuộc dòng debian).\nNhiệm vụ của `DPKG` là install hoặc remove một package (với điều kiện các file cần thiết đã có trên local).\n\nĐến đây nhiều bạn có thể thắc mắc rằng từ trước đến giờ bạn chưa hề sử dụng các dòng lệnh liên quan đến `DPKG`, vậy tại sao tôi lại bảo là nó rất phổ biến? Câu trả lời đó là bạn đang sử dụng các phần mềm package management system khác được xây dựng dựa trên phần core là `DPKG`, một trong số đó là `APT–GET/APT`.\n\nƯu điểm lớn nhất của `APT` so với `DPKG` đó là `DPKG` chỉ có thể cài đặt file khi mà file đó đã có trên local (tức là bằng cách nào đó bạn phải download hoặc copy file đó về máy của bạn). Còn với `APT`, nó sẽ tìm kiếm các package đó từ `remote repositories`, sau đó download chúng về máy.\n\nĐiểm mạnh thứ hai của `APT` so với `DPKG` đó là nó giải quyết được bài toán dependencies. Nếu package bạn cần cài đặt phụ thuộc vào một vài package khác, nếu sử dụng `DPKG` thì bạn sẽ phải cài đặt tất cả các package kể trên một cách thủ công.\nCòn với `APT`, nó sẽ tự hiểu được package đó cần thêm những phụ trợ nào và tự động cài đặt phần phụ trợ.\n\nĐiều thật sự diễn ra đó là trong `APT`, `DPKG` vẫn tồn tại. Nó tồn tại ở một cấp thấp hơn và thực hiện các chỉ thị của `APT`.\n\nNote: Các `remote repositories` để phần mềm package management của bạn tìm kiếm sẽ được lưu trữ trong file `/etc/apt/sources.list` (đa số là như vậy).\n\n# Kết luận\n\nCòn rất nhiều điều cần nói và bàn luận thêm trong các bài viết tiếp theo.\n","slug":"2019-02-05-root-sudo-and-package-management-system","published":1,"updated":"2019-11-13T03:59:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7suf200085rrs6q9pgnr6","content":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Trong một bài viết gần đây về chủ đề file permission trên Unix/Linux, tôi có đề cập đến một người dùng quyền lực trên các hệ thống kể trên có tên gọi là <code>root</code>. Bài viết này sẽ khái quát về người dùng này kèm theo hai khái niệm có liên quan là <code>sudo</code> và <code>Package Management System</code>.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-Root\"><a href=\"#1-Root\" class=\"headerlink\" title=\"1.Root\"></a>1.Root</h1><p>Xin được nhắc lại một câu chuyện cũ tôi đã kể trong bài viết trước với ví dụ về mảnh đất nhà bạn, bạn sở hữu mảnh đất đó, vợ bạn sở hữu mảnh đất đó chung với bạn. Nhưng vợ chồng bạn không phải là những người sở hữu tối thượng của mảnh đất kể trên, mà quyền lực to lớn này thuộc về nhà nước, “người” thực ra là đang cho bạn thuê đất có thời hạn. Tương tự trọng Unix/Linux, sẽ có những user (như tài khoản bạn sử dụng để đăng nhập, hoặc tài khoản khách…).</p>\n<p>Việc những tài khoản này có thể đăng nhập vào hệ thống nhưng đặc quyền của chúng bị giới hạn. Khi login vào hệ thống, bạn có thể làm một số tác vụ nhất định chứ không thể thích làm gì thì làm, trong hệ thống của bạn chỉ có một user duy nhất được quyền làm bất cứ điều gì, đó là một super user.</p>\n<p>Trên windows, ta gọi đó là <code>administrator</code> (có lẽ quá quen thuộc, bạn còn nhớ những lúc cài phần mềm, bạn click vào file exe nhưng chương trình không chịu cài đặt, google một lát, bạn nhận được một hướng dẫn hãy click phải vào file exe đó và chọn <code>run as administrator</code>, đó chính là sức mạnh của super user trên windows), còn trên macOS hay Ubuntu(1 đại diện của Linux), nó được gọi là <code>root</code> (cuối cùng cũng chỉ là một cái tên gọi, nó có thể được đặt tên là mèo, là chó, nó có thể được đặt tên là bất cứ thứ gì, chúng ta không cần quan tâm, điều duy nhất chúng ta cần biết đó là trên các hệ điều hành con cháu của Unix sẽ luôn có một super user quyền lực như vậy).</p>\n<p>Đến lúc này, bạn sẽ tự hỏi tại sao phải thiết kế hệ thống phức tạp như vậy? Tại sao không chỉ dung duy nhất một loại user?<br>Câu trả lời rất đơn giản, không phải ai sử dụng máy tính cũng là những người dung có hiểu biết sâu sắc về hệ điều hành. Vì vậy, nếu trao cho họ những quyền lực quá lớn, họ có thể vô tình gây ra những huỷ hoại nghiêm trọng cho hệ thống (quyền lực càng lớn thì trách nhiệm càng lớn).</p>\n<p>Một vấn đề phát sinh nếu việc sử dụng Root mang tính rủi ro quá cao nhưng những user bình thường lại không có các quyền để cài đặt một số phần mềm nâng cao thì phải làm sao? Vấn đề này sẽ được giải thích ở mục số 2.</p>\n<p>Note: Trên macOS và Ubuntu, <code>root</code> mặc định sẽ được disable, chúng có thể sẽ được enable trở lại và re-disable. Cách thực hiện thì có lẽ bạn nên tìm kiếm hướng dẫn từ trang chủ của những hệ điều hành này để câu lệnh của bạn đảm bảo chính xác và không bị lỗi thời.</p>\n<h1 id=\"2-Sudo\"><a href=\"#2-Sudo\" class=\"headerlink\" title=\"2.Sudo\"></a>2.Sudo</h1><p>Như vấn đề tôi đã nêu ở cuối mục 1, bây giờ tôi muốn cài đặt một số phần mềm đòi hỏi quyền của super user, về lý thuyết tôi đứng giữa hai lựa chọn hoặc chuyển sang <code>root</code> và cài đặt phần mềm bình thường (rất rủi ro), phương án 2 là tôi vẫn sử dụng user thường và nói lời tạm biệt với những phần mềm kể trên.</p>\n<p>Quá tệ, cả hai giải pháp trên đều không ổn, thật may, các nhà phát triển hệ thống đã cung cấp cho chúng ta một lựa chọn số 3, đó là bạn vẫn sử dụng user thường nhưng có thể triệu hồi quyền lực của super user để thực hiện những lệnh nào đó.</p>\n<p>Cách sử dụng đó là bạn thêm câu lệnh <code>sudo</code> vào phía trước câu lệnh cần sử dụng quyền của super user. Ví dụ:</p>\n<p><code>sudo apt-get update</code></p>\n<p>Một nhầm lẫn thường xuyên với cả với tôi ngày mới tìm hiểu, đó là sau khi gõ những câu lệnh có <code>sudo</code>, hệ thống yêu cầu tôi nhập mật khẩu và tôi đã từng nghĩ đó là mật khẩu của <code>root</code> (nghe cũng hợp lý đấy chứ, ta mượn quyền của <code>root</code> thì phải sử dụng mật khẩu của <code>root</code> chứ nhỉ? Giống như khi tôi mượn nhà của bạn thì tôi phải có chìa khoá của bạn). Nhưng không phải như vậy, mật khẩu bạn nhập vào đơn thuần là chính mật khẩu của user thường bạn đang login trên máy.</p>\n<p>Phần đa các trường hợp khi bạn thêm <code>sudo</code>, các câu lệnh sẽ chạy một cách hoàn hảo. Tuy nhiên, cũng có những khi bạn không nhận được kết quả như mong đợi và lý do chính là không phải user nào cũng có thể triệu hồi quyền lực của super user. Điều bạn cần làm khi đó là “nói” với hệ điều hành rằng hãy cho user của tôi đang sử dụng được quyền triệu hồi sức mạnh của super user. Hãy xem ví dụ dưới đây:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#=&gt; /etc/sudoers (lưu trữ các user được quyền thực hiện đặc quyền của super user)</span></span><br><span class=\"line\"><span class=\"comment\">#=&gt; Ví dụ</span></span><br><span class=\"line\">root ALL=(<span class=\"symbol\">ALL:</span>ALL) ALL</span><br><span class=\"line\"><span class=\"comment\">#=&gt; user đang xét quyền tên là root</span></span><br><span class=\"line\"><span class=\"comment\">#=&gt; Chữ all đầu tiên chỉ ra rằng rule này được áp dụng cho tất cả các host</span></span><br><span class=\"line\"><span class=\"comment\">#=&gt; Chữ all thứ hai chỉ ra, account root có thể chạy lệnh với quyền của bất kỳ user nào.</span></span><br><span class=\"line\"><span class=\"comment\">#=&gt; Chữ all thứ ba chỉ ra, account root có thể chạy lệnh với quyền của bất kỳ group nào.</span></span><br><span class=\"line\"><span class=\"comment\">#=&gt; Chữ all cuối cùng chỉ ra, account root có thể chạy bất kỳ command nào.</span></span><br></pre></td></tr></table></figure>\n\n<p>Note: Kể từ khi bạn nhập mật khẩu sau khi gõ lệnh <code>sudo</code> lần đầu, thời gian có hiệu lực của mật khẩu này sẽ là 15 phút. Trong khoảng thời gian đó bạn có thể chạy các lệnh <code>sudo</code> khác mà hệ điều hành không yêu cầu bạn nhập lại mật khẩu.</p>\n<h1 id=\"3-Package-management-system\"><a href=\"#3-Package-management-system\" class=\"headerlink\" title=\"3.Package management system\"></a>3.Package management system</h1><p>Khi sử dụng macOS, để cài đặt thêm các phần mềm phục vụ công việc (mà chúng không được support trên appstore), tôi sử dụng <code>homebrew</code>, một phần mềm giúp quản lý các phần mềm khác rất hiệu quả.</p>\n<p>Vậy còn trên Linux chúng ta có gì?</p>\n<p>Trước hết cần phải làm rõ: Package management system là một công cụ hoặc một hệ thống các công cụ được sử dụng để handle các package.</p>\n<ol>\n<li>Handle là quản lý với đầy đủ các chức năng như thêm mới, gỡ bỏ, nâng cấp, tìm kiếm..v..v…</li>\n<li>Package là một tiện ích hoặc những phần bổ trợ cho một tiện ích nào đó (thực sự cuối cùng nó cũng chỉ là tập hợp của các file).</li>\n</ol>\n<p>Một <code>Package Management System</code> nổi tiếng trên Linux đó là <code>DPKG</code>, nó là một công cụ để cài đặt các package có đuôi .deb (các package dành cho các hệ điều hành thuộc dòng debian).<br>Nhiệm vụ của <code>DPKG</code> là install hoặc remove một package (với điều kiện các file cần thiết đã có trên local).</p>\n<p>Đến đây nhiều bạn có thể thắc mắc rằng từ trước đến giờ bạn chưa hề sử dụng các dòng lệnh liên quan đến <code>DPKG</code>, vậy tại sao tôi lại bảo là nó rất phổ biến? Câu trả lời đó là bạn đang sử dụng các phần mềm package management system khác được xây dựng dựa trên phần core là <code>DPKG</code>, một trong số đó là <code>APT–GET/APT</code>.</p>\n<p>Ưu điểm lớn nhất của <code>APT</code> so với <code>DPKG</code> đó là <code>DPKG</code> chỉ có thể cài đặt file khi mà file đó đã có trên local (tức là bằng cách nào đó bạn phải download hoặc copy file đó về máy của bạn). Còn với <code>APT</code>, nó sẽ tìm kiếm các package đó từ <code>remote repositories</code>, sau đó download chúng về máy.</p>\n<p>Điểm mạnh thứ hai của <code>APT</code> so với <code>DPKG</code> đó là nó giải quyết được bài toán dependencies. Nếu package bạn cần cài đặt phụ thuộc vào một vài package khác, nếu sử dụng <code>DPKG</code> thì bạn sẽ phải cài đặt tất cả các package kể trên một cách thủ công.<br>Còn với <code>APT</code>, nó sẽ tự hiểu được package đó cần thêm những phụ trợ nào và tự động cài đặt phần phụ trợ.</p>\n<p>Điều thật sự diễn ra đó là trong <code>APT</code>, <code>DPKG</code> vẫn tồn tại. Nó tồn tại ở một cấp thấp hơn và thực hiện các chỉ thị của <code>APT</code>.</p>\n<p>Note: Các <code>remote repositories</code> để phần mềm package management của bạn tìm kiếm sẽ được lưu trữ trong file <code>/etc/apt/sources.list</code> (đa số là như vậy).</p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Còn rất nhiều điều cần nói và bàn luận thêm trong các bài viết tiếp theo.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Trong một bài viết gần đây về chủ đề file permission trên Unix/Linux, tôi có đề cập đến một người dùng quyền lực trên các hệ thống kể trên có tên gọi là <code>root</code>. Bài viết này sẽ khái quát về người dùng này kèm theo hai khái niệm có liên quan là <code>sudo</code> và <code>Package Management System</code>.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-Root\"><a href=\"#1-Root\" class=\"headerlink\" title=\"1.Root\"></a>1.Root</h1><p>Xin được nhắc lại một câu chuyện cũ tôi đã kể trong bài viết trước với ví dụ về mảnh đất nhà bạn, bạn sở hữu mảnh đất đó, vợ bạn sở hữu mảnh đất đó chung với bạn. Nhưng vợ chồng bạn không phải là những người sở hữu tối thượng của mảnh đất kể trên, mà quyền lực to lớn này thuộc về nhà nước, “người” thực ra là đang cho bạn thuê đất có thời hạn. Tương tự trọng Unix/Linux, sẽ có những user (như tài khoản bạn sử dụng để đăng nhập, hoặc tài khoản khách…).</p>\n<p>Việc những tài khoản này có thể đăng nhập vào hệ thống nhưng đặc quyền của chúng bị giới hạn. Khi login vào hệ thống, bạn có thể làm một số tác vụ nhất định chứ không thể thích làm gì thì làm, trong hệ thống của bạn chỉ có một user duy nhất được quyền làm bất cứ điều gì, đó là một super user.</p>\n<p>Trên windows, ta gọi đó là <code>administrator</code> (có lẽ quá quen thuộc, bạn còn nhớ những lúc cài phần mềm, bạn click vào file exe nhưng chương trình không chịu cài đặt, google một lát, bạn nhận được một hướng dẫn hãy click phải vào file exe đó và chọn <code>run as administrator</code>, đó chính là sức mạnh của super user trên windows), còn trên macOS hay Ubuntu(1 đại diện của Linux), nó được gọi là <code>root</code> (cuối cùng cũng chỉ là một cái tên gọi, nó có thể được đặt tên là mèo, là chó, nó có thể được đặt tên là bất cứ thứ gì, chúng ta không cần quan tâm, điều duy nhất chúng ta cần biết đó là trên các hệ điều hành con cháu của Unix sẽ luôn có một super user quyền lực như vậy).</p>\n<p>Đến lúc này, bạn sẽ tự hỏi tại sao phải thiết kế hệ thống phức tạp như vậy? Tại sao không chỉ dung duy nhất một loại user?<br>Câu trả lời rất đơn giản, không phải ai sử dụng máy tính cũng là những người dung có hiểu biết sâu sắc về hệ điều hành. Vì vậy, nếu trao cho họ những quyền lực quá lớn, họ có thể vô tình gây ra những huỷ hoại nghiêm trọng cho hệ thống (quyền lực càng lớn thì trách nhiệm càng lớn).</p>\n<p>Một vấn đề phát sinh nếu việc sử dụng Root mang tính rủi ro quá cao nhưng những user bình thường lại không có các quyền để cài đặt một số phần mềm nâng cao thì phải làm sao? Vấn đề này sẽ được giải thích ở mục số 2.</p>\n<p>Note: Trên macOS và Ubuntu, <code>root</code> mặc định sẽ được disable, chúng có thể sẽ được enable trở lại và re-disable. Cách thực hiện thì có lẽ bạn nên tìm kiếm hướng dẫn từ trang chủ của những hệ điều hành này để câu lệnh của bạn đảm bảo chính xác và không bị lỗi thời.</p>\n<h1 id=\"2-Sudo\"><a href=\"#2-Sudo\" class=\"headerlink\" title=\"2.Sudo\"></a>2.Sudo</h1><p>Như vấn đề tôi đã nêu ở cuối mục 1, bây giờ tôi muốn cài đặt một số phần mềm đòi hỏi quyền của super user, về lý thuyết tôi đứng giữa hai lựa chọn hoặc chuyển sang <code>root</code> và cài đặt phần mềm bình thường (rất rủi ro), phương án 2 là tôi vẫn sử dụng user thường và nói lời tạm biệt với những phần mềm kể trên.</p>\n<p>Quá tệ, cả hai giải pháp trên đều không ổn, thật may, các nhà phát triển hệ thống đã cung cấp cho chúng ta một lựa chọn số 3, đó là bạn vẫn sử dụng user thường nhưng có thể triệu hồi quyền lực của super user để thực hiện những lệnh nào đó.</p>\n<p>Cách sử dụng đó là bạn thêm câu lệnh <code>sudo</code> vào phía trước câu lệnh cần sử dụng quyền của super user. Ví dụ:</p>\n<p><code>sudo apt-get update</code></p>\n<p>Một nhầm lẫn thường xuyên với cả với tôi ngày mới tìm hiểu, đó là sau khi gõ những câu lệnh có <code>sudo</code>, hệ thống yêu cầu tôi nhập mật khẩu và tôi đã từng nghĩ đó là mật khẩu của <code>root</code> (nghe cũng hợp lý đấy chứ, ta mượn quyền của <code>root</code> thì phải sử dụng mật khẩu của <code>root</code> chứ nhỉ? Giống như khi tôi mượn nhà của bạn thì tôi phải có chìa khoá của bạn). Nhưng không phải như vậy, mật khẩu bạn nhập vào đơn thuần là chính mật khẩu của user thường bạn đang login trên máy.</p>\n<p>Phần đa các trường hợp khi bạn thêm <code>sudo</code>, các câu lệnh sẽ chạy một cách hoàn hảo. Tuy nhiên, cũng có những khi bạn không nhận được kết quả như mong đợi và lý do chính là không phải user nào cũng có thể triệu hồi quyền lực của super user. Điều bạn cần làm khi đó là “nói” với hệ điều hành rằng hãy cho user của tôi đang sử dụng được quyền triệu hồi sức mạnh của super user. Hãy xem ví dụ dưới đây:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#=&gt; /etc/sudoers (lưu trữ các user được quyền thực hiện đặc quyền của super user)</span></span><br><span class=\"line\"><span class=\"comment\">#=&gt; Ví dụ</span></span><br><span class=\"line\">root ALL=(<span class=\"symbol\">ALL:</span>ALL) ALL</span><br><span class=\"line\"><span class=\"comment\">#=&gt; user đang xét quyền tên là root</span></span><br><span class=\"line\"><span class=\"comment\">#=&gt; Chữ all đầu tiên chỉ ra rằng rule này được áp dụng cho tất cả các host</span></span><br><span class=\"line\"><span class=\"comment\">#=&gt; Chữ all thứ hai chỉ ra, account root có thể chạy lệnh với quyền của bất kỳ user nào.</span></span><br><span class=\"line\"><span class=\"comment\">#=&gt; Chữ all thứ ba chỉ ra, account root có thể chạy lệnh với quyền của bất kỳ group nào.</span></span><br><span class=\"line\"><span class=\"comment\">#=&gt; Chữ all cuối cùng chỉ ra, account root có thể chạy bất kỳ command nào.</span></span><br></pre></td></tr></table></figure>\n\n<p>Note: Kể từ khi bạn nhập mật khẩu sau khi gõ lệnh <code>sudo</code> lần đầu, thời gian có hiệu lực của mật khẩu này sẽ là 15 phút. Trong khoảng thời gian đó bạn có thể chạy các lệnh <code>sudo</code> khác mà hệ điều hành không yêu cầu bạn nhập lại mật khẩu.</p>\n<h1 id=\"3-Package-management-system\"><a href=\"#3-Package-management-system\" class=\"headerlink\" title=\"3.Package management system\"></a>3.Package management system</h1><p>Khi sử dụng macOS, để cài đặt thêm các phần mềm phục vụ công việc (mà chúng không được support trên appstore), tôi sử dụng <code>homebrew</code>, một phần mềm giúp quản lý các phần mềm khác rất hiệu quả.</p>\n<p>Vậy còn trên Linux chúng ta có gì?</p>\n<p>Trước hết cần phải làm rõ: Package management system là một công cụ hoặc một hệ thống các công cụ được sử dụng để handle các package.</p>\n<ol>\n<li>Handle là quản lý với đầy đủ các chức năng như thêm mới, gỡ bỏ, nâng cấp, tìm kiếm..v..v…</li>\n<li>Package là một tiện ích hoặc những phần bổ trợ cho một tiện ích nào đó (thực sự cuối cùng nó cũng chỉ là tập hợp của các file).</li>\n</ol>\n<p>Một <code>Package Management System</code> nổi tiếng trên Linux đó là <code>DPKG</code>, nó là một công cụ để cài đặt các package có đuôi .deb (các package dành cho các hệ điều hành thuộc dòng debian).<br>Nhiệm vụ của <code>DPKG</code> là install hoặc remove một package (với điều kiện các file cần thiết đã có trên local).</p>\n<p>Đến đây nhiều bạn có thể thắc mắc rằng từ trước đến giờ bạn chưa hề sử dụng các dòng lệnh liên quan đến <code>DPKG</code>, vậy tại sao tôi lại bảo là nó rất phổ biến? Câu trả lời đó là bạn đang sử dụng các phần mềm package management system khác được xây dựng dựa trên phần core là <code>DPKG</code>, một trong số đó là <code>APT–GET/APT</code>.</p>\n<p>Ưu điểm lớn nhất của <code>APT</code> so với <code>DPKG</code> đó là <code>DPKG</code> chỉ có thể cài đặt file khi mà file đó đã có trên local (tức là bằng cách nào đó bạn phải download hoặc copy file đó về máy của bạn). Còn với <code>APT</code>, nó sẽ tìm kiếm các package đó từ <code>remote repositories</code>, sau đó download chúng về máy.</p>\n<p>Điểm mạnh thứ hai của <code>APT</code> so với <code>DPKG</code> đó là nó giải quyết được bài toán dependencies. Nếu package bạn cần cài đặt phụ thuộc vào một vài package khác, nếu sử dụng <code>DPKG</code> thì bạn sẽ phải cài đặt tất cả các package kể trên một cách thủ công.<br>Còn với <code>APT</code>, nó sẽ tự hiểu được package đó cần thêm những phụ trợ nào và tự động cài đặt phần phụ trợ.</p>\n<p>Điều thật sự diễn ra đó là trong <code>APT</code>, <code>DPKG</code> vẫn tồn tại. Nó tồn tại ở một cấp thấp hơn và thực hiện các chỉ thị của <code>APT</code>.</p>\n<p>Note: Các <code>remote repositories</code> để phần mềm package management của bạn tìm kiếm sẽ được lưu trữ trong file <code>/etc/apt/sources.list</code> (đa số là như vậy).</p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Còn rất nhiều điều cần nói và bàn luận thêm trong các bài viết tiếp theo.</p>\n"},{"title":"Pass Reference Vs Pass Value, Ruby!","date":"2019-02-18T17:00:00.000Z","draft":false,"mytag":"Ruby","mytrend":"COOL","_content":"\n# Đặt vấn đề\n\nChủ đề bài viết ngày hôm nay vốn đã được khơi gợi mơ hồ trong tôi từ rất lâu, nhớ không nhầm thì đó là từ ngày học môn nhập môn lập trình tại trường KHTN, giảng viên có nói lướt qua về khái niệm này, đơn thuần chỉ là lướt qua thôi,vì dù rằng có đi sâu vào hơn nữa thì sinh viên cũng chỉ tổ ngủ gục. Thoáng cái đã 5,6 năm trôi qua, giờ ngồi đây khi đang chuẩn bị thất nghiệp, tôi có hứng thú tìm lại cảm giác thanh xuân nơi giảng đường bằng cách mò mẫm lại cái chủ đề mà ngày xưa tôi từng học (mà hiểu chưa tinh tường), rồi cũng từng trả lời khi đi phỏng vấn (mà người phỏng vấn cũng chỉ hỏi qua). Ôi chao! sao đau đầu đến thế nhỉ? Định làm một bài viết đầy đủ, tường minh mà có quá nhiều thứ cần phải nghiềm ngẫm lại, đặt phím gõ rồi bỏ thì không nỡ, mà viết thì cũng chưa an tâm cái mình nói là đúng, vậy tôi lựa chọn cách đơn giản hơn, đó là viết một số hiểu biết ban đầu, nhẹ nhàng vào du dương, còn hardcore xin hẹn 1 ngày khác.\n\n# Luận bàn\n\n# 1. Một số ý mà tôi có thể chắc chắn mà chúng ta phải làm rõ như sau:\n\n1. Không có một định nghĩa chung nào về `pass by value` và `pass by reference`, tuỳ thuộc vào từng ngôn ngữ, chúng lại có cách xử lý và những định nghĩa khác nhau về cách xử lý biến và vùng nhớ.\n\n2. `Pass value`: Hiểu một cách đơn giản nhất, đó là khi biến bạn truyền vào một method nào đó, dù trong đó logic là gì và nó hà hiếp cái biến bạn bỏ vào ra làm sao, thì khi ra ngoài hàm đó, biến bạn đã truyền ở trên vẫn còn nguyên seal, nguyên kiện, không hề si nhê (không hề thay đổi về giá trị).\n\n3. `Pass reference`: ngược lại với sự tử tế trong `Pass value`, khi bạn quyết định truyền tham số dưới dạng một reference, đồng nghĩa với việc bạn chấp nhận rằng cái biến bé bỏng, yếu ớt xinh xinh của bạn sẽ tha hồ bị logic trong hàm hành hạ, và khi ra khỏi hàng nó vẫn mang đầy đủ thương tích đã bị gây ra trong hàm (giá trị biến truyền vào sẽ bị thay đổi theo logic trong hàm).\n\nNote: khi còn đi học, tôi đã có một sự nhầm lẫn về value và reference trong C, khi đó tôi đã nghĩ truyền tên biến bình thường thôi là `Pass value`, còn truyền con trỏ là `Pass reference`. Nhưng thực ra đó là không đúng.\n\n```\nThe C language is pass-by-value without exception.\nPassing a pointer as a parameter does not mean pass-by-reference.\n```\n\n# 2. Pass value và reference trong ruby\n\n| Qua thời gian tìm hiểu thì tôi nhận thấy rằng trong ruby không hề có khái niệm rõ ràng về reference hay value, nên mọi kết luận ở đây chỉ là mang tính quy chiếu dựa vào những ý chúng ta đã nói trong mục 1.\n\nXem ví dụ sau đây:\n\n```ruby\ndef xinchao(a)\n  a = \"Nguyen Van A\"\nend\n\ntemp = \"Nguyen Van B\"\n\nputs \"Kq: Xin Chao #{xinchao(temp)}\"\n\n#=> \"Kq: Xin Chao Nguyen Van A\"\n```\n\nTừ ví dụ trên ta có thể rút ra kết luận là ruby `Pass reference`? Vì như bạn đã thấy kết quả là \"Nguyen Van A\", giá trị mà chúng ta gán trong hàm `xinchao`.\n\nCâu trả lời là không, đây là một ví dụ cạm bẫy nếu ta không cẩn thận, khác với một số ngôn ngữ khác bắt buộc phải sử dụng `return` để trả về kết quả trong function, ruby cho phép ta sử dụng giá trị cuối cùng bạn viết ra trong function đó. Tức kết quả trả về trên đơn giản là kết quả thực hiện của function xinchao, chứ còn việc biến temp có thay đổi giá trị hay không thì chúng ta phải thay thế lại một chút như dưới đây để kiểm chứng:\n\n```ruby\ndef xinchao(a)\n  a = \"Nguyen Van A\"\nend\n\ntemp = \"Nguyen Van B\"\n\nxinchao(temp)\n\nputs \"Kq: Xin Chao #{temp}\"\n\n#=> \"Kq: Xin Chao Nguyen Van B\"\n```\n\nOh, vậy ruby là `Pass by value`? Đúng, như đã từng đề cập, ruby không có 1 định nghĩa thuần tuý nào về hai khái niệm mà chúng ta đang thảo luận, nên dựa trên những ý chính mà chúng ta đã thống nhất trong mục 1, ta có thể gọi Ruby là 1 một ngôn ngữ `Pass by value`.\n\nVậy có trường hợp ngoại lệ nào không? Như C++ có cả `Pass by value` và `Pass by reference` đó thôi? Câu trả lời vẫn lại là không, thật tiếc, đó đơn giản là sự định hướng của cha đẻ của từng loại ngôn ngữ.\n\n# Kết luận\n\nĐiều cần nhớ sau bài viết này chính là việc hiểu khái quát về `Pass by value` và `Pass by reference`, một cách tổng quát, còn chi tiết bên trong phải cần nhiều bài nữa mới có thể làm rõ được vấn đề.\n","source":"_posts/2019-02-19-truyen-tham-tri-va-truyen-tham-chieu.md","raw":"---\ntitle: \"Pass Reference Vs Pass Value, Ruby!\"\ndate: 2019-02-19\ndraft: false\ntags: [\"programming\", \"ruby\"]\ncategories: [\"ruby notes\", \"programming\"]\nmytag: \"Ruby\"\nmytrend: \"COOL\"\n---\n\n# Đặt vấn đề\n\nChủ đề bài viết ngày hôm nay vốn đã được khơi gợi mơ hồ trong tôi từ rất lâu, nhớ không nhầm thì đó là từ ngày học môn nhập môn lập trình tại trường KHTN, giảng viên có nói lướt qua về khái niệm này, đơn thuần chỉ là lướt qua thôi,vì dù rằng có đi sâu vào hơn nữa thì sinh viên cũng chỉ tổ ngủ gục. Thoáng cái đã 5,6 năm trôi qua, giờ ngồi đây khi đang chuẩn bị thất nghiệp, tôi có hứng thú tìm lại cảm giác thanh xuân nơi giảng đường bằng cách mò mẫm lại cái chủ đề mà ngày xưa tôi từng học (mà hiểu chưa tinh tường), rồi cũng từng trả lời khi đi phỏng vấn (mà người phỏng vấn cũng chỉ hỏi qua). Ôi chao! sao đau đầu đến thế nhỉ? Định làm một bài viết đầy đủ, tường minh mà có quá nhiều thứ cần phải nghiềm ngẫm lại, đặt phím gõ rồi bỏ thì không nỡ, mà viết thì cũng chưa an tâm cái mình nói là đúng, vậy tôi lựa chọn cách đơn giản hơn, đó là viết một số hiểu biết ban đầu, nhẹ nhàng vào du dương, còn hardcore xin hẹn 1 ngày khác.\n\n# Luận bàn\n\n# 1. Một số ý mà tôi có thể chắc chắn mà chúng ta phải làm rõ như sau:\n\n1. Không có một định nghĩa chung nào về `pass by value` và `pass by reference`, tuỳ thuộc vào từng ngôn ngữ, chúng lại có cách xử lý và những định nghĩa khác nhau về cách xử lý biến và vùng nhớ.\n\n2. `Pass value`: Hiểu một cách đơn giản nhất, đó là khi biến bạn truyền vào một method nào đó, dù trong đó logic là gì và nó hà hiếp cái biến bạn bỏ vào ra làm sao, thì khi ra ngoài hàm đó, biến bạn đã truyền ở trên vẫn còn nguyên seal, nguyên kiện, không hề si nhê (không hề thay đổi về giá trị).\n\n3. `Pass reference`: ngược lại với sự tử tế trong `Pass value`, khi bạn quyết định truyền tham số dưới dạng một reference, đồng nghĩa với việc bạn chấp nhận rằng cái biến bé bỏng, yếu ớt xinh xinh của bạn sẽ tha hồ bị logic trong hàm hành hạ, và khi ra khỏi hàng nó vẫn mang đầy đủ thương tích đã bị gây ra trong hàm (giá trị biến truyền vào sẽ bị thay đổi theo logic trong hàm).\n\nNote: khi còn đi học, tôi đã có một sự nhầm lẫn về value và reference trong C, khi đó tôi đã nghĩ truyền tên biến bình thường thôi là `Pass value`, còn truyền con trỏ là `Pass reference`. Nhưng thực ra đó là không đúng.\n\n```\nThe C language is pass-by-value without exception.\nPassing a pointer as a parameter does not mean pass-by-reference.\n```\n\n# 2. Pass value và reference trong ruby\n\n| Qua thời gian tìm hiểu thì tôi nhận thấy rằng trong ruby không hề có khái niệm rõ ràng về reference hay value, nên mọi kết luận ở đây chỉ là mang tính quy chiếu dựa vào những ý chúng ta đã nói trong mục 1.\n\nXem ví dụ sau đây:\n\n```ruby\ndef xinchao(a)\n  a = \"Nguyen Van A\"\nend\n\ntemp = \"Nguyen Van B\"\n\nputs \"Kq: Xin Chao #{xinchao(temp)}\"\n\n#=> \"Kq: Xin Chao Nguyen Van A\"\n```\n\nTừ ví dụ trên ta có thể rút ra kết luận là ruby `Pass reference`? Vì như bạn đã thấy kết quả là \"Nguyen Van A\", giá trị mà chúng ta gán trong hàm `xinchao`.\n\nCâu trả lời là không, đây là một ví dụ cạm bẫy nếu ta không cẩn thận, khác với một số ngôn ngữ khác bắt buộc phải sử dụng `return` để trả về kết quả trong function, ruby cho phép ta sử dụng giá trị cuối cùng bạn viết ra trong function đó. Tức kết quả trả về trên đơn giản là kết quả thực hiện của function xinchao, chứ còn việc biến temp có thay đổi giá trị hay không thì chúng ta phải thay thế lại một chút như dưới đây để kiểm chứng:\n\n```ruby\ndef xinchao(a)\n  a = \"Nguyen Van A\"\nend\n\ntemp = \"Nguyen Van B\"\n\nxinchao(temp)\n\nputs \"Kq: Xin Chao #{temp}\"\n\n#=> \"Kq: Xin Chao Nguyen Van B\"\n```\n\nOh, vậy ruby là `Pass by value`? Đúng, như đã từng đề cập, ruby không có 1 định nghĩa thuần tuý nào về hai khái niệm mà chúng ta đang thảo luận, nên dựa trên những ý chính mà chúng ta đã thống nhất trong mục 1, ta có thể gọi Ruby là 1 một ngôn ngữ `Pass by value`.\n\nVậy có trường hợp ngoại lệ nào không? Như C++ có cả `Pass by value` và `Pass by reference` đó thôi? Câu trả lời vẫn lại là không, thật tiếc, đó đơn giản là sự định hướng của cha đẻ của từng loại ngôn ngữ.\n\n# Kết luận\n\nĐiều cần nhớ sau bài viết này chính là việc hiểu khái quát về `Pass by value` và `Pass by reference`, một cách tổng quát, còn chi tiết bên trong phải cần nhiều bài nữa mới có thể làm rõ được vấn đề.\n","slug":"2019-02-19-truyen-tham-tri-va-truyen-tham-chieu","published":1,"updated":"2019-11-13T04:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7suf6000c5rrs65q3fb98","content":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Chủ đề bài viết ngày hôm nay vốn đã được khơi gợi mơ hồ trong tôi từ rất lâu, nhớ không nhầm thì đó là từ ngày học môn nhập môn lập trình tại trường KHTN, giảng viên có nói lướt qua về khái niệm này, đơn thuần chỉ là lướt qua thôi,vì dù rằng có đi sâu vào hơn nữa thì sinh viên cũng chỉ tổ ngủ gục. Thoáng cái đã 5,6 năm trôi qua, giờ ngồi đây khi đang chuẩn bị thất nghiệp, tôi có hứng thú tìm lại cảm giác thanh xuân nơi giảng đường bằng cách mò mẫm lại cái chủ đề mà ngày xưa tôi từng học (mà hiểu chưa tinh tường), rồi cũng từng trả lời khi đi phỏng vấn (mà người phỏng vấn cũng chỉ hỏi qua). Ôi chao! sao đau đầu đến thế nhỉ? Định làm một bài viết đầy đủ, tường minh mà có quá nhiều thứ cần phải nghiềm ngẫm lại, đặt phím gõ rồi bỏ thì không nỡ, mà viết thì cũng chưa an tâm cái mình nói là đúng, vậy tôi lựa chọn cách đơn giản hơn, đó là viết một số hiểu biết ban đầu, nhẹ nhàng vào du dương, còn hardcore xin hẹn 1 ngày khác.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-Mot-so-y-ma-toi-co-the-chac-chan-ma-chung-ta-phai-lam-ro-nhu-sau\"><a href=\"#1-Mot-so-y-ma-toi-co-the-chac-chan-ma-chung-ta-phai-lam-ro-nhu-sau\" class=\"headerlink\" title=\"1. Một số ý mà tôi có thể chắc chắn mà chúng ta phải làm rõ như sau:\"></a>1. Một số ý mà tôi có thể chắc chắn mà chúng ta phải làm rõ như sau:</h1><ol>\n<li><p>Không có một định nghĩa chung nào về <code>pass by value</code> và <code>pass by reference</code>, tuỳ thuộc vào từng ngôn ngữ, chúng lại có cách xử lý và những định nghĩa khác nhau về cách xử lý biến và vùng nhớ.</p>\n</li>\n<li><p><code>Pass value</code>: Hiểu một cách đơn giản nhất, đó là khi biến bạn truyền vào một method nào đó, dù trong đó logic là gì và nó hà hiếp cái biến bạn bỏ vào ra làm sao, thì khi ra ngoài hàm đó, biến bạn đã truyền ở trên vẫn còn nguyên seal, nguyên kiện, không hề si nhê (không hề thay đổi về giá trị).</p>\n</li>\n<li><p><code>Pass reference</code>: ngược lại với sự tử tế trong <code>Pass value</code>, khi bạn quyết định truyền tham số dưới dạng một reference, đồng nghĩa với việc bạn chấp nhận rằng cái biến bé bỏng, yếu ớt xinh xinh của bạn sẽ tha hồ bị logic trong hàm hành hạ, và khi ra khỏi hàng nó vẫn mang đầy đủ thương tích đã bị gây ra trong hàm (giá trị biến truyền vào sẽ bị thay đổi theo logic trong hàm).</p>\n</li>\n</ol>\n<p>Note: khi còn đi học, tôi đã có một sự nhầm lẫn về value và reference trong C, khi đó tôi đã nghĩ truyền tên biến bình thường thôi là <code>Pass value</code>, còn truyền con trỏ là <code>Pass reference</code>. Nhưng thực ra đó là không đúng.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The C language is pass-by-value without exception.</span><br><span class=\"line\">Passing a pointer as a parameter does not mean pass-by-reference.</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-Pass-value-va-reference-trong-ruby\"><a href=\"#2-Pass-value-va-reference-trong-ruby\" class=\"headerlink\" title=\"2. Pass value và reference trong ruby\"></a>2. Pass value và reference trong ruby</h1><p>| Qua thời gian tìm hiểu thì tôi nhận thấy rằng trong ruby không hề có khái niệm rõ ràng về reference hay value, nên mọi kết luận ở đây chỉ là mang tính quy chiếu dựa vào những ý chúng ta đã nói trong mục 1.</p>\n<p>Xem ví dụ sau đây:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">xinchao</span><span class=\"params\">(a)</span></span></span><br><span class=\"line\">  a = <span class=\"string\">\"Nguyen Van A\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">temp = <span class=\"string\">\"Nguyen Van B\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">\"Kq: Xin Chao <span class=\"subst\">#&#123;xinchao(temp)&#125;</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#=&gt; \"Kq: Xin Chao Nguyen Van A\"</span></span><br></pre></td></tr></table></figure>\n\n<p>Từ ví dụ trên ta có thể rút ra kết luận là ruby <code>Pass reference</code>? Vì như bạn đã thấy kết quả là “Nguyen Van A”, giá trị mà chúng ta gán trong hàm <code>xinchao</code>.</p>\n<p>Câu trả lời là không, đây là một ví dụ cạm bẫy nếu ta không cẩn thận, khác với một số ngôn ngữ khác bắt buộc phải sử dụng <code>return</code> để trả về kết quả trong function, ruby cho phép ta sử dụng giá trị cuối cùng bạn viết ra trong function đó. Tức kết quả trả về trên đơn giản là kết quả thực hiện của function xinchao, chứ còn việc biến temp có thay đổi giá trị hay không thì chúng ta phải thay thế lại một chút như dưới đây để kiểm chứng:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">xinchao</span><span class=\"params\">(a)</span></span></span><br><span class=\"line\">  a = <span class=\"string\">\"Nguyen Van A\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">temp = <span class=\"string\">\"Nguyen Van B\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">xinchao(temp)</span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">\"Kq: Xin Chao <span class=\"subst\">#&#123;temp&#125;</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#=&gt; \"Kq: Xin Chao Nguyen Van B\"</span></span><br></pre></td></tr></table></figure>\n\n<p>Oh, vậy ruby là <code>Pass by value</code>? Đúng, như đã từng đề cập, ruby không có 1 định nghĩa thuần tuý nào về hai khái niệm mà chúng ta đang thảo luận, nên dựa trên những ý chính mà chúng ta đã thống nhất trong mục 1, ta có thể gọi Ruby là 1 một ngôn ngữ <code>Pass by value</code>.</p>\n<p>Vậy có trường hợp ngoại lệ nào không? Như C++ có cả <code>Pass by value</code> và <code>Pass by reference</code> đó thôi? Câu trả lời vẫn lại là không, thật tiếc, đó đơn giản là sự định hướng của cha đẻ của từng loại ngôn ngữ.</p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Điều cần nhớ sau bài viết này chính là việc hiểu khái quát về <code>Pass by value</code> và <code>Pass by reference</code>, một cách tổng quát, còn chi tiết bên trong phải cần nhiều bài nữa mới có thể làm rõ được vấn đề.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Chủ đề bài viết ngày hôm nay vốn đã được khơi gợi mơ hồ trong tôi từ rất lâu, nhớ không nhầm thì đó là từ ngày học môn nhập môn lập trình tại trường KHTN, giảng viên có nói lướt qua về khái niệm này, đơn thuần chỉ là lướt qua thôi,vì dù rằng có đi sâu vào hơn nữa thì sinh viên cũng chỉ tổ ngủ gục. Thoáng cái đã 5,6 năm trôi qua, giờ ngồi đây khi đang chuẩn bị thất nghiệp, tôi có hứng thú tìm lại cảm giác thanh xuân nơi giảng đường bằng cách mò mẫm lại cái chủ đề mà ngày xưa tôi từng học (mà hiểu chưa tinh tường), rồi cũng từng trả lời khi đi phỏng vấn (mà người phỏng vấn cũng chỉ hỏi qua). Ôi chao! sao đau đầu đến thế nhỉ? Định làm một bài viết đầy đủ, tường minh mà có quá nhiều thứ cần phải nghiềm ngẫm lại, đặt phím gõ rồi bỏ thì không nỡ, mà viết thì cũng chưa an tâm cái mình nói là đúng, vậy tôi lựa chọn cách đơn giản hơn, đó là viết một số hiểu biết ban đầu, nhẹ nhàng vào du dương, còn hardcore xin hẹn 1 ngày khác.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-Mot-so-y-ma-toi-co-the-chac-chan-ma-chung-ta-phai-lam-ro-nhu-sau\"><a href=\"#1-Mot-so-y-ma-toi-co-the-chac-chan-ma-chung-ta-phai-lam-ro-nhu-sau\" class=\"headerlink\" title=\"1. Một số ý mà tôi có thể chắc chắn mà chúng ta phải làm rõ như sau:\"></a>1. Một số ý mà tôi có thể chắc chắn mà chúng ta phải làm rõ như sau:</h1><ol>\n<li><p>Không có một định nghĩa chung nào về <code>pass by value</code> và <code>pass by reference</code>, tuỳ thuộc vào từng ngôn ngữ, chúng lại có cách xử lý và những định nghĩa khác nhau về cách xử lý biến và vùng nhớ.</p>\n</li>\n<li><p><code>Pass value</code>: Hiểu một cách đơn giản nhất, đó là khi biến bạn truyền vào một method nào đó, dù trong đó logic là gì và nó hà hiếp cái biến bạn bỏ vào ra làm sao, thì khi ra ngoài hàm đó, biến bạn đã truyền ở trên vẫn còn nguyên seal, nguyên kiện, không hề si nhê (không hề thay đổi về giá trị).</p>\n</li>\n<li><p><code>Pass reference</code>: ngược lại với sự tử tế trong <code>Pass value</code>, khi bạn quyết định truyền tham số dưới dạng một reference, đồng nghĩa với việc bạn chấp nhận rằng cái biến bé bỏng, yếu ớt xinh xinh của bạn sẽ tha hồ bị logic trong hàm hành hạ, và khi ra khỏi hàng nó vẫn mang đầy đủ thương tích đã bị gây ra trong hàm (giá trị biến truyền vào sẽ bị thay đổi theo logic trong hàm).</p>\n</li>\n</ol>\n<p>Note: khi còn đi học, tôi đã có một sự nhầm lẫn về value và reference trong C, khi đó tôi đã nghĩ truyền tên biến bình thường thôi là <code>Pass value</code>, còn truyền con trỏ là <code>Pass reference</code>. Nhưng thực ra đó là không đúng.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The C language is pass-by-value without exception.</span><br><span class=\"line\">Passing a pointer as a parameter does not mean pass-by-reference.</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-Pass-value-va-reference-trong-ruby\"><a href=\"#2-Pass-value-va-reference-trong-ruby\" class=\"headerlink\" title=\"2. Pass value và reference trong ruby\"></a>2. Pass value và reference trong ruby</h1><p>| Qua thời gian tìm hiểu thì tôi nhận thấy rằng trong ruby không hề có khái niệm rõ ràng về reference hay value, nên mọi kết luận ở đây chỉ là mang tính quy chiếu dựa vào những ý chúng ta đã nói trong mục 1.</p>\n<p>Xem ví dụ sau đây:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">xinchao</span><span class=\"params\">(a)</span></span></span><br><span class=\"line\">  a = <span class=\"string\">\"Nguyen Van A\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">temp = <span class=\"string\">\"Nguyen Van B\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">\"Kq: Xin Chao <span class=\"subst\">#&#123;xinchao(temp)&#125;</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#=&gt; \"Kq: Xin Chao Nguyen Van A\"</span></span><br></pre></td></tr></table></figure>\n\n<p>Từ ví dụ trên ta có thể rút ra kết luận là ruby <code>Pass reference</code>? Vì như bạn đã thấy kết quả là “Nguyen Van A”, giá trị mà chúng ta gán trong hàm <code>xinchao</code>.</p>\n<p>Câu trả lời là không, đây là một ví dụ cạm bẫy nếu ta không cẩn thận, khác với một số ngôn ngữ khác bắt buộc phải sử dụng <code>return</code> để trả về kết quả trong function, ruby cho phép ta sử dụng giá trị cuối cùng bạn viết ra trong function đó. Tức kết quả trả về trên đơn giản là kết quả thực hiện của function xinchao, chứ còn việc biến temp có thay đổi giá trị hay không thì chúng ta phải thay thế lại một chút như dưới đây để kiểm chứng:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">xinchao</span><span class=\"params\">(a)</span></span></span><br><span class=\"line\">  a = <span class=\"string\">\"Nguyen Van A\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">temp = <span class=\"string\">\"Nguyen Van B\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">xinchao(temp)</span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">\"Kq: Xin Chao <span class=\"subst\">#&#123;temp&#125;</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#=&gt; \"Kq: Xin Chao Nguyen Van B\"</span></span><br></pre></td></tr></table></figure>\n\n<p>Oh, vậy ruby là <code>Pass by value</code>? Đúng, như đã từng đề cập, ruby không có 1 định nghĩa thuần tuý nào về hai khái niệm mà chúng ta đang thảo luận, nên dựa trên những ý chính mà chúng ta đã thống nhất trong mục 1, ta có thể gọi Ruby là 1 một ngôn ngữ <code>Pass by value</code>.</p>\n<p>Vậy có trường hợp ngoại lệ nào không? Như C++ có cả <code>Pass by value</code> và <code>Pass by reference</code> đó thôi? Câu trả lời vẫn lại là không, thật tiếc, đó đơn giản là sự định hướng của cha đẻ của từng loại ngôn ngữ.</p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Điều cần nhớ sau bài viết này chính là việc hiểu khái quát về <code>Pass by value</code> và <code>Pass by reference</code>, một cách tổng quát, còn chi tiết bên trong phải cần nhiều bài nữa mới có thể làm rõ được vấn đề.</p>\n"},{"title":"Vài Trình Thông Dịch Cho Ruby","date":"2019-02-19T17:00:00.000Z","draft":false,"mytag":"#TIL","_content":"\n# Đặt vấn đề\n\nĐây lại là một bài viết về chủ đề `core`, phức tạp hoá những thứ mà bình thường đi làm coder ta đa phần là không cần dùng đến. Hôm nay sẽ là các trình thông dịch trong ruby.\n\n# Luận bàn\n\n# 1. Ruby chạy code của bạn như nào?\n\nTrước khi nói về các trình thông dịch, tôi xin nêu khái quát về quá trình ruby thực thi mã code của bạn.\nVới bất cứ đoạn mã ruby nào, mã nguồn bạn viết sẽ trải qua các bước sau để có thể tới được trình thông dịch (chủ đề mà ta đang tìm hiểu).\n\n`Token`: Chuyển đổi mã nguồn ruby thành một dạng keyword. Hiểu đơn giản, ruby sẽ quét qua mã nguồn bạn viết và so sánh với một symbol table nào đó (giả dụ như vậy), để xác định xem trong mã nguồn bạn viết gồm những thành phần nào (để xác định đâu là biến, đâu là keyword, đâu là từ khoá). Ví dụ việc từ `do` xuất hiện trong mã nguồn, có thể nó là một biến local, hoặc nó là một keyword trong một `block`, `Token` sẽ quét mã nguồn và đảm bảo xác định đúng `type` của từng thành phần trong code của bạn, chú ý là `type` nhé, ở bước này ruby chỉ quan tâm đến xác định `type`.\n\n`Parse`: Qua bước đầu tiên, ta đã có một token, đến bước thứ hai nó sẽ chuyển đổi token đó thành một AST (Abstract Syntax Tree).\n\n`Compile`: Đến bước này, ruby sẽ biên dịch kết quả ở bước 2 thành `bytecode` và truyền kết quả biên dịch được sang cho máy ảo ruby (là phần mà chúng ta đang tìm hiểu trong bài viết).\n\n# 2. CRuby, MRI, YARV, KRI\n\nĐể kiểm tra xem ruby trên máy tính của bạn đang sử dụng trình thông dịch nào, hãy mở `irb` và sử dụng lệnh sau:\n\n``` ruby\nRbConfig::CONFIG[\"RUBY_INSTALL_NAME\"]\n#=> kết quả trả về trên máy của tôi là: ruby\n```\nĐiều này có nghĩa tôi đang sử dụng trình thông dịch mặc định trong ruby. Được gọi là `MRI`/`CRuby` hay phiên bản nâng cấp sau này là `YARV`/`KRI`. Giải thích về việc có nhiều tên gọi như trên, tôi xin trích dẫn các thông tin trên wiki và trình thông dịch này:\n\n```\nMatz's Ruby Interpreter or Ruby MRI (also called CRuby)\nwas the reference implementation of the Ruby programming language\nnamed after Ruby creator Yukihiro Matsumoto (\"Matz\")\n```\n\n```\nYARV (Yet another Ruby VM) is a bytecode interpreter that\nwas developed for the Ruby programming language by Koichi Sasada.\nThe goal of the project was to greatly reduce the execution time of Ruby programs.\n```\n\n```\nSince YARV has become the official Ruby interpreter for Ruby 1.9,\nit is also named KRI (Koichi's Ruby Interpreter),\nin the same vein as the original Ruby MRI,\nnamed for Ruby's creator Yukihiro Matsumoto.\n```\n\n```\nYARV was merged into the Ruby Subversion repository on January 1, 2007.\nIt was released as part of Ruby 1.9.0 on December 26, 2007, replacing Ruby MRI.\n```\n\nQua vài trích dẫn kể trên, bạn có thể thấy đơn giản những khái niệm `CRuby`, `YARV`, `MRI`, `KRI` đều nhằm mô tả về một trình thông dịch được sử dụng mặc định cho ruby (tuỳ phiên bản sẽ có khác nhau, hiểu theo nghĩa là một sự update thay vì là thay thế).\n\n# 3. JRuby\n\nCòn một vài trình thông dịch khác mà tôi đã đọc được, nhưng `JRuby` là phần cuối mà chúng ta sẽ tìm hiểu, vì những những trình thông dịch còn lại không được phổ biến cho lắm.\n\n`JRuby` = `Java` + `Ruby`\n\nTức là dùng phần java làm core để chạy máy ảo xử lý code ruby. Sự khác biệt với mục 2,chính là ở mục 2, dù dưới tên gọi hay phiên bản nào, thì những trình thông dịch đó đều sử dụng `C` làm ngôn ngữ xây dựng.\n\nMột số ý kiến xoay quanh `JRuby`\n\n| 1: JRuby nhanh hơn đáng kể với trình thông dịch mặc định trong ruby, có lợi thế mạnh mẽ khi xử lý đa luồng.\n\n| 2: Tuy nhiên đồng nghĩa với điều đó là việc `JRuby` chiếm dụng bộ nhớ nhiều hơn và mất thời gian hơn để khởi động.\n\nVậy sẽ là một thảm hoạ nếu sử dụng `JRuby` để làm trình thông dịch cho ruby trong những ứng dụng nhỏ, hoạt động đơn giản và không cần tốc độ quá cao.\n\n# Kết luận\n\nTrên đây là một số khái quát về lịch sử và hành trình của các trình thông dịch Ruby. Nếu có sai xót, xin hãy để lại bình luận ở dưới bài viết.\n","source":"_posts/2019-02-20-cac-trinh-thong-dich-trong-ruby.md","raw":"---\ntitle: \"Vài Trình Thông Dịch Cho Ruby\"\ndate: 2019-02-20\ndraft: false\ntags: [\"ruby\"]\ncategories: [\"ruby notes\"]\nmytag: \"#TIL\"\n---\n\n# Đặt vấn đề\n\nĐây lại là một bài viết về chủ đề `core`, phức tạp hoá những thứ mà bình thường đi làm coder ta đa phần là không cần dùng đến. Hôm nay sẽ là các trình thông dịch trong ruby.\n\n# Luận bàn\n\n# 1. Ruby chạy code của bạn như nào?\n\nTrước khi nói về các trình thông dịch, tôi xin nêu khái quát về quá trình ruby thực thi mã code của bạn.\nVới bất cứ đoạn mã ruby nào, mã nguồn bạn viết sẽ trải qua các bước sau để có thể tới được trình thông dịch (chủ đề mà ta đang tìm hiểu).\n\n`Token`: Chuyển đổi mã nguồn ruby thành một dạng keyword. Hiểu đơn giản, ruby sẽ quét qua mã nguồn bạn viết và so sánh với một symbol table nào đó (giả dụ như vậy), để xác định xem trong mã nguồn bạn viết gồm những thành phần nào (để xác định đâu là biến, đâu là keyword, đâu là từ khoá). Ví dụ việc từ `do` xuất hiện trong mã nguồn, có thể nó là một biến local, hoặc nó là một keyword trong một `block`, `Token` sẽ quét mã nguồn và đảm bảo xác định đúng `type` của từng thành phần trong code của bạn, chú ý là `type` nhé, ở bước này ruby chỉ quan tâm đến xác định `type`.\n\n`Parse`: Qua bước đầu tiên, ta đã có một token, đến bước thứ hai nó sẽ chuyển đổi token đó thành một AST (Abstract Syntax Tree).\n\n`Compile`: Đến bước này, ruby sẽ biên dịch kết quả ở bước 2 thành `bytecode` và truyền kết quả biên dịch được sang cho máy ảo ruby (là phần mà chúng ta đang tìm hiểu trong bài viết).\n\n# 2. CRuby, MRI, YARV, KRI\n\nĐể kiểm tra xem ruby trên máy tính của bạn đang sử dụng trình thông dịch nào, hãy mở `irb` và sử dụng lệnh sau:\n\n``` ruby\nRbConfig::CONFIG[\"RUBY_INSTALL_NAME\"]\n#=> kết quả trả về trên máy của tôi là: ruby\n```\nĐiều này có nghĩa tôi đang sử dụng trình thông dịch mặc định trong ruby. Được gọi là `MRI`/`CRuby` hay phiên bản nâng cấp sau này là `YARV`/`KRI`. Giải thích về việc có nhiều tên gọi như trên, tôi xin trích dẫn các thông tin trên wiki và trình thông dịch này:\n\n```\nMatz's Ruby Interpreter or Ruby MRI (also called CRuby)\nwas the reference implementation of the Ruby programming language\nnamed after Ruby creator Yukihiro Matsumoto (\"Matz\")\n```\n\n```\nYARV (Yet another Ruby VM) is a bytecode interpreter that\nwas developed for the Ruby programming language by Koichi Sasada.\nThe goal of the project was to greatly reduce the execution time of Ruby programs.\n```\n\n```\nSince YARV has become the official Ruby interpreter for Ruby 1.9,\nit is also named KRI (Koichi's Ruby Interpreter),\nin the same vein as the original Ruby MRI,\nnamed for Ruby's creator Yukihiro Matsumoto.\n```\n\n```\nYARV was merged into the Ruby Subversion repository on January 1, 2007.\nIt was released as part of Ruby 1.9.0 on December 26, 2007, replacing Ruby MRI.\n```\n\nQua vài trích dẫn kể trên, bạn có thể thấy đơn giản những khái niệm `CRuby`, `YARV`, `MRI`, `KRI` đều nhằm mô tả về một trình thông dịch được sử dụng mặc định cho ruby (tuỳ phiên bản sẽ có khác nhau, hiểu theo nghĩa là một sự update thay vì là thay thế).\n\n# 3. JRuby\n\nCòn một vài trình thông dịch khác mà tôi đã đọc được, nhưng `JRuby` là phần cuối mà chúng ta sẽ tìm hiểu, vì những những trình thông dịch còn lại không được phổ biến cho lắm.\n\n`JRuby` = `Java` + `Ruby`\n\nTức là dùng phần java làm core để chạy máy ảo xử lý code ruby. Sự khác biệt với mục 2,chính là ở mục 2, dù dưới tên gọi hay phiên bản nào, thì những trình thông dịch đó đều sử dụng `C` làm ngôn ngữ xây dựng.\n\nMột số ý kiến xoay quanh `JRuby`\n\n| 1: JRuby nhanh hơn đáng kể với trình thông dịch mặc định trong ruby, có lợi thế mạnh mẽ khi xử lý đa luồng.\n\n| 2: Tuy nhiên đồng nghĩa với điều đó là việc `JRuby` chiếm dụng bộ nhớ nhiều hơn và mất thời gian hơn để khởi động.\n\nVậy sẽ là một thảm hoạ nếu sử dụng `JRuby` để làm trình thông dịch cho ruby trong những ứng dụng nhỏ, hoạt động đơn giản và không cần tốc độ quá cao.\n\n# Kết luận\n\nTrên đây là một số khái quát về lịch sử và hành trình của các trình thông dịch Ruby. Nếu có sai xót, xin hãy để lại bình luận ở dưới bài viết.\n","slug":"2019-02-20-cac-trinh-thong-dich-trong-ruby","published":1,"updated":"2019-11-13T04:00:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7suf8000e5rrs2aa7fok7","content":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Đây lại là một bài viết về chủ đề <code>core</code>, phức tạp hoá những thứ mà bình thường đi làm coder ta đa phần là không cần dùng đến. Hôm nay sẽ là các trình thông dịch trong ruby.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-Ruby-chay-code-cua-ban-nhu-nao\"><a href=\"#1-Ruby-chay-code-cua-ban-nhu-nao\" class=\"headerlink\" title=\"1. Ruby chạy code của bạn như nào?\"></a>1. Ruby chạy code của bạn như nào?</h1><p>Trước khi nói về các trình thông dịch, tôi xin nêu khái quát về quá trình ruby thực thi mã code của bạn.<br>Với bất cứ đoạn mã ruby nào, mã nguồn bạn viết sẽ trải qua các bước sau để có thể tới được trình thông dịch (chủ đề mà ta đang tìm hiểu).</p>\n<p><code>Token</code>: Chuyển đổi mã nguồn ruby thành một dạng keyword. Hiểu đơn giản, ruby sẽ quét qua mã nguồn bạn viết và so sánh với một symbol table nào đó (giả dụ như vậy), để xác định xem trong mã nguồn bạn viết gồm những thành phần nào (để xác định đâu là biến, đâu là keyword, đâu là từ khoá). Ví dụ việc từ <code>do</code> xuất hiện trong mã nguồn, có thể nó là một biến local, hoặc nó là một keyword trong một <code>block</code>, <code>Token</code> sẽ quét mã nguồn và đảm bảo xác định đúng <code>type</code> của từng thành phần trong code của bạn, chú ý là <code>type</code> nhé, ở bước này ruby chỉ quan tâm đến xác định <code>type</code>.</p>\n<p><code>Parse</code>: Qua bước đầu tiên, ta đã có một token, đến bước thứ hai nó sẽ chuyển đổi token đó thành một AST (Abstract Syntax Tree).</p>\n<p><code>Compile</code>: Đến bước này, ruby sẽ biên dịch kết quả ở bước 2 thành <code>bytecode</code> và truyền kết quả biên dịch được sang cho máy ảo ruby (là phần mà chúng ta đang tìm hiểu trong bài viết).</p>\n<h1 id=\"2-CRuby-MRI-YARV-KRI\"><a href=\"#2-CRuby-MRI-YARV-KRI\" class=\"headerlink\" title=\"2. CRuby, MRI, YARV, KRI\"></a>2. CRuby, MRI, YARV, KRI</h1><p>Để kiểm tra xem ruby trên máy tính của bạn đang sử dụng trình thông dịch nào, hãy mở <code>irb</code> và sử dụng lệnh sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RbConfig::CONFIG[<span class=\"string\">\"RUBY_INSTALL_NAME\"</span>]</span><br><span class=\"line\"><span class=\"comment\">#=&gt; kết quả trả về trên máy của tôi là: ruby</span></span><br></pre></td></tr></table></figure>\n<p>Điều này có nghĩa tôi đang sử dụng trình thông dịch mặc định trong ruby. Được gọi là <code>MRI</code>/<code>CRuby</code> hay phiên bản nâng cấp sau này là <code>YARV</code>/<code>KRI</code>. Giải thích về việc có nhiều tên gọi như trên, tôi xin trích dẫn các thông tin trên wiki và trình thông dịch này:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Matz&apos;s Ruby Interpreter or Ruby MRI (also called CRuby)</span><br><span class=\"line\">was the reference implementation of the Ruby programming language</span><br><span class=\"line\">named after Ruby creator Yukihiro Matsumoto (&quot;Matz&quot;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YARV (Yet another Ruby VM) is a bytecode interpreter that</span><br><span class=\"line\">was developed for the Ruby programming language by Koichi Sasada.</span><br><span class=\"line\">The goal of the project was to greatly reduce the execution time of Ruby programs.</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Since YARV has become the official Ruby interpreter for Ruby 1.9,</span><br><span class=\"line\">it is also named KRI (Koichi&apos;s Ruby Interpreter),</span><br><span class=\"line\">in the same vein as the original Ruby MRI,</span><br><span class=\"line\">named for Ruby&apos;s creator Yukihiro Matsumoto.</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YARV was merged into the Ruby Subversion repository on January 1, 2007.</span><br><span class=\"line\">It was released as part of Ruby 1.9.0 on December 26, 2007, replacing Ruby MRI.</span><br></pre></td></tr></table></figure>\n\n<p>Qua vài trích dẫn kể trên, bạn có thể thấy đơn giản những khái niệm <code>CRuby</code>, <code>YARV</code>, <code>MRI</code>, <code>KRI</code> đều nhằm mô tả về một trình thông dịch được sử dụng mặc định cho ruby (tuỳ phiên bản sẽ có khác nhau, hiểu theo nghĩa là một sự update thay vì là thay thế).</p>\n<h1 id=\"3-JRuby\"><a href=\"#3-JRuby\" class=\"headerlink\" title=\"3. JRuby\"></a>3. JRuby</h1><p>Còn một vài trình thông dịch khác mà tôi đã đọc được, nhưng <code>JRuby</code> là phần cuối mà chúng ta sẽ tìm hiểu, vì những những trình thông dịch còn lại không được phổ biến cho lắm.</p>\n<p><code>JRuby</code> = <code>Java</code> + <code>Ruby</code></p>\n<p>Tức là dùng phần java làm core để chạy máy ảo xử lý code ruby. Sự khác biệt với mục 2,chính là ở mục 2, dù dưới tên gọi hay phiên bản nào, thì những trình thông dịch đó đều sử dụng <code>C</code> làm ngôn ngữ xây dựng.</p>\n<p>Một số ý kiến xoay quanh <code>JRuby</code></p>\n<p>| 1: JRuby nhanh hơn đáng kể với trình thông dịch mặc định trong ruby, có lợi thế mạnh mẽ khi xử lý đa luồng.</p>\n<p>| 2: Tuy nhiên đồng nghĩa với điều đó là việc <code>JRuby</code> chiếm dụng bộ nhớ nhiều hơn và mất thời gian hơn để khởi động.</p>\n<p>Vậy sẽ là một thảm hoạ nếu sử dụng <code>JRuby</code> để làm trình thông dịch cho ruby trong những ứng dụng nhỏ, hoạt động đơn giản và không cần tốc độ quá cao.</p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Trên đây là một số khái quát về lịch sử và hành trình của các trình thông dịch Ruby. Nếu có sai xót, xin hãy để lại bình luận ở dưới bài viết.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Đây lại là một bài viết về chủ đề <code>core</code>, phức tạp hoá những thứ mà bình thường đi làm coder ta đa phần là không cần dùng đến. Hôm nay sẽ là các trình thông dịch trong ruby.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-Ruby-chay-code-cua-ban-nhu-nao\"><a href=\"#1-Ruby-chay-code-cua-ban-nhu-nao\" class=\"headerlink\" title=\"1. Ruby chạy code của bạn như nào?\"></a>1. Ruby chạy code của bạn như nào?</h1><p>Trước khi nói về các trình thông dịch, tôi xin nêu khái quát về quá trình ruby thực thi mã code của bạn.<br>Với bất cứ đoạn mã ruby nào, mã nguồn bạn viết sẽ trải qua các bước sau để có thể tới được trình thông dịch (chủ đề mà ta đang tìm hiểu).</p>\n<p><code>Token</code>: Chuyển đổi mã nguồn ruby thành một dạng keyword. Hiểu đơn giản, ruby sẽ quét qua mã nguồn bạn viết và so sánh với một symbol table nào đó (giả dụ như vậy), để xác định xem trong mã nguồn bạn viết gồm những thành phần nào (để xác định đâu là biến, đâu là keyword, đâu là từ khoá). Ví dụ việc từ <code>do</code> xuất hiện trong mã nguồn, có thể nó là một biến local, hoặc nó là một keyword trong một <code>block</code>, <code>Token</code> sẽ quét mã nguồn và đảm bảo xác định đúng <code>type</code> của từng thành phần trong code của bạn, chú ý là <code>type</code> nhé, ở bước này ruby chỉ quan tâm đến xác định <code>type</code>.</p>\n<p><code>Parse</code>: Qua bước đầu tiên, ta đã có một token, đến bước thứ hai nó sẽ chuyển đổi token đó thành một AST (Abstract Syntax Tree).</p>\n<p><code>Compile</code>: Đến bước này, ruby sẽ biên dịch kết quả ở bước 2 thành <code>bytecode</code> và truyền kết quả biên dịch được sang cho máy ảo ruby (là phần mà chúng ta đang tìm hiểu trong bài viết).</p>\n<h1 id=\"2-CRuby-MRI-YARV-KRI\"><a href=\"#2-CRuby-MRI-YARV-KRI\" class=\"headerlink\" title=\"2. CRuby, MRI, YARV, KRI\"></a>2. CRuby, MRI, YARV, KRI</h1><p>Để kiểm tra xem ruby trên máy tính của bạn đang sử dụng trình thông dịch nào, hãy mở <code>irb</code> và sử dụng lệnh sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RbConfig::CONFIG[<span class=\"string\">\"RUBY_INSTALL_NAME\"</span>]</span><br><span class=\"line\"><span class=\"comment\">#=&gt; kết quả trả về trên máy của tôi là: ruby</span></span><br></pre></td></tr></table></figure>\n<p>Điều này có nghĩa tôi đang sử dụng trình thông dịch mặc định trong ruby. Được gọi là <code>MRI</code>/<code>CRuby</code> hay phiên bản nâng cấp sau này là <code>YARV</code>/<code>KRI</code>. Giải thích về việc có nhiều tên gọi như trên, tôi xin trích dẫn các thông tin trên wiki và trình thông dịch này:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Matz&apos;s Ruby Interpreter or Ruby MRI (also called CRuby)</span><br><span class=\"line\">was the reference implementation of the Ruby programming language</span><br><span class=\"line\">named after Ruby creator Yukihiro Matsumoto (&quot;Matz&quot;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YARV (Yet another Ruby VM) is a bytecode interpreter that</span><br><span class=\"line\">was developed for the Ruby programming language by Koichi Sasada.</span><br><span class=\"line\">The goal of the project was to greatly reduce the execution time of Ruby programs.</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Since YARV has become the official Ruby interpreter for Ruby 1.9,</span><br><span class=\"line\">it is also named KRI (Koichi&apos;s Ruby Interpreter),</span><br><span class=\"line\">in the same vein as the original Ruby MRI,</span><br><span class=\"line\">named for Ruby&apos;s creator Yukihiro Matsumoto.</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YARV was merged into the Ruby Subversion repository on January 1, 2007.</span><br><span class=\"line\">It was released as part of Ruby 1.9.0 on December 26, 2007, replacing Ruby MRI.</span><br></pre></td></tr></table></figure>\n\n<p>Qua vài trích dẫn kể trên, bạn có thể thấy đơn giản những khái niệm <code>CRuby</code>, <code>YARV</code>, <code>MRI</code>, <code>KRI</code> đều nhằm mô tả về một trình thông dịch được sử dụng mặc định cho ruby (tuỳ phiên bản sẽ có khác nhau, hiểu theo nghĩa là một sự update thay vì là thay thế).</p>\n<h1 id=\"3-JRuby\"><a href=\"#3-JRuby\" class=\"headerlink\" title=\"3. JRuby\"></a>3. JRuby</h1><p>Còn một vài trình thông dịch khác mà tôi đã đọc được, nhưng <code>JRuby</code> là phần cuối mà chúng ta sẽ tìm hiểu, vì những những trình thông dịch còn lại không được phổ biến cho lắm.</p>\n<p><code>JRuby</code> = <code>Java</code> + <code>Ruby</code></p>\n<p>Tức là dùng phần java làm core để chạy máy ảo xử lý code ruby. Sự khác biệt với mục 2,chính là ở mục 2, dù dưới tên gọi hay phiên bản nào, thì những trình thông dịch đó đều sử dụng <code>C</code> làm ngôn ngữ xây dựng.</p>\n<p>Một số ý kiến xoay quanh <code>JRuby</code></p>\n<p>| 1: JRuby nhanh hơn đáng kể với trình thông dịch mặc định trong ruby, có lợi thế mạnh mẽ khi xử lý đa luồng.</p>\n<p>| 2: Tuy nhiên đồng nghĩa với điều đó là việc <code>JRuby</code> chiếm dụng bộ nhớ nhiều hơn và mất thời gian hơn để khởi động.</p>\n<p>Vậy sẽ là một thảm hoạ nếu sử dụng <code>JRuby</code> để làm trình thông dịch cho ruby trong những ứng dụng nhỏ, hoạt động đơn giản và không cần tốc độ quá cao.</p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Trên đây là một số khái quát về lịch sử và hành trình của các trình thông dịch Ruby. Nếu có sai xót, xin hãy để lại bình luận ở dưới bài viết.</p>\n"},{"title":"Quy Luật 80/20","date":"2019-02-21T17:00:00.000Z","draft":false,"mytag":"#TIR","_content":"\nMọi người hầu như ai cũng biết quy luật 80/20.\n\nVà cũng nhiều người ứng dụng triệt để. Họ cố gắng dùng 20% công sức của mình để đạt được 80% giá trị, và tự hào vì sự hiệu quả của mình.\n\nNhưng họ quên một điều.\n\nĐúng là 20% công sức đầu tiên tạo nên 80% giá trị, nhưng là 80% giá trị phổ thông.\n\nChính 20% giá trị còn lại mới tạo nên 80% khác biệt. Và cũng chính 20% khác biệt sau cùng đó mới là thứ tạo nên thành công.\n\nBạn có thể bỏ 20% công sức là đủ chơi thuần thục guitar 80%.\n\nNhưng chính 20% độ khó cuối cùng mới tạo nên một tay guitar thượng hạng.\n\nBạn có thể bỏ 20% công sức, thậm chí ít hơn, để tạo nên một trang mạng xã hội bằng 80% Facebook.\n\nNhưng chính 20% còn lại khiến Facebook là Facebook.\n\nBạn có thể bỏ chỉ 20% công sức để tập tành và giống người thành đạt 80%.\n\nNhưng chính 20% cuối cùng mới thực sự khiến bạn trở nên thành đạt.\n\nTrong nhiều trò chơi quan trọng nhất cuộc đời không có chỗ cho sự nửa vời. Hãy nhớ rằng 20% xao nhãng đủ để làm nên 80% thất bại.\n\nHãy nghĩ lại đi, tại sao con số 80 lại nằm trước? Đó là vì bản chất của nó nhấn mạnh rằng 80% gian khổ mới là thứ tạo nên 20% quý giá cuối cùng.\n\n`- trích dẫn Ecoblader -`\n","source":"_posts/2019-02-22-quy-luat-80-20.md","raw":"---\ntitle: \"Quy Luật 80/20\"\ndate: 2019-02-22\ndraft: false\ntags: [\"random\"]\ncategories: [\"Random\"]\nmytag: \"#TIR\"\n---\n\nMọi người hầu như ai cũng biết quy luật 80/20.\n\nVà cũng nhiều người ứng dụng triệt để. Họ cố gắng dùng 20% công sức của mình để đạt được 80% giá trị, và tự hào vì sự hiệu quả của mình.\n\nNhưng họ quên một điều.\n\nĐúng là 20% công sức đầu tiên tạo nên 80% giá trị, nhưng là 80% giá trị phổ thông.\n\nChính 20% giá trị còn lại mới tạo nên 80% khác biệt. Và cũng chính 20% khác biệt sau cùng đó mới là thứ tạo nên thành công.\n\nBạn có thể bỏ 20% công sức là đủ chơi thuần thục guitar 80%.\n\nNhưng chính 20% độ khó cuối cùng mới tạo nên một tay guitar thượng hạng.\n\nBạn có thể bỏ 20% công sức, thậm chí ít hơn, để tạo nên một trang mạng xã hội bằng 80% Facebook.\n\nNhưng chính 20% còn lại khiến Facebook là Facebook.\n\nBạn có thể bỏ chỉ 20% công sức để tập tành và giống người thành đạt 80%.\n\nNhưng chính 20% cuối cùng mới thực sự khiến bạn trở nên thành đạt.\n\nTrong nhiều trò chơi quan trọng nhất cuộc đời không có chỗ cho sự nửa vời. Hãy nhớ rằng 20% xao nhãng đủ để làm nên 80% thất bại.\n\nHãy nghĩ lại đi, tại sao con số 80 lại nằm trước? Đó là vì bản chất của nó nhấn mạnh rằng 80% gian khổ mới là thứ tạo nên 20% quý giá cuối cùng.\n\n`- trích dẫn Ecoblader -`\n","slug":"2019-02-22-quy-luat-80-20","published":1,"updated":"2019-11-13T04:00:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7sufb000j5rrs9lnyd6jv","content":"<p>Mọi người hầu như ai cũng biết quy luật 80/20.</p>\n<p>Và cũng nhiều người ứng dụng triệt để. Họ cố gắng dùng 20% công sức của mình để đạt được 80% giá trị, và tự hào vì sự hiệu quả của mình.</p>\n<p>Nhưng họ quên một điều.</p>\n<p>Đúng là 20% công sức đầu tiên tạo nên 80% giá trị, nhưng là 80% giá trị phổ thông.</p>\n<p>Chính 20% giá trị còn lại mới tạo nên 80% khác biệt. Và cũng chính 20% khác biệt sau cùng đó mới là thứ tạo nên thành công.</p>\n<p>Bạn có thể bỏ 20% công sức là đủ chơi thuần thục guitar 80%.</p>\n<p>Nhưng chính 20% độ khó cuối cùng mới tạo nên một tay guitar thượng hạng.</p>\n<p>Bạn có thể bỏ 20% công sức, thậm chí ít hơn, để tạo nên một trang mạng xã hội bằng 80% Facebook.</p>\n<p>Nhưng chính 20% còn lại khiến Facebook là Facebook.</p>\n<p>Bạn có thể bỏ chỉ 20% công sức để tập tành và giống người thành đạt 80%.</p>\n<p>Nhưng chính 20% cuối cùng mới thực sự khiến bạn trở nên thành đạt.</p>\n<p>Trong nhiều trò chơi quan trọng nhất cuộc đời không có chỗ cho sự nửa vời. Hãy nhớ rằng 20% xao nhãng đủ để làm nên 80% thất bại.</p>\n<p>Hãy nghĩ lại đi, tại sao con số 80 lại nằm trước? Đó là vì bản chất của nó nhấn mạnh rằng 80% gian khổ mới là thứ tạo nên 20% quý giá cuối cùng.</p>\n<p><code>- trích dẫn Ecoblader -</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Mọi người hầu như ai cũng biết quy luật 80/20.</p>\n<p>Và cũng nhiều người ứng dụng triệt để. Họ cố gắng dùng 20% công sức của mình để đạt được 80% giá trị, và tự hào vì sự hiệu quả của mình.</p>\n<p>Nhưng họ quên một điều.</p>\n<p>Đúng là 20% công sức đầu tiên tạo nên 80% giá trị, nhưng là 80% giá trị phổ thông.</p>\n<p>Chính 20% giá trị còn lại mới tạo nên 80% khác biệt. Và cũng chính 20% khác biệt sau cùng đó mới là thứ tạo nên thành công.</p>\n<p>Bạn có thể bỏ 20% công sức là đủ chơi thuần thục guitar 80%.</p>\n<p>Nhưng chính 20% độ khó cuối cùng mới tạo nên một tay guitar thượng hạng.</p>\n<p>Bạn có thể bỏ 20% công sức, thậm chí ít hơn, để tạo nên một trang mạng xã hội bằng 80% Facebook.</p>\n<p>Nhưng chính 20% còn lại khiến Facebook là Facebook.</p>\n<p>Bạn có thể bỏ chỉ 20% công sức để tập tành và giống người thành đạt 80%.</p>\n<p>Nhưng chính 20% cuối cùng mới thực sự khiến bạn trở nên thành đạt.</p>\n<p>Trong nhiều trò chơi quan trọng nhất cuộc đời không có chỗ cho sự nửa vời. Hãy nhớ rằng 20% xao nhãng đủ để làm nên 80% thất bại.</p>\n<p>Hãy nghĩ lại đi, tại sao con số 80 lại nằm trước? Đó là vì bản chất của nó nhấn mạnh rằng 80% gian khổ mới là thứ tạo nên 20% quý giá cuối cùng.</p>\n<p><code>- trích dẫn Ecoblader -</code></p>\n"},{"title":"Lưu Trữ Thông Tin Bảo Mật?","date":"2019-02-21T17:00:00.000Z","draft":false,"mytag":"Rails","mytrend":"COOL","_content":"\n# Đặt vấn đề\n\nKhi còn Interns tại Framgia, trong một sản phẩm bắt buộc của chương trình thực tập, tôi còn nhớ, mentor đã yêu cầu tôi làm chức năng gửi mail cho ứng dụng rails. Đây thực sự là một task khó với một người non nớt kinh nghiệm như tôi khi đấy, mà ráng google một lát cũng tìm ra cách làm và áp dụng thành công, tạo PR lòng hân hoan, nào ngờ ngay sau đó tôi đã bị mentor mạt sát một trận kinh hoàng. Nguyên nhân là do trong lúc config môi trường để gửi mail, tôi đã để thông tin email của tôi vào file config và commit lên github, lúc đó nghĩ bụng cũng tức \"Gì mà làm khó nhau quá vậy? Interns không lương thôi mà làm gì ghê, commit lên đó thì sao...\". Giờ thì hiển nhiên là tôi nhìn nhận được sai lầm đó, và hiểu được những hiểu biết mù mờ về config và bảo mật sẽ khiến ứng dụng của tôi dễ tan tành như thế nào. Ngoài thông tin như email, trong dự án của chúng ta đôi khi còn những thông tin vô cùng quan trọng như key của dịch vụ lưu trữ đám mây, thông tin đăng nhập bên thứ ba, hay một chuỗi bí ẩn được gọi dưới cái tên `secret_key`. Bài viết này sẽ trình bày về cách xử lý những thông tin nhạy cảm kể trên.\n\n# Luận bàn\n\n# 1. Khái quát\n\nBài toán này đơn giản hiểu như sau: Một project bất kỳ sẽ luôn có những thông tin cấu hình vô cùng quan trọng, bắt buộc phải luôn giữ chúng private, còn làm cách nào để giữ chúng private trong rails?\nCâu trả lời là tuỳ vào mỗi phiên bản rails, sẽ có (có thể có) những cách khác nhau để xử lý vấn đề này. Hãy đi đến các dấu mốc cụ thể dưới đây.\n\n# 2. Rails 4.1\n\nPhiên bản rails này sử dụng một file có tên `secrets.yml`, đây là file sẽ lưu toàn bộ các thông tin nhạy cảm chúng ta đã nói ở trên.\nVới thiết kế như này ta có hai lựa chọn cho ứng dụng của mình:\n1. Đem hết thông tin nhạy cảm dưới đạng text bỏ vào file này, tuy nhiên file này phải được bỏ vào trong danh mục của `gitignore` để đảm bảo thông tin trong đó không bị bạn vô tình hay hữu ý commit đi đâu đó.\n\n2. Thông tin nhạy cảm lưu trong file này thay vì được lưu dưới dạng text thì sẽ được lưu trong máy của bạn dứoi dạng `biến môi trường` và trong file `secrets.yml` chỉ sử dụng phương thức `ENV` mà rails cung cấp để gọi lại các thông tin đó lên, với lựa chọn này bạn có thể commit file này thoải mái, ở các máy tính đồng nghiệp, để có thể sử dụng được những config này thì buộc họ phải thiết lập biến môi trường trên máy tính của họ cho phù hợp.\n\nNhược điểm: dù sử dụng cách nào, thì để ứng dụng hoạt động được thì vẫn phải truyền giá trị các thông tin nhạy cảm này từ máy của bạn lên một con vps khi triển khai chẳng hạn, không còn cách nào khác. Có thể bạn phải copy từng dòng thông tin nhạy cảm rồi paste qua remote shell để thiết lập (với những dự án lớn có rất nhiều thông tin quan trọng thì đây là 1 công việc vất vả tiềm tàng nguy cơ sai sót).\n\nNote: Thay vì sử dụng file `secrets.yml`, ta có thể sử dụng một file khác như `application.yml`, mục đích và chức năng của chúng là tương đương.\n\n# 3. Rails 5.1\n\nSang đến phiên bản rails 5.1, một thay đổi lớn đã tới. Thay vì lưu thông tin dạng text hoặc triệu hồi thông qua biến môi trường, rails khi này cung cấp khả năng mã hoá cho các thông tin nhạy cảm này.\nCách chúng hoạt động như sau:\n\nMột file tên `secrets.yml.key` sẽ chứa giá trị của một biến tên `RAILS_MASTER_KEY`, biến này có giá trị là một chuỗi, có chức năng được sử dụng để mã hoá và giải mã các thông tin quan trọng.\n\nNội dung thông tin **sau** mã hoá sẽ được lưu tại file `secrets.yml.enc`\n\nVậy còn file `secrets.yml` trong rails 4 giờ còn không? Câu trả lời là bạn vẫn có thể sử dụng file này, tuy nhiên trên cùng một môi trường, nếu có cả file `secrets.yml` và `secrets.yml.enc` thì hai file này sẽ được merge.\n\nĐể có thể sử dụng tính năng encypt này của rails 5.1 ta setup như sau:\n\n```ruby\nrails secrets:setup\n```\nSau câu lệnh này hai file `secrets.yml.key` và `secrets.yml.enc` sẽ được tạo ra. Để thêm xoá sửa nội dung trong `secrets.yml.enc` ta sử dụng lệnh sau:\n\n```ruby\nrails secrets:edit\n```\n\nCâu lệnh này sẽ mở nội dung file `secrets.yml.enc` dưới dạng đã giải mã. Bạn có thể thoải mái thêm xoá, sửa các thông tin nhạy cảm, sau đó khi bạn save lại và tắt editor thì file `secrets.yml.enc` sẽ tự động được cập nhập phần mã hoá mới nhất khi có thêm thông tin.\n\nTôi thích dùng `vim` để chỉnh sửa, và tôi không muốn set mặc định editor nên tôi sử dụng câu lệnh sau: `EDITOR=vi rails secrets:edit`.\n\nƯu điểm:\n\n1. Thay vì phải quản lý nhiều biến môi trường, giờ đây mọi thứ đều nằm trong một file.\n\n2. Việc có thể commit `secrets.yml.enc` giúp chúng ta nắm được lịch sử thay đổi của file này.\n\nNote: Một điểm quan trọng bạn cần lưu ý, đó là tới khi viết bài viết này thì tôi vẫn chưa thấy rails sẽ giải mã thông tin mã hoá trong file `secrets.yml.enc`, chúng ta buộc phải làm thủ công để nhắc rails làm điều đó bằng cách thêm vào config file của bạn `config.read_encrypted_secrets = true`. Với câu lệnh setup bên trên, dòng config trên đã được add vào file config của production. Nếu bạn muốn sử dụng tính năng này cho môi trường development thì hãy thêm dòng config này vào file `config/environments/development.rb`.\n\n# 3. Rails 5.2\n\nÝ tưởng trong rails 5.2 không thay đổi nhiều so với rails 5.1. Nhưng thay vì lưu key để encrypt/decrypt trong file secrets.yml.key giờ nó được lưu trong file `master.key` (tuy nhiên nếu không sử dụng file thì cả rails 5.2 và 5.1 đều có thể gọi biến môi trường RAILS_MASTER_KEY để sử dụng).\n\nFile lưu thông tin đã được mã hoá cũng được thay đổi từ secrets.yml.enc thành `credentials.yml.enc`.  Đó là những điểm khác biệt duy nhất.\n\nĐể chỉnh sửa thông tin trong file mã hoá ta sử dụng lệnh:\n\n```ruby\nEDITOR=vi rails credentials:edit\n```\nKhông cần dùng lệnh setup như trên, vì trong rails 5.2, hai file key và mã hoá được sinh ra cùng project.\n\nTa có thể truy xuất giá trị được giải mã trong file `credentials.yml.enc` như sau:\n\n```ruby\nRails.application.credentials.ten_bien_trong_credentials\n```\n\nLàm gì khi bạn muốn thay thế `master.key`?\n\n1. `rails credentials:show` dùng lệnh này để hiển thị thông tin dạng giải mã ra editor, copy chúng.\n\n2. Xoá hai file `master.key` và `credentials.yml.enc` đi.\n\n3. `EDITOR=vim rails credentials:edit` với lệnh sau bạn sẽ generate lại hai file mới. Việc cần làm bây giờ là paste thông tin ở bước 1 vào editor khi này rồi save lại.\n\n# 4. secret_key_base\n\nNếu làm theo hướng dẫn bên trên, ta sẽ thu được một file mã hoá ví dụ: `credentials.yml.enc` có chứa nội dung ngay cả khi ta mới vừa khởi tạo project. Điều gì đã xảy ra? Tôi còn chưa kịp edit thì nó lấy thông tin gì mà mã hoá ra nội dung đó vậy? Câu trả lời là một thứ được tạo kèm project của bạn có tên là `secret_key_base` sẽ là thứ đầu tiên được tự động lưu mã hoá vào file `credentials.yml.enc`.\n\nSao lại phức tạp như vậy? nó với `RAILS_MASTER_KEY` ở trên có quan hệ gì không? Câu trả lời là không? `secret_key_base` được rails sinh ra khi tạo project, nó đảm bảo rằng không thể có hai ứng dụng rails có chung một `secet_key_base`, cái key sẽ được sử dụng để đảo bảo thứ đánh dấu tính duy nhất của một project và nó còn được dùng làm nhiều việc hay ho khác tôi sẽ trình bày trong các bài viết sắp tới.\n\nĐể tạo ra một secret_key_base bạn có thể sử dụng lệnh sau:\n\n```ruby\nrails secret\n```\n\n# Kết luận\n\nHãy để lại bình luận bên dưới nếu bạn có ý kiến khác hoặc phản hồi về nội dung bài viết nhé.\n","source":"_posts/2019-02-22-xu-ly-thong-tin-quan-trong-trong-rails.md","raw":"---\ntitle: \"Lưu Trữ Thông Tin Bảo Mật?\"\ndate: 2019-02-22\ndraft: false\ntags: [\"secure\", \"rails\"]\ncategories: [\"rails notes\"]\nmytag: \"Rails\"\nmytrend: \"COOL\"\n---\n\n# Đặt vấn đề\n\nKhi còn Interns tại Framgia, trong một sản phẩm bắt buộc của chương trình thực tập, tôi còn nhớ, mentor đã yêu cầu tôi làm chức năng gửi mail cho ứng dụng rails. Đây thực sự là một task khó với một người non nớt kinh nghiệm như tôi khi đấy, mà ráng google một lát cũng tìm ra cách làm và áp dụng thành công, tạo PR lòng hân hoan, nào ngờ ngay sau đó tôi đã bị mentor mạt sát một trận kinh hoàng. Nguyên nhân là do trong lúc config môi trường để gửi mail, tôi đã để thông tin email của tôi vào file config và commit lên github, lúc đó nghĩ bụng cũng tức \"Gì mà làm khó nhau quá vậy? Interns không lương thôi mà làm gì ghê, commit lên đó thì sao...\". Giờ thì hiển nhiên là tôi nhìn nhận được sai lầm đó, và hiểu được những hiểu biết mù mờ về config và bảo mật sẽ khiến ứng dụng của tôi dễ tan tành như thế nào. Ngoài thông tin như email, trong dự án của chúng ta đôi khi còn những thông tin vô cùng quan trọng như key của dịch vụ lưu trữ đám mây, thông tin đăng nhập bên thứ ba, hay một chuỗi bí ẩn được gọi dưới cái tên `secret_key`. Bài viết này sẽ trình bày về cách xử lý những thông tin nhạy cảm kể trên.\n\n# Luận bàn\n\n# 1. Khái quát\n\nBài toán này đơn giản hiểu như sau: Một project bất kỳ sẽ luôn có những thông tin cấu hình vô cùng quan trọng, bắt buộc phải luôn giữ chúng private, còn làm cách nào để giữ chúng private trong rails?\nCâu trả lời là tuỳ vào mỗi phiên bản rails, sẽ có (có thể có) những cách khác nhau để xử lý vấn đề này. Hãy đi đến các dấu mốc cụ thể dưới đây.\n\n# 2. Rails 4.1\n\nPhiên bản rails này sử dụng một file có tên `secrets.yml`, đây là file sẽ lưu toàn bộ các thông tin nhạy cảm chúng ta đã nói ở trên.\nVới thiết kế như này ta có hai lựa chọn cho ứng dụng của mình:\n1. Đem hết thông tin nhạy cảm dưới đạng text bỏ vào file này, tuy nhiên file này phải được bỏ vào trong danh mục của `gitignore` để đảm bảo thông tin trong đó không bị bạn vô tình hay hữu ý commit đi đâu đó.\n\n2. Thông tin nhạy cảm lưu trong file này thay vì được lưu dưới dạng text thì sẽ được lưu trong máy của bạn dứoi dạng `biến môi trường` và trong file `secrets.yml` chỉ sử dụng phương thức `ENV` mà rails cung cấp để gọi lại các thông tin đó lên, với lựa chọn này bạn có thể commit file này thoải mái, ở các máy tính đồng nghiệp, để có thể sử dụng được những config này thì buộc họ phải thiết lập biến môi trường trên máy tính của họ cho phù hợp.\n\nNhược điểm: dù sử dụng cách nào, thì để ứng dụng hoạt động được thì vẫn phải truyền giá trị các thông tin nhạy cảm này từ máy của bạn lên một con vps khi triển khai chẳng hạn, không còn cách nào khác. Có thể bạn phải copy từng dòng thông tin nhạy cảm rồi paste qua remote shell để thiết lập (với những dự án lớn có rất nhiều thông tin quan trọng thì đây là 1 công việc vất vả tiềm tàng nguy cơ sai sót).\n\nNote: Thay vì sử dụng file `secrets.yml`, ta có thể sử dụng một file khác như `application.yml`, mục đích và chức năng của chúng là tương đương.\n\n# 3. Rails 5.1\n\nSang đến phiên bản rails 5.1, một thay đổi lớn đã tới. Thay vì lưu thông tin dạng text hoặc triệu hồi thông qua biến môi trường, rails khi này cung cấp khả năng mã hoá cho các thông tin nhạy cảm này.\nCách chúng hoạt động như sau:\n\nMột file tên `secrets.yml.key` sẽ chứa giá trị của một biến tên `RAILS_MASTER_KEY`, biến này có giá trị là một chuỗi, có chức năng được sử dụng để mã hoá và giải mã các thông tin quan trọng.\n\nNội dung thông tin **sau** mã hoá sẽ được lưu tại file `secrets.yml.enc`\n\nVậy còn file `secrets.yml` trong rails 4 giờ còn không? Câu trả lời là bạn vẫn có thể sử dụng file này, tuy nhiên trên cùng một môi trường, nếu có cả file `secrets.yml` và `secrets.yml.enc` thì hai file này sẽ được merge.\n\nĐể có thể sử dụng tính năng encypt này của rails 5.1 ta setup như sau:\n\n```ruby\nrails secrets:setup\n```\nSau câu lệnh này hai file `secrets.yml.key` và `secrets.yml.enc` sẽ được tạo ra. Để thêm xoá sửa nội dung trong `secrets.yml.enc` ta sử dụng lệnh sau:\n\n```ruby\nrails secrets:edit\n```\n\nCâu lệnh này sẽ mở nội dung file `secrets.yml.enc` dưới dạng đã giải mã. Bạn có thể thoải mái thêm xoá, sửa các thông tin nhạy cảm, sau đó khi bạn save lại và tắt editor thì file `secrets.yml.enc` sẽ tự động được cập nhập phần mã hoá mới nhất khi có thêm thông tin.\n\nTôi thích dùng `vim` để chỉnh sửa, và tôi không muốn set mặc định editor nên tôi sử dụng câu lệnh sau: `EDITOR=vi rails secrets:edit`.\n\nƯu điểm:\n\n1. Thay vì phải quản lý nhiều biến môi trường, giờ đây mọi thứ đều nằm trong một file.\n\n2. Việc có thể commit `secrets.yml.enc` giúp chúng ta nắm được lịch sử thay đổi của file này.\n\nNote: Một điểm quan trọng bạn cần lưu ý, đó là tới khi viết bài viết này thì tôi vẫn chưa thấy rails sẽ giải mã thông tin mã hoá trong file `secrets.yml.enc`, chúng ta buộc phải làm thủ công để nhắc rails làm điều đó bằng cách thêm vào config file của bạn `config.read_encrypted_secrets = true`. Với câu lệnh setup bên trên, dòng config trên đã được add vào file config của production. Nếu bạn muốn sử dụng tính năng này cho môi trường development thì hãy thêm dòng config này vào file `config/environments/development.rb`.\n\n# 3. Rails 5.2\n\nÝ tưởng trong rails 5.2 không thay đổi nhiều so với rails 5.1. Nhưng thay vì lưu key để encrypt/decrypt trong file secrets.yml.key giờ nó được lưu trong file `master.key` (tuy nhiên nếu không sử dụng file thì cả rails 5.2 và 5.1 đều có thể gọi biến môi trường RAILS_MASTER_KEY để sử dụng).\n\nFile lưu thông tin đã được mã hoá cũng được thay đổi từ secrets.yml.enc thành `credentials.yml.enc`.  Đó là những điểm khác biệt duy nhất.\n\nĐể chỉnh sửa thông tin trong file mã hoá ta sử dụng lệnh:\n\n```ruby\nEDITOR=vi rails credentials:edit\n```\nKhông cần dùng lệnh setup như trên, vì trong rails 5.2, hai file key và mã hoá được sinh ra cùng project.\n\nTa có thể truy xuất giá trị được giải mã trong file `credentials.yml.enc` như sau:\n\n```ruby\nRails.application.credentials.ten_bien_trong_credentials\n```\n\nLàm gì khi bạn muốn thay thế `master.key`?\n\n1. `rails credentials:show` dùng lệnh này để hiển thị thông tin dạng giải mã ra editor, copy chúng.\n\n2. Xoá hai file `master.key` và `credentials.yml.enc` đi.\n\n3. `EDITOR=vim rails credentials:edit` với lệnh sau bạn sẽ generate lại hai file mới. Việc cần làm bây giờ là paste thông tin ở bước 1 vào editor khi này rồi save lại.\n\n# 4. secret_key_base\n\nNếu làm theo hướng dẫn bên trên, ta sẽ thu được một file mã hoá ví dụ: `credentials.yml.enc` có chứa nội dung ngay cả khi ta mới vừa khởi tạo project. Điều gì đã xảy ra? Tôi còn chưa kịp edit thì nó lấy thông tin gì mà mã hoá ra nội dung đó vậy? Câu trả lời là một thứ được tạo kèm project của bạn có tên là `secret_key_base` sẽ là thứ đầu tiên được tự động lưu mã hoá vào file `credentials.yml.enc`.\n\nSao lại phức tạp như vậy? nó với `RAILS_MASTER_KEY` ở trên có quan hệ gì không? Câu trả lời là không? `secret_key_base` được rails sinh ra khi tạo project, nó đảm bảo rằng không thể có hai ứng dụng rails có chung một `secet_key_base`, cái key sẽ được sử dụng để đảo bảo thứ đánh dấu tính duy nhất của một project và nó còn được dùng làm nhiều việc hay ho khác tôi sẽ trình bày trong các bài viết sắp tới.\n\nĐể tạo ra một secret_key_base bạn có thể sử dụng lệnh sau:\n\n```ruby\nrails secret\n```\n\n# Kết luận\n\nHãy để lại bình luận bên dưới nếu bạn có ý kiến khác hoặc phản hồi về nội dung bài viết nhé.\n","slug":"2019-02-22-xu-ly-thong-tin-quan-trong-trong-rails","published":1,"updated":"2019-11-13T04:01:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7sufd000m5rrs0fb9bm2l","content":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Khi còn Interns tại Framgia, trong một sản phẩm bắt buộc của chương trình thực tập, tôi còn nhớ, mentor đã yêu cầu tôi làm chức năng gửi mail cho ứng dụng rails. Đây thực sự là một task khó với một người non nớt kinh nghiệm như tôi khi đấy, mà ráng google một lát cũng tìm ra cách làm và áp dụng thành công, tạo PR lòng hân hoan, nào ngờ ngay sau đó tôi đã bị mentor mạt sát một trận kinh hoàng. Nguyên nhân là do trong lúc config môi trường để gửi mail, tôi đã để thông tin email của tôi vào file config và commit lên github, lúc đó nghĩ bụng cũng tức “Gì mà làm khó nhau quá vậy? Interns không lương thôi mà làm gì ghê, commit lên đó thì sao…”. Giờ thì hiển nhiên là tôi nhìn nhận được sai lầm đó, và hiểu được những hiểu biết mù mờ về config và bảo mật sẽ khiến ứng dụng của tôi dễ tan tành như thế nào. Ngoài thông tin như email, trong dự án của chúng ta đôi khi còn những thông tin vô cùng quan trọng như key của dịch vụ lưu trữ đám mây, thông tin đăng nhập bên thứ ba, hay một chuỗi bí ẩn được gọi dưới cái tên <code>secret_key</code>. Bài viết này sẽ trình bày về cách xử lý những thông tin nhạy cảm kể trên.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-Khai-quat\"><a href=\"#1-Khai-quat\" class=\"headerlink\" title=\"1. Khái quát\"></a>1. Khái quát</h1><p>Bài toán này đơn giản hiểu như sau: Một project bất kỳ sẽ luôn có những thông tin cấu hình vô cùng quan trọng, bắt buộc phải luôn giữ chúng private, còn làm cách nào để giữ chúng private trong rails?<br>Câu trả lời là tuỳ vào mỗi phiên bản rails, sẽ có (có thể có) những cách khác nhau để xử lý vấn đề này. Hãy đi đến các dấu mốc cụ thể dưới đây.</p>\n<h1 id=\"2-Rails-4-1\"><a href=\"#2-Rails-4-1\" class=\"headerlink\" title=\"2. Rails 4.1\"></a>2. Rails 4.1</h1><p>Phiên bản rails này sử dụng một file có tên <code>secrets.yml</code>, đây là file sẽ lưu toàn bộ các thông tin nhạy cảm chúng ta đã nói ở trên.<br>Với thiết kế như này ta có hai lựa chọn cho ứng dụng của mình:</p>\n<ol>\n<li><p>Đem hết thông tin nhạy cảm dưới đạng text bỏ vào file này, tuy nhiên file này phải được bỏ vào trong danh mục của <code>gitignore</code> để đảm bảo thông tin trong đó không bị bạn vô tình hay hữu ý commit đi đâu đó.</p>\n</li>\n<li><p>Thông tin nhạy cảm lưu trong file này thay vì được lưu dưới dạng text thì sẽ được lưu trong máy của bạn dứoi dạng <code>biến môi trường</code> và trong file <code>secrets.yml</code> chỉ sử dụng phương thức <code>ENV</code> mà rails cung cấp để gọi lại các thông tin đó lên, với lựa chọn này bạn có thể commit file này thoải mái, ở các máy tính đồng nghiệp, để có thể sử dụng được những config này thì buộc họ phải thiết lập biến môi trường trên máy tính của họ cho phù hợp.</p>\n</li>\n</ol>\n<p>Nhược điểm: dù sử dụng cách nào, thì để ứng dụng hoạt động được thì vẫn phải truyền giá trị các thông tin nhạy cảm này từ máy của bạn lên một con vps khi triển khai chẳng hạn, không còn cách nào khác. Có thể bạn phải copy từng dòng thông tin nhạy cảm rồi paste qua remote shell để thiết lập (với những dự án lớn có rất nhiều thông tin quan trọng thì đây là 1 công việc vất vả tiềm tàng nguy cơ sai sót).</p>\n<p>Note: Thay vì sử dụng file <code>secrets.yml</code>, ta có thể sử dụng một file khác như <code>application.yml</code>, mục đích và chức năng của chúng là tương đương.</p>\n<h1 id=\"3-Rails-5-1\"><a href=\"#3-Rails-5-1\" class=\"headerlink\" title=\"3. Rails 5.1\"></a>3. Rails 5.1</h1><p>Sang đến phiên bản rails 5.1, một thay đổi lớn đã tới. Thay vì lưu thông tin dạng text hoặc triệu hồi thông qua biến môi trường, rails khi này cung cấp khả năng mã hoá cho các thông tin nhạy cảm này.<br>Cách chúng hoạt động như sau:</p>\n<p>Một file tên <code>secrets.yml.key</code> sẽ chứa giá trị của một biến tên <code>RAILS_MASTER_KEY</code>, biến này có giá trị là một chuỗi, có chức năng được sử dụng để mã hoá và giải mã các thông tin quan trọng.</p>\n<p>Nội dung thông tin <strong>sau</strong> mã hoá sẽ được lưu tại file <code>secrets.yml.enc</code></p>\n<p>Vậy còn file <code>secrets.yml</code> trong rails 4 giờ còn không? Câu trả lời là bạn vẫn có thể sử dụng file này, tuy nhiên trên cùng một môi trường, nếu có cả file <code>secrets.yml</code> và <code>secrets.yml.enc</code> thì hai file này sẽ được merge.</p>\n<p>Để có thể sử dụng tính năng encypt này của rails 5.1 ta setup như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rails <span class=\"symbol\">secrets:</span>setup</span><br></pre></td></tr></table></figure>\n<p>Sau câu lệnh này hai file <code>secrets.yml.key</code> và <code>secrets.yml.enc</code> sẽ được tạo ra. Để thêm xoá sửa nội dung trong <code>secrets.yml.enc</code> ta sử dụng lệnh sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rails <span class=\"symbol\">secrets:</span>edit</span><br></pre></td></tr></table></figure>\n\n<p>Câu lệnh này sẽ mở nội dung file <code>secrets.yml.enc</code> dưới dạng đã giải mã. Bạn có thể thoải mái thêm xoá, sửa các thông tin nhạy cảm, sau đó khi bạn save lại và tắt editor thì file <code>secrets.yml.enc</code> sẽ tự động được cập nhập phần mã hoá mới nhất khi có thêm thông tin.</p>\n<p>Tôi thích dùng <code>vim</code> để chỉnh sửa, và tôi không muốn set mặc định editor nên tôi sử dụng câu lệnh sau: <code>EDITOR=vi rails secrets:edit</code>.</p>\n<p>Ưu điểm:</p>\n<ol>\n<li><p>Thay vì phải quản lý nhiều biến môi trường, giờ đây mọi thứ đều nằm trong một file.</p>\n</li>\n<li><p>Việc có thể commit <code>secrets.yml.enc</code> giúp chúng ta nắm được lịch sử thay đổi của file này.</p>\n</li>\n</ol>\n<p>Note: Một điểm quan trọng bạn cần lưu ý, đó là tới khi viết bài viết này thì tôi vẫn chưa thấy rails sẽ giải mã thông tin mã hoá trong file <code>secrets.yml.enc</code>, chúng ta buộc phải làm thủ công để nhắc rails làm điều đó bằng cách thêm vào config file của bạn <code>config.read_encrypted_secrets = true</code>. Với câu lệnh setup bên trên, dòng config trên đã được add vào file config của production. Nếu bạn muốn sử dụng tính năng này cho môi trường development thì hãy thêm dòng config này vào file <code>config/environments/development.rb</code>.</p>\n<h1 id=\"3-Rails-5-2\"><a href=\"#3-Rails-5-2\" class=\"headerlink\" title=\"3. Rails 5.2\"></a>3. Rails 5.2</h1><p>Ý tưởng trong rails 5.2 không thay đổi nhiều so với rails 5.1. Nhưng thay vì lưu key để encrypt/decrypt trong file secrets.yml.key giờ nó được lưu trong file <code>master.key</code> (tuy nhiên nếu không sử dụng file thì cả rails 5.2 và 5.1 đều có thể gọi biến môi trường RAILS_MASTER_KEY để sử dụng).</p>\n<p>File lưu thông tin đã được mã hoá cũng được thay đổi từ secrets.yml.enc thành <code>credentials.yml.enc</code>.  Đó là những điểm khác biệt duy nhất.</p>\n<p>Để chỉnh sửa thông tin trong file mã hoá ta sử dụng lệnh:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EDITOR=vi rails <span class=\"symbol\">credentials:</span>edit</span><br></pre></td></tr></table></figure>\n<p>Không cần dùng lệnh setup như trên, vì trong rails 5.2, hai file key và mã hoá được sinh ra cùng project.</p>\n<p>Ta có thể truy xuất giá trị được giải mã trong file <code>credentials.yml.enc</code> như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Rails.application.credentials.ten_bien_trong_credentials</span><br></pre></td></tr></table></figure>\n\n<p>Làm gì khi bạn muốn thay thế <code>master.key</code>?</p>\n<ol>\n<li><p><code>rails credentials:show</code> dùng lệnh này để hiển thị thông tin dạng giải mã ra editor, copy chúng.</p>\n</li>\n<li><p>Xoá hai file <code>master.key</code> và <code>credentials.yml.enc</code> đi.</p>\n</li>\n<li><p><code>EDITOR=vim rails credentials:edit</code> với lệnh sau bạn sẽ generate lại hai file mới. Việc cần làm bây giờ là paste thông tin ở bước 1 vào editor khi này rồi save lại.</p>\n</li>\n</ol>\n<h1 id=\"4-secret-key-base\"><a href=\"#4-secret-key-base\" class=\"headerlink\" title=\"4. secret_key_base\"></a>4. secret_key_base</h1><p>Nếu làm theo hướng dẫn bên trên, ta sẽ thu được một file mã hoá ví dụ: <code>credentials.yml.enc</code> có chứa nội dung ngay cả khi ta mới vừa khởi tạo project. Điều gì đã xảy ra? Tôi còn chưa kịp edit thì nó lấy thông tin gì mà mã hoá ra nội dung đó vậy? Câu trả lời là một thứ được tạo kèm project của bạn có tên là <code>secret_key_base</code> sẽ là thứ đầu tiên được tự động lưu mã hoá vào file <code>credentials.yml.enc</code>.</p>\n<p>Sao lại phức tạp như vậy? nó với <code>RAILS_MASTER_KEY</code> ở trên có quan hệ gì không? Câu trả lời là không? <code>secret_key_base</code> được rails sinh ra khi tạo project, nó đảm bảo rằng không thể có hai ứng dụng rails có chung một <code>secet_key_base</code>, cái key sẽ được sử dụng để đảo bảo thứ đánh dấu tính duy nhất của một project và nó còn được dùng làm nhiều việc hay ho khác tôi sẽ trình bày trong các bài viết sắp tới.</p>\n<p>Để tạo ra một secret_key_base bạn có thể sử dụng lệnh sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rails secret</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Hãy để lại bình luận bên dưới nếu bạn có ý kiến khác hoặc phản hồi về nội dung bài viết nhé.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Khi còn Interns tại Framgia, trong một sản phẩm bắt buộc của chương trình thực tập, tôi còn nhớ, mentor đã yêu cầu tôi làm chức năng gửi mail cho ứng dụng rails. Đây thực sự là một task khó với một người non nớt kinh nghiệm như tôi khi đấy, mà ráng google một lát cũng tìm ra cách làm và áp dụng thành công, tạo PR lòng hân hoan, nào ngờ ngay sau đó tôi đã bị mentor mạt sát một trận kinh hoàng. Nguyên nhân là do trong lúc config môi trường để gửi mail, tôi đã để thông tin email của tôi vào file config và commit lên github, lúc đó nghĩ bụng cũng tức “Gì mà làm khó nhau quá vậy? Interns không lương thôi mà làm gì ghê, commit lên đó thì sao…”. Giờ thì hiển nhiên là tôi nhìn nhận được sai lầm đó, và hiểu được những hiểu biết mù mờ về config và bảo mật sẽ khiến ứng dụng của tôi dễ tan tành như thế nào. Ngoài thông tin như email, trong dự án của chúng ta đôi khi còn những thông tin vô cùng quan trọng như key của dịch vụ lưu trữ đám mây, thông tin đăng nhập bên thứ ba, hay một chuỗi bí ẩn được gọi dưới cái tên <code>secret_key</code>. Bài viết này sẽ trình bày về cách xử lý những thông tin nhạy cảm kể trên.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-Khai-quat\"><a href=\"#1-Khai-quat\" class=\"headerlink\" title=\"1. Khái quát\"></a>1. Khái quát</h1><p>Bài toán này đơn giản hiểu như sau: Một project bất kỳ sẽ luôn có những thông tin cấu hình vô cùng quan trọng, bắt buộc phải luôn giữ chúng private, còn làm cách nào để giữ chúng private trong rails?<br>Câu trả lời là tuỳ vào mỗi phiên bản rails, sẽ có (có thể có) những cách khác nhau để xử lý vấn đề này. Hãy đi đến các dấu mốc cụ thể dưới đây.</p>\n<h1 id=\"2-Rails-4-1\"><a href=\"#2-Rails-4-1\" class=\"headerlink\" title=\"2. Rails 4.1\"></a>2. Rails 4.1</h1><p>Phiên bản rails này sử dụng một file có tên <code>secrets.yml</code>, đây là file sẽ lưu toàn bộ các thông tin nhạy cảm chúng ta đã nói ở trên.<br>Với thiết kế như này ta có hai lựa chọn cho ứng dụng của mình:</p>\n<ol>\n<li><p>Đem hết thông tin nhạy cảm dưới đạng text bỏ vào file này, tuy nhiên file này phải được bỏ vào trong danh mục của <code>gitignore</code> để đảm bảo thông tin trong đó không bị bạn vô tình hay hữu ý commit đi đâu đó.</p>\n</li>\n<li><p>Thông tin nhạy cảm lưu trong file này thay vì được lưu dưới dạng text thì sẽ được lưu trong máy của bạn dứoi dạng <code>biến môi trường</code> và trong file <code>secrets.yml</code> chỉ sử dụng phương thức <code>ENV</code> mà rails cung cấp để gọi lại các thông tin đó lên, với lựa chọn này bạn có thể commit file này thoải mái, ở các máy tính đồng nghiệp, để có thể sử dụng được những config này thì buộc họ phải thiết lập biến môi trường trên máy tính của họ cho phù hợp.</p>\n</li>\n</ol>\n<p>Nhược điểm: dù sử dụng cách nào, thì để ứng dụng hoạt động được thì vẫn phải truyền giá trị các thông tin nhạy cảm này từ máy của bạn lên một con vps khi triển khai chẳng hạn, không còn cách nào khác. Có thể bạn phải copy từng dòng thông tin nhạy cảm rồi paste qua remote shell để thiết lập (với những dự án lớn có rất nhiều thông tin quan trọng thì đây là 1 công việc vất vả tiềm tàng nguy cơ sai sót).</p>\n<p>Note: Thay vì sử dụng file <code>secrets.yml</code>, ta có thể sử dụng một file khác như <code>application.yml</code>, mục đích và chức năng của chúng là tương đương.</p>\n<h1 id=\"3-Rails-5-1\"><a href=\"#3-Rails-5-1\" class=\"headerlink\" title=\"3. Rails 5.1\"></a>3. Rails 5.1</h1><p>Sang đến phiên bản rails 5.1, một thay đổi lớn đã tới. Thay vì lưu thông tin dạng text hoặc triệu hồi thông qua biến môi trường, rails khi này cung cấp khả năng mã hoá cho các thông tin nhạy cảm này.<br>Cách chúng hoạt động như sau:</p>\n<p>Một file tên <code>secrets.yml.key</code> sẽ chứa giá trị của một biến tên <code>RAILS_MASTER_KEY</code>, biến này có giá trị là một chuỗi, có chức năng được sử dụng để mã hoá và giải mã các thông tin quan trọng.</p>\n<p>Nội dung thông tin <strong>sau</strong> mã hoá sẽ được lưu tại file <code>secrets.yml.enc</code></p>\n<p>Vậy còn file <code>secrets.yml</code> trong rails 4 giờ còn không? Câu trả lời là bạn vẫn có thể sử dụng file này, tuy nhiên trên cùng một môi trường, nếu có cả file <code>secrets.yml</code> và <code>secrets.yml.enc</code> thì hai file này sẽ được merge.</p>\n<p>Để có thể sử dụng tính năng encypt này của rails 5.1 ta setup như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rails <span class=\"symbol\">secrets:</span>setup</span><br></pre></td></tr></table></figure>\n<p>Sau câu lệnh này hai file <code>secrets.yml.key</code> và <code>secrets.yml.enc</code> sẽ được tạo ra. Để thêm xoá sửa nội dung trong <code>secrets.yml.enc</code> ta sử dụng lệnh sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rails <span class=\"symbol\">secrets:</span>edit</span><br></pre></td></tr></table></figure>\n\n<p>Câu lệnh này sẽ mở nội dung file <code>secrets.yml.enc</code> dưới dạng đã giải mã. Bạn có thể thoải mái thêm xoá, sửa các thông tin nhạy cảm, sau đó khi bạn save lại và tắt editor thì file <code>secrets.yml.enc</code> sẽ tự động được cập nhập phần mã hoá mới nhất khi có thêm thông tin.</p>\n<p>Tôi thích dùng <code>vim</code> để chỉnh sửa, và tôi không muốn set mặc định editor nên tôi sử dụng câu lệnh sau: <code>EDITOR=vi rails secrets:edit</code>.</p>\n<p>Ưu điểm:</p>\n<ol>\n<li><p>Thay vì phải quản lý nhiều biến môi trường, giờ đây mọi thứ đều nằm trong một file.</p>\n</li>\n<li><p>Việc có thể commit <code>secrets.yml.enc</code> giúp chúng ta nắm được lịch sử thay đổi của file này.</p>\n</li>\n</ol>\n<p>Note: Một điểm quan trọng bạn cần lưu ý, đó là tới khi viết bài viết này thì tôi vẫn chưa thấy rails sẽ giải mã thông tin mã hoá trong file <code>secrets.yml.enc</code>, chúng ta buộc phải làm thủ công để nhắc rails làm điều đó bằng cách thêm vào config file của bạn <code>config.read_encrypted_secrets = true</code>. Với câu lệnh setup bên trên, dòng config trên đã được add vào file config của production. Nếu bạn muốn sử dụng tính năng này cho môi trường development thì hãy thêm dòng config này vào file <code>config/environments/development.rb</code>.</p>\n<h1 id=\"3-Rails-5-2\"><a href=\"#3-Rails-5-2\" class=\"headerlink\" title=\"3. Rails 5.2\"></a>3. Rails 5.2</h1><p>Ý tưởng trong rails 5.2 không thay đổi nhiều so với rails 5.1. Nhưng thay vì lưu key để encrypt/decrypt trong file secrets.yml.key giờ nó được lưu trong file <code>master.key</code> (tuy nhiên nếu không sử dụng file thì cả rails 5.2 và 5.1 đều có thể gọi biến môi trường RAILS_MASTER_KEY để sử dụng).</p>\n<p>File lưu thông tin đã được mã hoá cũng được thay đổi từ secrets.yml.enc thành <code>credentials.yml.enc</code>.  Đó là những điểm khác biệt duy nhất.</p>\n<p>Để chỉnh sửa thông tin trong file mã hoá ta sử dụng lệnh:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EDITOR=vi rails <span class=\"symbol\">credentials:</span>edit</span><br></pre></td></tr></table></figure>\n<p>Không cần dùng lệnh setup như trên, vì trong rails 5.2, hai file key và mã hoá được sinh ra cùng project.</p>\n<p>Ta có thể truy xuất giá trị được giải mã trong file <code>credentials.yml.enc</code> như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Rails.application.credentials.ten_bien_trong_credentials</span><br></pre></td></tr></table></figure>\n\n<p>Làm gì khi bạn muốn thay thế <code>master.key</code>?</p>\n<ol>\n<li><p><code>rails credentials:show</code> dùng lệnh này để hiển thị thông tin dạng giải mã ra editor, copy chúng.</p>\n</li>\n<li><p>Xoá hai file <code>master.key</code> và <code>credentials.yml.enc</code> đi.</p>\n</li>\n<li><p><code>EDITOR=vim rails credentials:edit</code> với lệnh sau bạn sẽ generate lại hai file mới. Việc cần làm bây giờ là paste thông tin ở bước 1 vào editor khi này rồi save lại.</p>\n</li>\n</ol>\n<h1 id=\"4-secret-key-base\"><a href=\"#4-secret-key-base\" class=\"headerlink\" title=\"4. secret_key_base\"></a>4. secret_key_base</h1><p>Nếu làm theo hướng dẫn bên trên, ta sẽ thu được một file mã hoá ví dụ: <code>credentials.yml.enc</code> có chứa nội dung ngay cả khi ta mới vừa khởi tạo project. Điều gì đã xảy ra? Tôi còn chưa kịp edit thì nó lấy thông tin gì mà mã hoá ra nội dung đó vậy? Câu trả lời là một thứ được tạo kèm project của bạn có tên là <code>secret_key_base</code> sẽ là thứ đầu tiên được tự động lưu mã hoá vào file <code>credentials.yml.enc</code>.</p>\n<p>Sao lại phức tạp như vậy? nó với <code>RAILS_MASTER_KEY</code> ở trên có quan hệ gì không? Câu trả lời là không? <code>secret_key_base</code> được rails sinh ra khi tạo project, nó đảm bảo rằng không thể có hai ứng dụng rails có chung một <code>secet_key_base</code>, cái key sẽ được sử dụng để đảo bảo thứ đánh dấu tính duy nhất của một project và nó còn được dùng làm nhiều việc hay ho khác tôi sẽ trình bày trong các bài viết sắp tới.</p>\n<p>Để tạo ra một secret_key_base bạn có thể sử dụng lệnh sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rails secret</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Hãy để lại bình luận bên dưới nếu bạn có ý kiến khác hoặc phản hồi về nội dung bài viết nhé.</p>\n"},{"title":"Ruby Method Lookup","date":"2019-02-23T17:00:00.000Z","draft":false,"mytag":"#TIL","_content":"\n# Đặt vấn đề\n\nCũng như nhiều ngôn ngữ khác, trong ruby, khi làm việc với một đối tượng thì có hai thứ ta phải quan tâm chính đó là thuộc tính của đối tượng và phương thức mà đối tượng có thể sử dụng (à mà gần như mọi thứ trong ruby đều là `object` nên đây là một kiến thức cơ bản nhưng cũng rất quan trọng cần phải nắm rõ). Việc ta có thể sử dụng phương thức của đối tượng thông qua dấu `.` không phải là gì mới mẻ, nhưng có một số điều đáng ghi nhớ về cách mà ruby tìm kiếm phương thức.\n\n# Luận bàn\n\n# 1. Method Lookup\n\nĐã khi nào bạn tự hỏi, giả sử nếu bạn có một class A, và class này include thêm hai module vào nữa, nếu trong hai module đó cùng định nghĩa một phương thức, vậy khi instance của A gọi đến phương thức đó, điều gì sẽ xảy ra? Phương thức trong module nào được chạy?\n\n\nCâu trả lời là thứ tự các phương thức được ruby tìm kiếm như sau:\n\n1. Phương thức được định nghĩa trong `object's singleton class`.\n\n2. Phương thức trong `module` được mixin trong `singleton class`(Theo thứ tự đảo ngược, vào sau sẽ tìm kiếm trước).\n\n3. Phương thức được định nghĩa trong `class` của đối tượng ta đang xét.\n\n4. Phương thức trong các `module` được `include` vào class ta đang xét (Cũng theo tứ tự đảo ngược).\n\n5. Phương thức trong `Super class` của class ta đang xét.\n\nĐể làm rõ điều đã nói hãy xét ví dụ dưới đây:\n\n```ruby\nmodule One\n  def hello\n    \"I'm one (include in class Test)\"\n  end\nend\n\nmodule Two\n  def hello\n    \"I'm two (include in class Test)\"\n  end\nend\n\nmodule Three\n  def hello\n    \"I'm three (extend)\"\n  end\nend\n\nmodule Four\n  def hello\n    \"I'm four (extend)\"\n  end\nend\n\nclass FatherOfTest\n  def hello\n   \"I'm father of test class\"\n  end\nend\n\nclass Test < FatherOfTest\n  include One\n  include Two\n\n  def hello\n    \"It's my hello - Test class\"\n  end\nend\n\nm = Test.new\n\ndef m.hello\n  \"I'm object m\"\nend\n\nm.extend(Three)\nm.extend(Four)\n\nm.hello\n```\n\nTất nhiên đoạn mã trên sẽ có output là:\n\n`\"I'm object m\"`\n\nTheo thứ tự tìm kiếm đã liệt kê ở trên, khi ruby tìm thấy phương thức lần đầu nó sẽ dừng tìm kiếm và khi đi hết các thứ tự và vẫn không tìm được thì nó sẽ gọi đến một phương thức mặc đinh là `method_missing`.\n\nBỏ đoạn code:\n\n```ruby\ndef m.hello\n  \"I'm object m\"\nend\n```\n\nChạy lại ta nhận được kết quả:\n\n`\"I'm four (extend)\"`\n\nLàm tương tự rồi ta sẽ tìm ra thứ tự ưu tiên kết quả như sau:\n\n``` ruby\n# phương thức hello cho riêng instance m\n\"I'm object m\"\n# phương thức được extend riêng cho m\n\"I'm four (extend)\"\n\"I'm three (extend)\"\n# phương thức trong chính class Test, class của m\n\"It's my hello - Test class\"\n# phương thức trong module được include vào Class Test\n\"I'm two (include in class Test)\"\n\"I'm one (include in class Test)\"\n# phương thức trong lớp cha của Class Test\n\"I'm father of test class\"\n```\n\nNếu bạn đang còn một chút bối rối vì những từ khoá và cách sử dụng `extend` và `include` hãy đọc tiếp mục dưới.\n\n# 2. Extend, Include trong Ruby\n\nTrong ruby không có đa kế thừa, thay vào đó ruby sử dụng `mixin`.\n\nMột class chỉ được kế thừa từ một class khác. Tuy nhiên nó được `mixin` nhiều `module` bằng hai phương thức là `include` và `extend`.\n\n`include:` với việc bạn include moudle A vào trong class B, đồng nghĩa với việc instance của class B có thể sử dụng tất cả các `instance method` trong moudle A. Vậy còn `module method` trong A thì sao? Câu trả lời là những `module method` trong A thì A sử dụng thôi.\n\n`extend:` đúng với ngữ nghĩa của nó, `mở rộng`, `extend` có thể dùng để mở rộng một class hoặc cũng có thể dùng để mở rộng một instance.  Trong ví dụ trên mục 1, tôi `extend` object `m`, từ đó giúp m được mở rộng thêm các phương thức ứng với tất cả các `instance method` trong module nó extend (đây là \"mở rộng\" cho một đối tượng). Nếu tôi muốn mở rộng cho một class, tôi sẽ extend moudle trong class đó, và sau đó tất cả các `instance method` trong module sẽ trở thành như các `class method` cho class (đây là sự \"mở rộng\" cho một lớp). Vậy còn `module method` trong moudle thì sao?Câu trả lời vẫn như trên, những phương thức module thì để module đó sử dụng.\n\n# Kết luận\n\nMixin là một chức năng mạnh mẽ trong ruby, nó giúp ta mở rộng class/object bằng các method mới. Tuy nhiên, hãy cẩn thận để đảm bảo bạn gọi đúng được method mà bạn cần.\n","source":"_posts/2019-02-24-ruby-method-lookup.md","raw":"---\ntitle: \"Ruby Method Lookup\"\ndate: 2019-02-24\ndraft: false\ntags: [\"ruby\"]\ncategories: [\"ruby notes\"]\nmytag: \"#TIL\"\n---\n\n# Đặt vấn đề\n\nCũng như nhiều ngôn ngữ khác, trong ruby, khi làm việc với một đối tượng thì có hai thứ ta phải quan tâm chính đó là thuộc tính của đối tượng và phương thức mà đối tượng có thể sử dụng (à mà gần như mọi thứ trong ruby đều là `object` nên đây là một kiến thức cơ bản nhưng cũng rất quan trọng cần phải nắm rõ). Việc ta có thể sử dụng phương thức của đối tượng thông qua dấu `.` không phải là gì mới mẻ, nhưng có một số điều đáng ghi nhớ về cách mà ruby tìm kiếm phương thức.\n\n# Luận bàn\n\n# 1. Method Lookup\n\nĐã khi nào bạn tự hỏi, giả sử nếu bạn có một class A, và class này include thêm hai module vào nữa, nếu trong hai module đó cùng định nghĩa một phương thức, vậy khi instance của A gọi đến phương thức đó, điều gì sẽ xảy ra? Phương thức trong module nào được chạy?\n\n\nCâu trả lời là thứ tự các phương thức được ruby tìm kiếm như sau:\n\n1. Phương thức được định nghĩa trong `object's singleton class`.\n\n2. Phương thức trong `module` được mixin trong `singleton class`(Theo thứ tự đảo ngược, vào sau sẽ tìm kiếm trước).\n\n3. Phương thức được định nghĩa trong `class` của đối tượng ta đang xét.\n\n4. Phương thức trong các `module` được `include` vào class ta đang xét (Cũng theo tứ tự đảo ngược).\n\n5. Phương thức trong `Super class` của class ta đang xét.\n\nĐể làm rõ điều đã nói hãy xét ví dụ dưới đây:\n\n```ruby\nmodule One\n  def hello\n    \"I'm one (include in class Test)\"\n  end\nend\n\nmodule Two\n  def hello\n    \"I'm two (include in class Test)\"\n  end\nend\n\nmodule Three\n  def hello\n    \"I'm three (extend)\"\n  end\nend\n\nmodule Four\n  def hello\n    \"I'm four (extend)\"\n  end\nend\n\nclass FatherOfTest\n  def hello\n   \"I'm father of test class\"\n  end\nend\n\nclass Test < FatherOfTest\n  include One\n  include Two\n\n  def hello\n    \"It's my hello - Test class\"\n  end\nend\n\nm = Test.new\n\ndef m.hello\n  \"I'm object m\"\nend\n\nm.extend(Three)\nm.extend(Four)\n\nm.hello\n```\n\nTất nhiên đoạn mã trên sẽ có output là:\n\n`\"I'm object m\"`\n\nTheo thứ tự tìm kiếm đã liệt kê ở trên, khi ruby tìm thấy phương thức lần đầu nó sẽ dừng tìm kiếm và khi đi hết các thứ tự và vẫn không tìm được thì nó sẽ gọi đến một phương thức mặc đinh là `method_missing`.\n\nBỏ đoạn code:\n\n```ruby\ndef m.hello\n  \"I'm object m\"\nend\n```\n\nChạy lại ta nhận được kết quả:\n\n`\"I'm four (extend)\"`\n\nLàm tương tự rồi ta sẽ tìm ra thứ tự ưu tiên kết quả như sau:\n\n``` ruby\n# phương thức hello cho riêng instance m\n\"I'm object m\"\n# phương thức được extend riêng cho m\n\"I'm four (extend)\"\n\"I'm three (extend)\"\n# phương thức trong chính class Test, class của m\n\"It's my hello - Test class\"\n# phương thức trong module được include vào Class Test\n\"I'm two (include in class Test)\"\n\"I'm one (include in class Test)\"\n# phương thức trong lớp cha của Class Test\n\"I'm father of test class\"\n```\n\nNếu bạn đang còn một chút bối rối vì những từ khoá và cách sử dụng `extend` và `include` hãy đọc tiếp mục dưới.\n\n# 2. Extend, Include trong Ruby\n\nTrong ruby không có đa kế thừa, thay vào đó ruby sử dụng `mixin`.\n\nMột class chỉ được kế thừa từ một class khác. Tuy nhiên nó được `mixin` nhiều `module` bằng hai phương thức là `include` và `extend`.\n\n`include:` với việc bạn include moudle A vào trong class B, đồng nghĩa với việc instance của class B có thể sử dụng tất cả các `instance method` trong moudle A. Vậy còn `module method` trong A thì sao? Câu trả lời là những `module method` trong A thì A sử dụng thôi.\n\n`extend:` đúng với ngữ nghĩa của nó, `mở rộng`, `extend` có thể dùng để mở rộng một class hoặc cũng có thể dùng để mở rộng một instance.  Trong ví dụ trên mục 1, tôi `extend` object `m`, từ đó giúp m được mở rộng thêm các phương thức ứng với tất cả các `instance method` trong module nó extend (đây là \"mở rộng\" cho một đối tượng). Nếu tôi muốn mở rộng cho một class, tôi sẽ extend moudle trong class đó, và sau đó tất cả các `instance method` trong module sẽ trở thành như các `class method` cho class (đây là sự \"mở rộng\" cho một lớp). Vậy còn `module method` trong moudle thì sao?Câu trả lời vẫn như trên, những phương thức module thì để module đó sử dụng.\n\n# Kết luận\n\nMixin là một chức năng mạnh mẽ trong ruby, nó giúp ta mở rộng class/object bằng các method mới. Tuy nhiên, hãy cẩn thận để đảm bảo bạn gọi đúng được method mà bạn cần.\n","slug":"2019-02-24-ruby-method-lookup","published":1,"updated":"2019-11-13T04:01:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7sufh000q5rrsbsg23co0","content":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Cũng như nhiều ngôn ngữ khác, trong ruby, khi làm việc với một đối tượng thì có hai thứ ta phải quan tâm chính đó là thuộc tính của đối tượng và phương thức mà đối tượng có thể sử dụng (à mà gần như mọi thứ trong ruby đều là <code>object</code> nên đây là một kiến thức cơ bản nhưng cũng rất quan trọng cần phải nắm rõ). Việc ta có thể sử dụng phương thức của đối tượng thông qua dấu <code>.</code> không phải là gì mới mẻ, nhưng có một số điều đáng ghi nhớ về cách mà ruby tìm kiếm phương thức.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-Method-Lookup\"><a href=\"#1-Method-Lookup\" class=\"headerlink\" title=\"1. Method Lookup\"></a>1. Method Lookup</h1><p>Đã khi nào bạn tự hỏi, giả sử nếu bạn có một class A, và class này include thêm hai module vào nữa, nếu trong hai module đó cùng định nghĩa một phương thức, vậy khi instance của A gọi đến phương thức đó, điều gì sẽ xảy ra? Phương thức trong module nào được chạy?</p>\n<p>Câu trả lời là thứ tự các phương thức được ruby tìm kiếm như sau:</p>\n<ol>\n<li><p>Phương thức được định nghĩa trong <code>object&#39;s singleton class</code>.</p>\n</li>\n<li><p>Phương thức trong <code>module</code> được mixin trong <code>singleton class</code>(Theo thứ tự đảo ngược, vào sau sẽ tìm kiếm trước).</p>\n</li>\n<li><p>Phương thức được định nghĩa trong <code>class</code> của đối tượng ta đang xét.</p>\n</li>\n<li><p>Phương thức trong các <code>module</code> được <code>include</code> vào class ta đang xét (Cũng theo tứ tự đảo ngược).</p>\n</li>\n<li><p>Phương thức trong <code>Super class</code> của class ta đang xét.</p>\n</li>\n</ol>\n<p>Để làm rõ điều đã nói hãy xét ví dụ dưới đây:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">One</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span></span></span><br><span class=\"line\">    <span class=\"string\">\"I'm one (include in class Test)\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">Two</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span></span></span><br><span class=\"line\">    <span class=\"string\">\"I'm two (include in class Test)\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">Three</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span></span></span><br><span class=\"line\">    <span class=\"string\">\"I'm three (extend)\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">Four</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span></span></span><br><span class=\"line\">    <span class=\"string\">\"I'm four (extend)\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FatherOfTest</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span></span></span><br><span class=\"line\">   <span class=\"string\">\"I'm father of test class\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> &lt; FatherOfTest</span></span><br><span class=\"line\">  <span class=\"keyword\">include</span> One</span><br><span class=\"line\">  <span class=\"keyword\">include</span> Two</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span></span></span><br><span class=\"line\">    <span class=\"string\">\"It's my hello - Test class\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">m = Test.new</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">m</span>.<span class=\"title\">hello</span></span></span><br><span class=\"line\">  <span class=\"string\">\"I'm object m\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.extend(Three)</span><br><span class=\"line\">m.extend(Four)</span><br><span class=\"line\"></span><br><span class=\"line\">m.hello</span><br></pre></td></tr></table></figure>\n\n<p>Tất nhiên đoạn mã trên sẽ có output là:</p>\n<p><code>&quot;I&#39;m object m&quot;</code></p>\n<p>Theo thứ tự tìm kiếm đã liệt kê ở trên, khi ruby tìm thấy phương thức lần đầu nó sẽ dừng tìm kiếm và khi đi hết các thứ tự và vẫn không tìm được thì nó sẽ gọi đến một phương thức mặc đinh là <code>method_missing</code>.</p>\n<p>Bỏ đoạn code:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">m</span>.<span class=\"title\">hello</span></span></span><br><span class=\"line\">  <span class=\"string\">\"I'm object m\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Chạy lại ta nhận được kết quả:</p>\n<p><code>&quot;I&#39;m four (extend)&quot;</code></p>\n<p>Làm tương tự rồi ta sẽ tìm ra thứ tự ưu tiên kết quả như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># phương thức hello cho riêng instance m</span></span><br><span class=\"line\"><span class=\"string\">\"I'm object m\"</span></span><br><span class=\"line\"><span class=\"comment\"># phương thức được extend riêng cho m</span></span><br><span class=\"line\"><span class=\"string\">\"I'm four (extend)\"</span></span><br><span class=\"line\"><span class=\"string\">\"I'm three (extend)\"</span></span><br><span class=\"line\"><span class=\"comment\"># phương thức trong chính class Test, class của m</span></span><br><span class=\"line\"><span class=\"string\">\"It's my hello - Test class\"</span></span><br><span class=\"line\"><span class=\"comment\"># phương thức trong module được include vào Class Test</span></span><br><span class=\"line\"><span class=\"string\">\"I'm two (include in class Test)\"</span></span><br><span class=\"line\"><span class=\"string\">\"I'm one (include in class Test)\"</span></span><br><span class=\"line\"><span class=\"comment\"># phương thức trong lớp cha của Class Test</span></span><br><span class=\"line\"><span class=\"string\">\"I'm father of test class\"</span></span><br></pre></td></tr></table></figure>\n\n<p>Nếu bạn đang còn một chút bối rối vì những từ khoá và cách sử dụng <code>extend</code> và <code>include</code> hãy đọc tiếp mục dưới.</p>\n<h1 id=\"2-Extend-Include-trong-Ruby\"><a href=\"#2-Extend-Include-trong-Ruby\" class=\"headerlink\" title=\"2. Extend, Include trong Ruby\"></a>2. Extend, Include trong Ruby</h1><p>Trong ruby không có đa kế thừa, thay vào đó ruby sử dụng <code>mixin</code>.</p>\n<p>Một class chỉ được kế thừa từ một class khác. Tuy nhiên nó được <code>mixin</code> nhiều <code>module</code> bằng hai phương thức là <code>include</code> và <code>extend</code>.</p>\n<p><code>include:</code> với việc bạn include moudle A vào trong class B, đồng nghĩa với việc instance của class B có thể sử dụng tất cả các <code>instance method</code> trong moudle A. Vậy còn <code>module method</code> trong A thì sao? Câu trả lời là những <code>module method</code> trong A thì A sử dụng thôi.</p>\n<p><code>extend:</code> đúng với ngữ nghĩa của nó, <code>mở rộng</code>, <code>extend</code> có thể dùng để mở rộng một class hoặc cũng có thể dùng để mở rộng một instance.  Trong ví dụ trên mục 1, tôi <code>extend</code> object <code>m</code>, từ đó giúp m được mở rộng thêm các phương thức ứng với tất cả các <code>instance method</code> trong module nó extend (đây là “mở rộng” cho một đối tượng). Nếu tôi muốn mở rộng cho một class, tôi sẽ extend moudle trong class đó, và sau đó tất cả các <code>instance method</code> trong module sẽ trở thành như các <code>class method</code> cho class (đây là sự “mở rộng” cho một lớp). Vậy còn <code>module method</code> trong moudle thì sao?Câu trả lời vẫn như trên, những phương thức module thì để module đó sử dụng.</p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Mixin là một chức năng mạnh mẽ trong ruby, nó giúp ta mở rộng class/object bằng các method mới. Tuy nhiên, hãy cẩn thận để đảm bảo bạn gọi đúng được method mà bạn cần.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Cũng như nhiều ngôn ngữ khác, trong ruby, khi làm việc với một đối tượng thì có hai thứ ta phải quan tâm chính đó là thuộc tính của đối tượng và phương thức mà đối tượng có thể sử dụng (à mà gần như mọi thứ trong ruby đều là <code>object</code> nên đây là một kiến thức cơ bản nhưng cũng rất quan trọng cần phải nắm rõ). Việc ta có thể sử dụng phương thức của đối tượng thông qua dấu <code>.</code> không phải là gì mới mẻ, nhưng có một số điều đáng ghi nhớ về cách mà ruby tìm kiếm phương thức.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-Method-Lookup\"><a href=\"#1-Method-Lookup\" class=\"headerlink\" title=\"1. Method Lookup\"></a>1. Method Lookup</h1><p>Đã khi nào bạn tự hỏi, giả sử nếu bạn có một class A, và class này include thêm hai module vào nữa, nếu trong hai module đó cùng định nghĩa một phương thức, vậy khi instance của A gọi đến phương thức đó, điều gì sẽ xảy ra? Phương thức trong module nào được chạy?</p>\n<p>Câu trả lời là thứ tự các phương thức được ruby tìm kiếm như sau:</p>\n<ol>\n<li><p>Phương thức được định nghĩa trong <code>object&#39;s singleton class</code>.</p>\n</li>\n<li><p>Phương thức trong <code>module</code> được mixin trong <code>singleton class</code>(Theo thứ tự đảo ngược, vào sau sẽ tìm kiếm trước).</p>\n</li>\n<li><p>Phương thức được định nghĩa trong <code>class</code> của đối tượng ta đang xét.</p>\n</li>\n<li><p>Phương thức trong các <code>module</code> được <code>include</code> vào class ta đang xét (Cũng theo tứ tự đảo ngược).</p>\n</li>\n<li><p>Phương thức trong <code>Super class</code> của class ta đang xét.</p>\n</li>\n</ol>\n<p>Để làm rõ điều đã nói hãy xét ví dụ dưới đây:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">One</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span></span></span><br><span class=\"line\">    <span class=\"string\">\"I'm one (include in class Test)\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">Two</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span></span></span><br><span class=\"line\">    <span class=\"string\">\"I'm two (include in class Test)\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">Three</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span></span></span><br><span class=\"line\">    <span class=\"string\">\"I'm three (extend)\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">Four</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span></span></span><br><span class=\"line\">    <span class=\"string\">\"I'm four (extend)\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FatherOfTest</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span></span></span><br><span class=\"line\">   <span class=\"string\">\"I'm father of test class\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> &lt; FatherOfTest</span></span><br><span class=\"line\">  <span class=\"keyword\">include</span> One</span><br><span class=\"line\">  <span class=\"keyword\">include</span> Two</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span></span></span><br><span class=\"line\">    <span class=\"string\">\"It's my hello - Test class\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">m = Test.new</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">m</span>.<span class=\"title\">hello</span></span></span><br><span class=\"line\">  <span class=\"string\">\"I'm object m\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.extend(Three)</span><br><span class=\"line\">m.extend(Four)</span><br><span class=\"line\"></span><br><span class=\"line\">m.hello</span><br></pre></td></tr></table></figure>\n\n<p>Tất nhiên đoạn mã trên sẽ có output là:</p>\n<p><code>&quot;I&#39;m object m&quot;</code></p>\n<p>Theo thứ tự tìm kiếm đã liệt kê ở trên, khi ruby tìm thấy phương thức lần đầu nó sẽ dừng tìm kiếm và khi đi hết các thứ tự và vẫn không tìm được thì nó sẽ gọi đến một phương thức mặc đinh là <code>method_missing</code>.</p>\n<p>Bỏ đoạn code:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">m</span>.<span class=\"title\">hello</span></span></span><br><span class=\"line\">  <span class=\"string\">\"I'm object m\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Chạy lại ta nhận được kết quả:</p>\n<p><code>&quot;I&#39;m four (extend)&quot;</code></p>\n<p>Làm tương tự rồi ta sẽ tìm ra thứ tự ưu tiên kết quả như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># phương thức hello cho riêng instance m</span></span><br><span class=\"line\"><span class=\"string\">\"I'm object m\"</span></span><br><span class=\"line\"><span class=\"comment\"># phương thức được extend riêng cho m</span></span><br><span class=\"line\"><span class=\"string\">\"I'm four (extend)\"</span></span><br><span class=\"line\"><span class=\"string\">\"I'm three (extend)\"</span></span><br><span class=\"line\"><span class=\"comment\"># phương thức trong chính class Test, class của m</span></span><br><span class=\"line\"><span class=\"string\">\"It's my hello - Test class\"</span></span><br><span class=\"line\"><span class=\"comment\"># phương thức trong module được include vào Class Test</span></span><br><span class=\"line\"><span class=\"string\">\"I'm two (include in class Test)\"</span></span><br><span class=\"line\"><span class=\"string\">\"I'm one (include in class Test)\"</span></span><br><span class=\"line\"><span class=\"comment\"># phương thức trong lớp cha của Class Test</span></span><br><span class=\"line\"><span class=\"string\">\"I'm father of test class\"</span></span><br></pre></td></tr></table></figure>\n\n<p>Nếu bạn đang còn một chút bối rối vì những từ khoá và cách sử dụng <code>extend</code> và <code>include</code> hãy đọc tiếp mục dưới.</p>\n<h1 id=\"2-Extend-Include-trong-Ruby\"><a href=\"#2-Extend-Include-trong-Ruby\" class=\"headerlink\" title=\"2. Extend, Include trong Ruby\"></a>2. Extend, Include trong Ruby</h1><p>Trong ruby không có đa kế thừa, thay vào đó ruby sử dụng <code>mixin</code>.</p>\n<p>Một class chỉ được kế thừa từ một class khác. Tuy nhiên nó được <code>mixin</code> nhiều <code>module</code> bằng hai phương thức là <code>include</code> và <code>extend</code>.</p>\n<p><code>include:</code> với việc bạn include moudle A vào trong class B, đồng nghĩa với việc instance của class B có thể sử dụng tất cả các <code>instance method</code> trong moudle A. Vậy còn <code>module method</code> trong A thì sao? Câu trả lời là những <code>module method</code> trong A thì A sử dụng thôi.</p>\n<p><code>extend:</code> đúng với ngữ nghĩa của nó, <code>mở rộng</code>, <code>extend</code> có thể dùng để mở rộng một class hoặc cũng có thể dùng để mở rộng một instance.  Trong ví dụ trên mục 1, tôi <code>extend</code> object <code>m</code>, từ đó giúp m được mở rộng thêm các phương thức ứng với tất cả các <code>instance method</code> trong module nó extend (đây là “mở rộng” cho một đối tượng). Nếu tôi muốn mở rộng cho một class, tôi sẽ extend moudle trong class đó, và sau đó tất cả các <code>instance method</code> trong module sẽ trở thành như các <code>class method</code> cho class (đây là sự “mở rộng” cho một lớp). Vậy còn <code>module method</code> trong moudle thì sao?Câu trả lời vẫn như trên, những phương thức module thì để module đó sử dụng.</p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Mixin là một chức năng mạnh mẽ trong ruby, nó giúp ta mở rộng class/object bằng các method mới. Tuy nhiên, hãy cẩn thận để đảm bảo bạn gọi đúng được method mà bạn cần.</p>\n"},{"title":"Cục Nợ N + 1 Và Hướng Xử Lý","date":"2019-02-24T17:00:00.000Z","draft":false,"mytag":"Rails","mytrend":"COOL","_content":"\n# Đặt vấn đề\n\nCó thể bạn đã từng nghe qua về N+1, đây là một chủ để cơ bản trong vấn đề quản lý csdl trong code, bài viết này sẽ trình bày về nó dưới góc độ sử dụng trong ruby on rails với framework `ActiveRecord`\n\n# Luận bàn\n\n# N+1 query\n\nXét một ví dụ:\n\nTôi có một ứng dụng đơn giản, với hai bảng csdl, bảng thứ nhất là bảng users, bảng thứ hai là bảng articles, một user có thể có nhiều articles nhưng một article chỉ thuộc về user. Hãy xem đoạn mã dưới đây:\n\n```ruby\nUser.all.each do |user|\n  user.articles\nend\n```\nĐoạn code trên sẽ duyệt qua tất cả user có trong csdl rồi lấy tất cả các articles ứng với từng user. Rất tường minh và dễ hiểu.\n\nTối có 5 user mẫu trong csdl nên các câu lệnh sql sinh ra sau đoạn code trên như sau:\n\n```ruby\n# câu lệnh lấy hết users lên\nSELECT \"users\".* FROM \"users\"\n# ứng với mỗi user query lấy tất cả articles lên\nSELECT  \"articles\".* FROM \"articles\" WHERE \"articles\".\"user_id\" = ? LIMIT ?  [[\"user_id\", 1], [\"LIMIT\", 11]]\nSELECT  \"articles\".* FROM \"articles\" WHERE \"articles\".\"user_id\" = ? LIMIT ?  [[\"user_id\", 2], [\"LIMIT\", 11]]\nSELECT  \"articles\".* FROM \"articles\" WHERE \"articles\".\"user_id\" = ? LIMIT ?  [[\"user_id\", 3], [\"LIMIT\", 11]]\nSELECT  \"articles\".* FROM \"articles\" WHERE \"articles\".\"user_id\" = ? LIMIT ?  [[\"user_id\", 4], [\"LIMIT\", 11]]\nSELECT  \"articles\".* FROM \"articles\" WHERE \"articles\".\"user_id\" = ? LIMIT ?  [[\"user_id\", 5], [\"LIMIT\", 11]]\n```\n\nĐây chính là ví dụ điển hình về `N+1`, `N`ở đây là 5 (số lượng user có trong csdl) và `1` chính là câu lệnh sql đầu tiên dùng để lấy tất cả user lên.\n\nNhìn như vô hại, mà thực ra ở ví dụ này cũng vô hại thật vì chỉ có 5 record user, nên thời gian load cũng không thấm tháp gì, tuy nhiên trong thực tế thì dữ liệu có thể rất lớn, lên đến hàng triệu record và nếu load dữ liệu như này thì đây là một vấn đề lớn cho hiệu năng của trang web. Hãy đọc tiếp mục 2 để tìm về giải pháp cho tình huống này.\n\n# 2. Giải pháp\n\nVấn đề đã có, giờ chúng ta cần tìm một giải pháp làm sao để kết quả trả về không đổi, nhưng lượng truy vấn sql trong csdl phải nhỏ hơn.\n\nCác phương án:\n\n1. Sử dụng `select in()`.\n\n2. Sử dụng `joins`. Để đọc kỹ hơn về joins, thì nên xem ở [đây](https://www.w3schools.com/sql/sql_join.asp)\n\nSử dụng select in() sẽ tiết kiệm truy vấn đi rất nhiều, nếu ví dụ bên trên ta sử dụng select in() thì các sql query cần thiết sẽ là như sau:\n\n```ruby\n# lấy tất cả query\nSELECT \"users\".* FROM \"users\"\n# lấy articles ứng với từng user\nSELECT  \"articles\".* FROM \"articles\" WHERE \"articles\".\"user_id\" IN (1, 2, 3, 4, 5)\n```\n\nTuyệt vời, từ 6(N + 1) truy vấn giờ đã trở thành còn 2.\n\nVới cách thứ 2 là sử dụng `joins`:\n\njoins hiểu đơn giản là ghép hai bảng lại với nhau (lấy một số field cần thiết ở bảng này, gộp với vài field cần thiết ở bảng kia khi mà record ở hai bên thoả mãn một điều kiện nào đó), rồi từ đó thành một bảng tạm dùng trong quá trình bạn sử dụng.\n\nQuay trở về ví dụ ban đầu, câu truy vấn bây giờ sẽ trở thành:\n\n```ruby\nSELECT User.name, Article.title\n      FROM User\n      INNER JOIN Article ON User.id = Article.user_id\n```\n\nLấy vài field cần thiết(name của user và title của Article).\nBằng cách thoả mãn điều kiện nào đó(id của user bằng với user_id của article).\n\nVậy từ N+1 query ban đầu, đã trở thành một query duy nhất.\n\nĐến lúc này đã có thể kết luận là joins tốt hơn select in() được chưa? Chưa, câu trả lời sẽ là như vậy. Sang mục 3 chúng ta sẽ tìm hiểu về cách xử lý N+1 thông qua ActiveRecord\n\n# 3. Xử lý N+1 query trong ActiveRecord\n\nTrong ActiveRecord cung cấp 3 phương thức để loại bỏ N+1,\n\n1) Sử dụng `preload`\n\n```ruby\nUser.preload(:articles)\n# sql sinh ra\nUser Load (0.2ms)  SELECT  \"users\".* FROM \"users\" LIMIT ?  [[\"LIMIT\", 11]]\nArticle Load (0.4ms)  SELECT \"articles\".* FROM \"articles\" WHERE \"articles\".\"user_id\" IN (?, ?, ?)  [[\"user_id\", 1], [\"user_id\", 2], [\"user_id\", 3]]\n```\nPreload sẽ luôn sử dụng `select in()`\n\n2) Sử dụng `Eagerload`\n\n```ruby\nUser.eager_load(:articles)\n# sql sinh ra\nSELECT  DISTINCT \"users\".\"id\" FROM \"users\" LEFT OUTER JOIN \"articles\" ON \"articles\".\"user_id\" = \"users\".\"id\" LIMIT ?  [[\"LIMIT\", 11]]\n\nSELECT \"users\".\"id\" AS t0_r0, \"users\".\"name\" AS t0_r1, \"users\".\"created_at\" AS t0_r2,\n\"users\".\"updated_at\" AS t0_r3, \"articles\".\"id\" AS t1_r0, \"articles\".\"name\" AS t1_r1,\n\"articles\".\"user_id\" AS t1_r2, \"articles\".\"created_at\" AS t1_r3, \"articles\".\"updated_at\" AS t1_r4\nFROM \"users\" LEFT OUTER JOIN \"articles\" ON \"articles\".\"user_id\" = \"users\".\"id\"\nWHERE \"users\".\"id\" IN (?, ?, ?)  [[\"id\", 1], [\"id\", 2], [\"id\", 3]]\n```\n\neager_load luôn sử dụng `joins`\n\n3) Sử dụng `Inludes`\n\n```ruby\n# cách 1\nUser.includes(:articles)\n# sql sinh ra\nSELECT  \"users\".* FROM \"users\" LIMIT ?  [[\"LIMIT\", 11]]\nSELECT \"articles\".* FROM \"articles\" WHERE \"articles\".\"user_id\" IN (?, ?, ?)  [[\"user_id\", 1], [\"user_id\", 2], [\"user_id\", 3]]\n#=> giống preload\n\n# cách 2\nUser.includes(:articles).references(:articles)\n# sql sinh ra\nSELECT  DISTINCT \"users\".\"id\" FROM \"users\" LEFT OUTER JOIN \"articles\"\nON \"articles\".\"user_id\" = \"users\".\"id\" LIMIT ?  [[\"LIMIT\", 11]]\nSELECT \"users\".\"id\" AS t0_r0, \"users\".\"name\" AS t0_r1, \"users\".\"created_at\" AS t0_r2,\n\"users\".\"updated_at\" AS t0_r3, \"articles\".\"id\" AS t1_r0, \"articles\".\"name\" AS t1_r1,\n\"articles\".\"user_id\" AS t1_r2, \"articles\".\"created_at\" AS t1_r3, \"articles\".\"updated_at\" AS t1_r4\nFROM \"users\" LEFT OUTER JOIN \"articles\" ON \"articles\".\"user_id\" = \"users\".\"id\"\nWHERE \"users\".\"id\" IN (?, ?, ?)  [[\"id\", 1], [\"id\", 2], [\"id\", 3]]\n#=> giống eager_load\n```\nVậy mặc định thì `includes` sử dụng select in(), nhưng cũng có thể chuyển qua sử dụng joins nếu thêm method references phía sau.\n\n# Kết luận\n\nQua ví dụ trên, ta đã tìm hiểu được một số cách cơ bản để loại bỏ N+1, với việc sử dụng joins sẽ ít query phải thực thi nhất, nhưng điều này không đảm bảo rằng sử dụng joins là tối ưu, vì với mỗi query sql, thời gian và công sức máy tính phải dùng là khác nhau, không phải câu sql nào cũng có thời gian thực hiện ngang nhau.\n\nSử dụng joins trong nhiều trường hợp csdl quá lớn cũng không phải là một ý hay, khi bản chất của joins là duyệt tuần tự qua hai (nhiều) bảng cần joins, để tìm những phần tử phù hợp rồi cho vào một bảng tạm. Hai vấn đề thấy ngay là việc phải duyệt tuần tự hai hay nhiều bảng là một truy vấn tốn tài nguyên, thứ hai dữ liệu được bỏ vào mảng tạm hiển nhiên ta cần một vùng nhớ để lưu cái bảng tạm này.\n\nĐể đi sâu hơn về vấn đề hiệu năng, các bài tiếp sau chúng ta sẽ thảo luận về nó.\n","source":"_posts/2019-02-25-van-de-n-1-trong-rails.md","raw":"---\ntitle: \"Cục Nợ N + 1 Và Hướng Xử Lý\"\ndate: 2019-02-25\ndraft: false\ntags: [\"database\", \"rails\"]\ncategories: [\"rails notes\"]\nmytag: \"Rails\"\nmytrend: \"COOL\"\n---\n\n# Đặt vấn đề\n\nCó thể bạn đã từng nghe qua về N+1, đây là một chủ để cơ bản trong vấn đề quản lý csdl trong code, bài viết này sẽ trình bày về nó dưới góc độ sử dụng trong ruby on rails với framework `ActiveRecord`\n\n# Luận bàn\n\n# N+1 query\n\nXét một ví dụ:\n\nTôi có một ứng dụng đơn giản, với hai bảng csdl, bảng thứ nhất là bảng users, bảng thứ hai là bảng articles, một user có thể có nhiều articles nhưng một article chỉ thuộc về user. Hãy xem đoạn mã dưới đây:\n\n```ruby\nUser.all.each do |user|\n  user.articles\nend\n```\nĐoạn code trên sẽ duyệt qua tất cả user có trong csdl rồi lấy tất cả các articles ứng với từng user. Rất tường minh và dễ hiểu.\n\nTối có 5 user mẫu trong csdl nên các câu lệnh sql sinh ra sau đoạn code trên như sau:\n\n```ruby\n# câu lệnh lấy hết users lên\nSELECT \"users\".* FROM \"users\"\n# ứng với mỗi user query lấy tất cả articles lên\nSELECT  \"articles\".* FROM \"articles\" WHERE \"articles\".\"user_id\" = ? LIMIT ?  [[\"user_id\", 1], [\"LIMIT\", 11]]\nSELECT  \"articles\".* FROM \"articles\" WHERE \"articles\".\"user_id\" = ? LIMIT ?  [[\"user_id\", 2], [\"LIMIT\", 11]]\nSELECT  \"articles\".* FROM \"articles\" WHERE \"articles\".\"user_id\" = ? LIMIT ?  [[\"user_id\", 3], [\"LIMIT\", 11]]\nSELECT  \"articles\".* FROM \"articles\" WHERE \"articles\".\"user_id\" = ? LIMIT ?  [[\"user_id\", 4], [\"LIMIT\", 11]]\nSELECT  \"articles\".* FROM \"articles\" WHERE \"articles\".\"user_id\" = ? LIMIT ?  [[\"user_id\", 5], [\"LIMIT\", 11]]\n```\n\nĐây chính là ví dụ điển hình về `N+1`, `N`ở đây là 5 (số lượng user có trong csdl) và `1` chính là câu lệnh sql đầu tiên dùng để lấy tất cả user lên.\n\nNhìn như vô hại, mà thực ra ở ví dụ này cũng vô hại thật vì chỉ có 5 record user, nên thời gian load cũng không thấm tháp gì, tuy nhiên trong thực tế thì dữ liệu có thể rất lớn, lên đến hàng triệu record và nếu load dữ liệu như này thì đây là một vấn đề lớn cho hiệu năng của trang web. Hãy đọc tiếp mục 2 để tìm về giải pháp cho tình huống này.\n\n# 2. Giải pháp\n\nVấn đề đã có, giờ chúng ta cần tìm một giải pháp làm sao để kết quả trả về không đổi, nhưng lượng truy vấn sql trong csdl phải nhỏ hơn.\n\nCác phương án:\n\n1. Sử dụng `select in()`.\n\n2. Sử dụng `joins`. Để đọc kỹ hơn về joins, thì nên xem ở [đây](https://www.w3schools.com/sql/sql_join.asp)\n\nSử dụng select in() sẽ tiết kiệm truy vấn đi rất nhiều, nếu ví dụ bên trên ta sử dụng select in() thì các sql query cần thiết sẽ là như sau:\n\n```ruby\n# lấy tất cả query\nSELECT \"users\".* FROM \"users\"\n# lấy articles ứng với từng user\nSELECT  \"articles\".* FROM \"articles\" WHERE \"articles\".\"user_id\" IN (1, 2, 3, 4, 5)\n```\n\nTuyệt vời, từ 6(N + 1) truy vấn giờ đã trở thành còn 2.\n\nVới cách thứ 2 là sử dụng `joins`:\n\njoins hiểu đơn giản là ghép hai bảng lại với nhau (lấy một số field cần thiết ở bảng này, gộp với vài field cần thiết ở bảng kia khi mà record ở hai bên thoả mãn một điều kiện nào đó), rồi từ đó thành một bảng tạm dùng trong quá trình bạn sử dụng.\n\nQuay trở về ví dụ ban đầu, câu truy vấn bây giờ sẽ trở thành:\n\n```ruby\nSELECT User.name, Article.title\n      FROM User\n      INNER JOIN Article ON User.id = Article.user_id\n```\n\nLấy vài field cần thiết(name của user và title của Article).\nBằng cách thoả mãn điều kiện nào đó(id của user bằng với user_id của article).\n\nVậy từ N+1 query ban đầu, đã trở thành một query duy nhất.\n\nĐến lúc này đã có thể kết luận là joins tốt hơn select in() được chưa? Chưa, câu trả lời sẽ là như vậy. Sang mục 3 chúng ta sẽ tìm hiểu về cách xử lý N+1 thông qua ActiveRecord\n\n# 3. Xử lý N+1 query trong ActiveRecord\n\nTrong ActiveRecord cung cấp 3 phương thức để loại bỏ N+1,\n\n1) Sử dụng `preload`\n\n```ruby\nUser.preload(:articles)\n# sql sinh ra\nUser Load (0.2ms)  SELECT  \"users\".* FROM \"users\" LIMIT ?  [[\"LIMIT\", 11]]\nArticle Load (0.4ms)  SELECT \"articles\".* FROM \"articles\" WHERE \"articles\".\"user_id\" IN (?, ?, ?)  [[\"user_id\", 1], [\"user_id\", 2], [\"user_id\", 3]]\n```\nPreload sẽ luôn sử dụng `select in()`\n\n2) Sử dụng `Eagerload`\n\n```ruby\nUser.eager_load(:articles)\n# sql sinh ra\nSELECT  DISTINCT \"users\".\"id\" FROM \"users\" LEFT OUTER JOIN \"articles\" ON \"articles\".\"user_id\" = \"users\".\"id\" LIMIT ?  [[\"LIMIT\", 11]]\n\nSELECT \"users\".\"id\" AS t0_r0, \"users\".\"name\" AS t0_r1, \"users\".\"created_at\" AS t0_r2,\n\"users\".\"updated_at\" AS t0_r3, \"articles\".\"id\" AS t1_r0, \"articles\".\"name\" AS t1_r1,\n\"articles\".\"user_id\" AS t1_r2, \"articles\".\"created_at\" AS t1_r3, \"articles\".\"updated_at\" AS t1_r4\nFROM \"users\" LEFT OUTER JOIN \"articles\" ON \"articles\".\"user_id\" = \"users\".\"id\"\nWHERE \"users\".\"id\" IN (?, ?, ?)  [[\"id\", 1], [\"id\", 2], [\"id\", 3]]\n```\n\neager_load luôn sử dụng `joins`\n\n3) Sử dụng `Inludes`\n\n```ruby\n# cách 1\nUser.includes(:articles)\n# sql sinh ra\nSELECT  \"users\".* FROM \"users\" LIMIT ?  [[\"LIMIT\", 11]]\nSELECT \"articles\".* FROM \"articles\" WHERE \"articles\".\"user_id\" IN (?, ?, ?)  [[\"user_id\", 1], [\"user_id\", 2], [\"user_id\", 3]]\n#=> giống preload\n\n# cách 2\nUser.includes(:articles).references(:articles)\n# sql sinh ra\nSELECT  DISTINCT \"users\".\"id\" FROM \"users\" LEFT OUTER JOIN \"articles\"\nON \"articles\".\"user_id\" = \"users\".\"id\" LIMIT ?  [[\"LIMIT\", 11]]\nSELECT \"users\".\"id\" AS t0_r0, \"users\".\"name\" AS t0_r1, \"users\".\"created_at\" AS t0_r2,\n\"users\".\"updated_at\" AS t0_r3, \"articles\".\"id\" AS t1_r0, \"articles\".\"name\" AS t1_r1,\n\"articles\".\"user_id\" AS t1_r2, \"articles\".\"created_at\" AS t1_r3, \"articles\".\"updated_at\" AS t1_r4\nFROM \"users\" LEFT OUTER JOIN \"articles\" ON \"articles\".\"user_id\" = \"users\".\"id\"\nWHERE \"users\".\"id\" IN (?, ?, ?)  [[\"id\", 1], [\"id\", 2], [\"id\", 3]]\n#=> giống eager_load\n```\nVậy mặc định thì `includes` sử dụng select in(), nhưng cũng có thể chuyển qua sử dụng joins nếu thêm method references phía sau.\n\n# Kết luận\n\nQua ví dụ trên, ta đã tìm hiểu được một số cách cơ bản để loại bỏ N+1, với việc sử dụng joins sẽ ít query phải thực thi nhất, nhưng điều này không đảm bảo rằng sử dụng joins là tối ưu, vì với mỗi query sql, thời gian và công sức máy tính phải dùng là khác nhau, không phải câu sql nào cũng có thời gian thực hiện ngang nhau.\n\nSử dụng joins trong nhiều trường hợp csdl quá lớn cũng không phải là một ý hay, khi bản chất của joins là duyệt tuần tự qua hai (nhiều) bảng cần joins, để tìm những phần tử phù hợp rồi cho vào một bảng tạm. Hai vấn đề thấy ngay là việc phải duyệt tuần tự hai hay nhiều bảng là một truy vấn tốn tài nguyên, thứ hai dữ liệu được bỏ vào mảng tạm hiển nhiên ta cần một vùng nhớ để lưu cái bảng tạm này.\n\nĐể đi sâu hơn về vấn đề hiệu năng, các bài tiếp sau chúng ta sẽ thảo luận về nó.\n","slug":"2019-02-25-van-de-n-1-trong-rails","published":1,"updated":"2019-11-13T04:02:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7sufj000s5rrs3xbmbbre","content":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Có thể bạn đã từng nghe qua về N+1, đây là một chủ để cơ bản trong vấn đề quản lý csdl trong code, bài viết này sẽ trình bày về nó dưới góc độ sử dụng trong ruby on rails với framework <code>ActiveRecord</code></p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"N-1-query\"><a href=\"#N-1-query\" class=\"headerlink\" title=\"N+1 query\"></a>N+1 query</h1><p>Xét một ví dụ:</p>\n<p>Tôi có một ứng dụng đơn giản, với hai bảng csdl, bảng thứ nhất là bảng users, bảng thứ hai là bảng articles, một user có thể có nhiều articles nhưng một article chỉ thuộc về user. Hãy xem đoạn mã dưới đây:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.all.each <span class=\"keyword\">do</span> <span class=\"params\">|user|</span></span><br><span class=\"line\">  user.articles</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>Đoạn code trên sẽ duyệt qua tất cả user có trong csdl rồi lấy tất cả các articles ứng với từng user. Rất tường minh và dễ hiểu.</p>\n<p>Tối có 5 user mẫu trong csdl nên các câu lệnh sql sinh ra sau đoạn code trên như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># câu lệnh lấy hết users lên</span></span><br><span class=\"line\">SELECT <span class=\"string\">\"users\"</span>.* FROM <span class=\"string\">\"users\"</span></span><br><span class=\"line\"><span class=\"comment\"># ứng với mỗi user query lấy tất cả articles lên</span></span><br><span class=\"line\">SELECT  <span class=\"string\">\"articles\"</span>.* FROM <span class=\"string\">\"articles\"</span> WHERE <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"user_id\"</span> = ? LIMIT ?  [[<span class=\"string\">\"user_id\"</span>, <span class=\"number\">1</span>], [<span class=\"string\">\"LIMIT\"</span>, <span class=\"number\">11</span>]]</span><br><span class=\"line\">SELECT  <span class=\"string\">\"articles\"</span>.* FROM <span class=\"string\">\"articles\"</span> WHERE <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"user_id\"</span> = ? LIMIT ?  [[<span class=\"string\">\"user_id\"</span>, <span class=\"number\">2</span>], [<span class=\"string\">\"LIMIT\"</span>, <span class=\"number\">11</span>]]</span><br><span class=\"line\">SELECT  <span class=\"string\">\"articles\"</span>.* FROM <span class=\"string\">\"articles\"</span> WHERE <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"user_id\"</span> = ? LIMIT ?  [[<span class=\"string\">\"user_id\"</span>, <span class=\"number\">3</span>], [<span class=\"string\">\"LIMIT\"</span>, <span class=\"number\">11</span>]]</span><br><span class=\"line\">SELECT  <span class=\"string\">\"articles\"</span>.* FROM <span class=\"string\">\"articles\"</span> WHERE <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"user_id\"</span> = ? LIMIT ?  [[<span class=\"string\">\"user_id\"</span>, <span class=\"number\">4</span>], [<span class=\"string\">\"LIMIT\"</span>, <span class=\"number\">11</span>]]</span><br><span class=\"line\">SELECT  <span class=\"string\">\"articles\"</span>.* FROM <span class=\"string\">\"articles\"</span> WHERE <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"user_id\"</span> = ? LIMIT ?  [[<span class=\"string\">\"user_id\"</span>, <span class=\"number\">5</span>], [<span class=\"string\">\"LIMIT\"</span>, <span class=\"number\">11</span>]]</span><br></pre></td></tr></table></figure>\n\n<p>Đây chính là ví dụ điển hình về <code>N+1</code>, <code>N</code>ở đây là 5 (số lượng user có trong csdl) và <code>1</code> chính là câu lệnh sql đầu tiên dùng để lấy tất cả user lên.</p>\n<p>Nhìn như vô hại, mà thực ra ở ví dụ này cũng vô hại thật vì chỉ có 5 record user, nên thời gian load cũng không thấm tháp gì, tuy nhiên trong thực tế thì dữ liệu có thể rất lớn, lên đến hàng triệu record và nếu load dữ liệu như này thì đây là một vấn đề lớn cho hiệu năng của trang web. Hãy đọc tiếp mục 2 để tìm về giải pháp cho tình huống này.</p>\n<h1 id=\"2-Giai-phap\"><a href=\"#2-Giai-phap\" class=\"headerlink\" title=\"2. Giải pháp\"></a>2. Giải pháp</h1><p>Vấn đề đã có, giờ chúng ta cần tìm một giải pháp làm sao để kết quả trả về không đổi, nhưng lượng truy vấn sql trong csdl phải nhỏ hơn.</p>\n<p>Các phương án:</p>\n<ol>\n<li><p>Sử dụng <code>select in()</code>.</p>\n</li>\n<li><p>Sử dụng <code>joins</code>. Để đọc kỹ hơn về joins, thì nên xem ở <a href=\"https://www.w3schools.com/sql/sql_join.asp\" target=\"_blank\" rel=\"noopener\">đây</a></p>\n</li>\n</ol>\n<p>Sử dụng select in() sẽ tiết kiệm truy vấn đi rất nhiều, nếu ví dụ bên trên ta sử dụng select in() thì các sql query cần thiết sẽ là như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># lấy tất cả query</span></span><br><span class=\"line\">SELECT <span class=\"string\">\"users\"</span>.* FROM <span class=\"string\">\"users\"</span></span><br><span class=\"line\"><span class=\"comment\"># lấy articles ứng với từng user</span></span><br><span class=\"line\">SELECT  <span class=\"string\">\"articles\"</span>.* FROM <span class=\"string\">\"articles\"</span> WHERE <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"user_id\"</span> IN (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Tuyệt vời, từ 6(N + 1) truy vấn giờ đã trở thành còn 2.</p>\n<p>Với cách thứ 2 là sử dụng <code>joins</code>:</p>\n<p>joins hiểu đơn giản là ghép hai bảng lại với nhau (lấy một số field cần thiết ở bảng này, gộp với vài field cần thiết ở bảng kia khi mà record ở hai bên thoả mãn một điều kiện nào đó), rồi từ đó thành một bảng tạm dùng trong quá trình bạn sử dụng.</p>\n<p>Quay trở về ví dụ ban đầu, câu truy vấn bây giờ sẽ trở thành:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT User.name, Article.title</span><br><span class=\"line\">      FROM User</span><br><span class=\"line\">      INNER JOIN Article ON User.id = Article.user_id</span><br></pre></td></tr></table></figure>\n\n<p>Lấy vài field cần thiết(name của user và title của Article).<br>Bằng cách thoả mãn điều kiện nào đó(id của user bằng với user_id của article).</p>\n<p>Vậy từ N+1 query ban đầu, đã trở thành một query duy nhất.</p>\n<p>Đến lúc này đã có thể kết luận là joins tốt hơn select in() được chưa? Chưa, câu trả lời sẽ là như vậy. Sang mục 3 chúng ta sẽ tìm hiểu về cách xử lý N+1 thông qua ActiveRecord</p>\n<h1 id=\"3-Xu-ly-N-1-query-trong-ActiveRecord\"><a href=\"#3-Xu-ly-N-1-query-trong-ActiveRecord\" class=\"headerlink\" title=\"3. Xử lý N+1 query trong ActiveRecord\"></a>3. Xử lý N+1 query trong ActiveRecord</h1><p>Trong ActiveRecord cung cấp 3 phương thức để loại bỏ N+1,</p>\n<p>1) Sử dụng <code>preload</code></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.preload(<span class=\"symbol\">:articles</span>)</span><br><span class=\"line\"><span class=\"comment\"># sql sinh ra</span></span><br><span class=\"line\">User Load (<span class=\"number\">0</span>.<span class=\"number\">2</span>ms)  SELECT  <span class=\"string\">\"users\"</span>.* FROM <span class=\"string\">\"users\"</span> LIMIT ?  [[<span class=\"string\">\"LIMIT\"</span>, <span class=\"number\">11</span>]]</span><br><span class=\"line\">Article Load (<span class=\"number\">0</span>.<span class=\"number\">4</span>ms)  SELECT <span class=\"string\">\"articles\"</span>.* FROM <span class=\"string\">\"articles\"</span> WHERE <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"user_id\"</span> IN (?, ?, ?)  [[<span class=\"string\">\"user_id\"</span>, <span class=\"number\">1</span>], [<span class=\"string\">\"user_id\"</span>, <span class=\"number\">2</span>], [<span class=\"string\">\"user_id\"</span>, <span class=\"number\">3</span>]]</span><br></pre></td></tr></table></figure>\n<p>Preload sẽ luôn sử dụng <code>select in()</code></p>\n<p>2) Sử dụng <code>Eagerload</code></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.eager_load(<span class=\"symbol\">:articles</span>)</span><br><span class=\"line\"><span class=\"comment\"># sql sinh ra</span></span><br><span class=\"line\">SELECT  DISTINCT <span class=\"string\">\"users\"</span>.<span class=\"string\">\"id\"</span> FROM <span class=\"string\">\"users\"</span> LEFT OUTER JOIN <span class=\"string\">\"articles\"</span> ON <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"user_id\"</span> = <span class=\"string\">\"users\"</span>.<span class=\"string\">\"id\"</span> LIMIT ?  [[<span class=\"string\">\"LIMIT\"</span>, <span class=\"number\">11</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT <span class=\"string\">\"users\"</span>.<span class=\"string\">\"id\"</span> AS t0_r<span class=\"number\">0</span>, <span class=\"string\">\"users\"</span>.<span class=\"string\">\"name\"</span> AS t0_r1, <span class=\"string\">\"users\"</span>.<span class=\"string\">\"created_at\"</span> AS t0_r2,</span><br><span class=\"line\"><span class=\"string\">\"users\"</span>.<span class=\"string\">\"updated_at\"</span> AS t0_r3, <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"id\"</span> AS t1_r<span class=\"number\">0</span>, <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"name\"</span> AS t1_r1,</span><br><span class=\"line\"><span class=\"string\">\"articles\"</span>.<span class=\"string\">\"user_id\"</span> AS t1_r2, <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"created_at\"</span> AS t1_r3, <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"updated_at\"</span> AS t1_r4</span><br><span class=\"line\">FROM <span class=\"string\">\"users\"</span> LEFT OUTER JOIN <span class=\"string\">\"articles\"</span> ON <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"user_id\"</span> = <span class=\"string\">\"users\"</span>.<span class=\"string\">\"id\"</span></span><br><span class=\"line\">WHERE <span class=\"string\">\"users\"</span>.<span class=\"string\">\"id\"</span> IN (?, ?, ?)  [[<span class=\"string\">\"id\"</span>, <span class=\"number\">1</span>], [<span class=\"string\">\"id\"</span>, <span class=\"number\">2</span>], [<span class=\"string\">\"id\"</span>, <span class=\"number\">3</span>]]</span><br></pre></td></tr></table></figure>\n\n<p>eager_load luôn sử dụng <code>joins</code></p>\n<p>3) Sử dụng <code>Inludes</code></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cách 1</span></span><br><span class=\"line\">User.includes(<span class=\"symbol\">:articles</span>)</span><br><span class=\"line\"><span class=\"comment\"># sql sinh ra</span></span><br><span class=\"line\">SELECT  <span class=\"string\">\"users\"</span>.* FROM <span class=\"string\">\"users\"</span> LIMIT ?  [[<span class=\"string\">\"LIMIT\"</span>, <span class=\"number\">11</span>]]</span><br><span class=\"line\">SELECT <span class=\"string\">\"articles\"</span>.* FROM <span class=\"string\">\"articles\"</span> WHERE <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"user_id\"</span> IN (?, ?, ?)  [[<span class=\"string\">\"user_id\"</span>, <span class=\"number\">1</span>], [<span class=\"string\">\"user_id\"</span>, <span class=\"number\">2</span>], [<span class=\"string\">\"user_id\"</span>, <span class=\"number\">3</span>]]</span><br><span class=\"line\"><span class=\"comment\">#=&gt; giống preload</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># cách 2</span></span><br><span class=\"line\">User.includes(<span class=\"symbol\">:articles</span>).references(<span class=\"symbol\">:articles</span>)</span><br><span class=\"line\"><span class=\"comment\"># sql sinh ra</span></span><br><span class=\"line\">SELECT  DISTINCT <span class=\"string\">\"users\"</span>.<span class=\"string\">\"id\"</span> FROM <span class=\"string\">\"users\"</span> LEFT OUTER JOIN <span class=\"string\">\"articles\"</span></span><br><span class=\"line\">ON <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"user_id\"</span> = <span class=\"string\">\"users\"</span>.<span class=\"string\">\"id\"</span> LIMIT ?  [[<span class=\"string\">\"LIMIT\"</span>, <span class=\"number\">11</span>]]</span><br><span class=\"line\">SELECT <span class=\"string\">\"users\"</span>.<span class=\"string\">\"id\"</span> AS t0_r<span class=\"number\">0</span>, <span class=\"string\">\"users\"</span>.<span class=\"string\">\"name\"</span> AS t0_r1, <span class=\"string\">\"users\"</span>.<span class=\"string\">\"created_at\"</span> AS t0_r2,</span><br><span class=\"line\"><span class=\"string\">\"users\"</span>.<span class=\"string\">\"updated_at\"</span> AS t0_r3, <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"id\"</span> AS t1_r<span class=\"number\">0</span>, <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"name\"</span> AS t1_r1,</span><br><span class=\"line\"><span class=\"string\">\"articles\"</span>.<span class=\"string\">\"user_id\"</span> AS t1_r2, <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"created_at\"</span> AS t1_r3, <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"updated_at\"</span> AS t1_r4</span><br><span class=\"line\">FROM <span class=\"string\">\"users\"</span> LEFT OUTER JOIN <span class=\"string\">\"articles\"</span> ON <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"user_id\"</span> = <span class=\"string\">\"users\"</span>.<span class=\"string\">\"id\"</span></span><br><span class=\"line\">WHERE <span class=\"string\">\"users\"</span>.<span class=\"string\">\"id\"</span> IN (?, ?, ?)  [[<span class=\"string\">\"id\"</span>, <span class=\"number\">1</span>], [<span class=\"string\">\"id\"</span>, <span class=\"number\">2</span>], [<span class=\"string\">\"id\"</span>, <span class=\"number\">3</span>]]</span><br><span class=\"line\"><span class=\"comment\">#=&gt; giống eager_load</span></span><br></pre></td></tr></table></figure>\n<p>Vậy mặc định thì <code>includes</code> sử dụng select in(), nhưng cũng có thể chuyển qua sử dụng joins nếu thêm method references phía sau.</p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Qua ví dụ trên, ta đã tìm hiểu được một số cách cơ bản để loại bỏ N+1, với việc sử dụng joins sẽ ít query phải thực thi nhất, nhưng điều này không đảm bảo rằng sử dụng joins là tối ưu, vì với mỗi query sql, thời gian và công sức máy tính phải dùng là khác nhau, không phải câu sql nào cũng có thời gian thực hiện ngang nhau.</p>\n<p>Sử dụng joins trong nhiều trường hợp csdl quá lớn cũng không phải là một ý hay, khi bản chất của joins là duyệt tuần tự qua hai (nhiều) bảng cần joins, để tìm những phần tử phù hợp rồi cho vào một bảng tạm. Hai vấn đề thấy ngay là việc phải duyệt tuần tự hai hay nhiều bảng là một truy vấn tốn tài nguyên, thứ hai dữ liệu được bỏ vào mảng tạm hiển nhiên ta cần một vùng nhớ để lưu cái bảng tạm này.</p>\n<p>Để đi sâu hơn về vấn đề hiệu năng, các bài tiếp sau chúng ta sẽ thảo luận về nó.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Có thể bạn đã từng nghe qua về N+1, đây là một chủ để cơ bản trong vấn đề quản lý csdl trong code, bài viết này sẽ trình bày về nó dưới góc độ sử dụng trong ruby on rails với framework <code>ActiveRecord</code></p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"N-1-query\"><a href=\"#N-1-query\" class=\"headerlink\" title=\"N+1 query\"></a>N+1 query</h1><p>Xét một ví dụ:</p>\n<p>Tôi có một ứng dụng đơn giản, với hai bảng csdl, bảng thứ nhất là bảng users, bảng thứ hai là bảng articles, một user có thể có nhiều articles nhưng một article chỉ thuộc về user. Hãy xem đoạn mã dưới đây:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.all.each <span class=\"keyword\">do</span> <span class=\"params\">|user|</span></span><br><span class=\"line\">  user.articles</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>Đoạn code trên sẽ duyệt qua tất cả user có trong csdl rồi lấy tất cả các articles ứng với từng user. Rất tường minh và dễ hiểu.</p>\n<p>Tối có 5 user mẫu trong csdl nên các câu lệnh sql sinh ra sau đoạn code trên như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># câu lệnh lấy hết users lên</span></span><br><span class=\"line\">SELECT <span class=\"string\">\"users\"</span>.* FROM <span class=\"string\">\"users\"</span></span><br><span class=\"line\"><span class=\"comment\"># ứng với mỗi user query lấy tất cả articles lên</span></span><br><span class=\"line\">SELECT  <span class=\"string\">\"articles\"</span>.* FROM <span class=\"string\">\"articles\"</span> WHERE <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"user_id\"</span> = ? LIMIT ?  [[<span class=\"string\">\"user_id\"</span>, <span class=\"number\">1</span>], [<span class=\"string\">\"LIMIT\"</span>, <span class=\"number\">11</span>]]</span><br><span class=\"line\">SELECT  <span class=\"string\">\"articles\"</span>.* FROM <span class=\"string\">\"articles\"</span> WHERE <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"user_id\"</span> = ? LIMIT ?  [[<span class=\"string\">\"user_id\"</span>, <span class=\"number\">2</span>], [<span class=\"string\">\"LIMIT\"</span>, <span class=\"number\">11</span>]]</span><br><span class=\"line\">SELECT  <span class=\"string\">\"articles\"</span>.* FROM <span class=\"string\">\"articles\"</span> WHERE <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"user_id\"</span> = ? LIMIT ?  [[<span class=\"string\">\"user_id\"</span>, <span class=\"number\">3</span>], [<span class=\"string\">\"LIMIT\"</span>, <span class=\"number\">11</span>]]</span><br><span class=\"line\">SELECT  <span class=\"string\">\"articles\"</span>.* FROM <span class=\"string\">\"articles\"</span> WHERE <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"user_id\"</span> = ? LIMIT ?  [[<span class=\"string\">\"user_id\"</span>, <span class=\"number\">4</span>], [<span class=\"string\">\"LIMIT\"</span>, <span class=\"number\">11</span>]]</span><br><span class=\"line\">SELECT  <span class=\"string\">\"articles\"</span>.* FROM <span class=\"string\">\"articles\"</span> WHERE <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"user_id\"</span> = ? LIMIT ?  [[<span class=\"string\">\"user_id\"</span>, <span class=\"number\">5</span>], [<span class=\"string\">\"LIMIT\"</span>, <span class=\"number\">11</span>]]</span><br></pre></td></tr></table></figure>\n\n<p>Đây chính là ví dụ điển hình về <code>N+1</code>, <code>N</code>ở đây là 5 (số lượng user có trong csdl) và <code>1</code> chính là câu lệnh sql đầu tiên dùng để lấy tất cả user lên.</p>\n<p>Nhìn như vô hại, mà thực ra ở ví dụ này cũng vô hại thật vì chỉ có 5 record user, nên thời gian load cũng không thấm tháp gì, tuy nhiên trong thực tế thì dữ liệu có thể rất lớn, lên đến hàng triệu record và nếu load dữ liệu như này thì đây là một vấn đề lớn cho hiệu năng của trang web. Hãy đọc tiếp mục 2 để tìm về giải pháp cho tình huống này.</p>\n<h1 id=\"2-Giai-phap\"><a href=\"#2-Giai-phap\" class=\"headerlink\" title=\"2. Giải pháp\"></a>2. Giải pháp</h1><p>Vấn đề đã có, giờ chúng ta cần tìm một giải pháp làm sao để kết quả trả về không đổi, nhưng lượng truy vấn sql trong csdl phải nhỏ hơn.</p>\n<p>Các phương án:</p>\n<ol>\n<li><p>Sử dụng <code>select in()</code>.</p>\n</li>\n<li><p>Sử dụng <code>joins</code>. Để đọc kỹ hơn về joins, thì nên xem ở <a href=\"https://www.w3schools.com/sql/sql_join.asp\" target=\"_blank\" rel=\"noopener\">đây</a></p>\n</li>\n</ol>\n<p>Sử dụng select in() sẽ tiết kiệm truy vấn đi rất nhiều, nếu ví dụ bên trên ta sử dụng select in() thì các sql query cần thiết sẽ là như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># lấy tất cả query</span></span><br><span class=\"line\">SELECT <span class=\"string\">\"users\"</span>.* FROM <span class=\"string\">\"users\"</span></span><br><span class=\"line\"><span class=\"comment\"># lấy articles ứng với từng user</span></span><br><span class=\"line\">SELECT  <span class=\"string\">\"articles\"</span>.* FROM <span class=\"string\">\"articles\"</span> WHERE <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"user_id\"</span> IN (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Tuyệt vời, từ 6(N + 1) truy vấn giờ đã trở thành còn 2.</p>\n<p>Với cách thứ 2 là sử dụng <code>joins</code>:</p>\n<p>joins hiểu đơn giản là ghép hai bảng lại với nhau (lấy một số field cần thiết ở bảng này, gộp với vài field cần thiết ở bảng kia khi mà record ở hai bên thoả mãn một điều kiện nào đó), rồi từ đó thành một bảng tạm dùng trong quá trình bạn sử dụng.</p>\n<p>Quay trở về ví dụ ban đầu, câu truy vấn bây giờ sẽ trở thành:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT User.name, Article.title</span><br><span class=\"line\">      FROM User</span><br><span class=\"line\">      INNER JOIN Article ON User.id = Article.user_id</span><br></pre></td></tr></table></figure>\n\n<p>Lấy vài field cần thiết(name của user và title của Article).<br>Bằng cách thoả mãn điều kiện nào đó(id của user bằng với user_id của article).</p>\n<p>Vậy từ N+1 query ban đầu, đã trở thành một query duy nhất.</p>\n<p>Đến lúc này đã có thể kết luận là joins tốt hơn select in() được chưa? Chưa, câu trả lời sẽ là như vậy. Sang mục 3 chúng ta sẽ tìm hiểu về cách xử lý N+1 thông qua ActiveRecord</p>\n<h1 id=\"3-Xu-ly-N-1-query-trong-ActiveRecord\"><a href=\"#3-Xu-ly-N-1-query-trong-ActiveRecord\" class=\"headerlink\" title=\"3. Xử lý N+1 query trong ActiveRecord\"></a>3. Xử lý N+1 query trong ActiveRecord</h1><p>Trong ActiveRecord cung cấp 3 phương thức để loại bỏ N+1,</p>\n<p>1) Sử dụng <code>preload</code></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.preload(<span class=\"symbol\">:articles</span>)</span><br><span class=\"line\"><span class=\"comment\"># sql sinh ra</span></span><br><span class=\"line\">User Load (<span class=\"number\">0</span>.<span class=\"number\">2</span>ms)  SELECT  <span class=\"string\">\"users\"</span>.* FROM <span class=\"string\">\"users\"</span> LIMIT ?  [[<span class=\"string\">\"LIMIT\"</span>, <span class=\"number\">11</span>]]</span><br><span class=\"line\">Article Load (<span class=\"number\">0</span>.<span class=\"number\">4</span>ms)  SELECT <span class=\"string\">\"articles\"</span>.* FROM <span class=\"string\">\"articles\"</span> WHERE <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"user_id\"</span> IN (?, ?, ?)  [[<span class=\"string\">\"user_id\"</span>, <span class=\"number\">1</span>], [<span class=\"string\">\"user_id\"</span>, <span class=\"number\">2</span>], [<span class=\"string\">\"user_id\"</span>, <span class=\"number\">3</span>]]</span><br></pre></td></tr></table></figure>\n<p>Preload sẽ luôn sử dụng <code>select in()</code></p>\n<p>2) Sử dụng <code>Eagerload</code></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.eager_load(<span class=\"symbol\">:articles</span>)</span><br><span class=\"line\"><span class=\"comment\"># sql sinh ra</span></span><br><span class=\"line\">SELECT  DISTINCT <span class=\"string\">\"users\"</span>.<span class=\"string\">\"id\"</span> FROM <span class=\"string\">\"users\"</span> LEFT OUTER JOIN <span class=\"string\">\"articles\"</span> ON <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"user_id\"</span> = <span class=\"string\">\"users\"</span>.<span class=\"string\">\"id\"</span> LIMIT ?  [[<span class=\"string\">\"LIMIT\"</span>, <span class=\"number\">11</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT <span class=\"string\">\"users\"</span>.<span class=\"string\">\"id\"</span> AS t0_r<span class=\"number\">0</span>, <span class=\"string\">\"users\"</span>.<span class=\"string\">\"name\"</span> AS t0_r1, <span class=\"string\">\"users\"</span>.<span class=\"string\">\"created_at\"</span> AS t0_r2,</span><br><span class=\"line\"><span class=\"string\">\"users\"</span>.<span class=\"string\">\"updated_at\"</span> AS t0_r3, <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"id\"</span> AS t1_r<span class=\"number\">0</span>, <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"name\"</span> AS t1_r1,</span><br><span class=\"line\"><span class=\"string\">\"articles\"</span>.<span class=\"string\">\"user_id\"</span> AS t1_r2, <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"created_at\"</span> AS t1_r3, <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"updated_at\"</span> AS t1_r4</span><br><span class=\"line\">FROM <span class=\"string\">\"users\"</span> LEFT OUTER JOIN <span class=\"string\">\"articles\"</span> ON <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"user_id\"</span> = <span class=\"string\">\"users\"</span>.<span class=\"string\">\"id\"</span></span><br><span class=\"line\">WHERE <span class=\"string\">\"users\"</span>.<span class=\"string\">\"id\"</span> IN (?, ?, ?)  [[<span class=\"string\">\"id\"</span>, <span class=\"number\">1</span>], [<span class=\"string\">\"id\"</span>, <span class=\"number\">2</span>], [<span class=\"string\">\"id\"</span>, <span class=\"number\">3</span>]]</span><br></pre></td></tr></table></figure>\n\n<p>eager_load luôn sử dụng <code>joins</code></p>\n<p>3) Sử dụng <code>Inludes</code></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cách 1</span></span><br><span class=\"line\">User.includes(<span class=\"symbol\">:articles</span>)</span><br><span class=\"line\"><span class=\"comment\"># sql sinh ra</span></span><br><span class=\"line\">SELECT  <span class=\"string\">\"users\"</span>.* FROM <span class=\"string\">\"users\"</span> LIMIT ?  [[<span class=\"string\">\"LIMIT\"</span>, <span class=\"number\">11</span>]]</span><br><span class=\"line\">SELECT <span class=\"string\">\"articles\"</span>.* FROM <span class=\"string\">\"articles\"</span> WHERE <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"user_id\"</span> IN (?, ?, ?)  [[<span class=\"string\">\"user_id\"</span>, <span class=\"number\">1</span>], [<span class=\"string\">\"user_id\"</span>, <span class=\"number\">2</span>], [<span class=\"string\">\"user_id\"</span>, <span class=\"number\">3</span>]]</span><br><span class=\"line\"><span class=\"comment\">#=&gt; giống preload</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># cách 2</span></span><br><span class=\"line\">User.includes(<span class=\"symbol\">:articles</span>).references(<span class=\"symbol\">:articles</span>)</span><br><span class=\"line\"><span class=\"comment\"># sql sinh ra</span></span><br><span class=\"line\">SELECT  DISTINCT <span class=\"string\">\"users\"</span>.<span class=\"string\">\"id\"</span> FROM <span class=\"string\">\"users\"</span> LEFT OUTER JOIN <span class=\"string\">\"articles\"</span></span><br><span class=\"line\">ON <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"user_id\"</span> = <span class=\"string\">\"users\"</span>.<span class=\"string\">\"id\"</span> LIMIT ?  [[<span class=\"string\">\"LIMIT\"</span>, <span class=\"number\">11</span>]]</span><br><span class=\"line\">SELECT <span class=\"string\">\"users\"</span>.<span class=\"string\">\"id\"</span> AS t0_r<span class=\"number\">0</span>, <span class=\"string\">\"users\"</span>.<span class=\"string\">\"name\"</span> AS t0_r1, <span class=\"string\">\"users\"</span>.<span class=\"string\">\"created_at\"</span> AS t0_r2,</span><br><span class=\"line\"><span class=\"string\">\"users\"</span>.<span class=\"string\">\"updated_at\"</span> AS t0_r3, <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"id\"</span> AS t1_r<span class=\"number\">0</span>, <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"name\"</span> AS t1_r1,</span><br><span class=\"line\"><span class=\"string\">\"articles\"</span>.<span class=\"string\">\"user_id\"</span> AS t1_r2, <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"created_at\"</span> AS t1_r3, <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"updated_at\"</span> AS t1_r4</span><br><span class=\"line\">FROM <span class=\"string\">\"users\"</span> LEFT OUTER JOIN <span class=\"string\">\"articles\"</span> ON <span class=\"string\">\"articles\"</span>.<span class=\"string\">\"user_id\"</span> = <span class=\"string\">\"users\"</span>.<span class=\"string\">\"id\"</span></span><br><span class=\"line\">WHERE <span class=\"string\">\"users\"</span>.<span class=\"string\">\"id\"</span> IN (?, ?, ?)  [[<span class=\"string\">\"id\"</span>, <span class=\"number\">1</span>], [<span class=\"string\">\"id\"</span>, <span class=\"number\">2</span>], [<span class=\"string\">\"id\"</span>, <span class=\"number\">3</span>]]</span><br><span class=\"line\"><span class=\"comment\">#=&gt; giống eager_load</span></span><br></pre></td></tr></table></figure>\n<p>Vậy mặc định thì <code>includes</code> sử dụng select in(), nhưng cũng có thể chuyển qua sử dụng joins nếu thêm method references phía sau.</p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Qua ví dụ trên, ta đã tìm hiểu được một số cách cơ bản để loại bỏ N+1, với việc sử dụng joins sẽ ít query phải thực thi nhất, nhưng điều này không đảm bảo rằng sử dụng joins là tối ưu, vì với mỗi query sql, thời gian và công sức máy tính phải dùng là khác nhau, không phải câu sql nào cũng có thời gian thực hiện ngang nhau.</p>\n<p>Sử dụng joins trong nhiều trường hợp csdl quá lớn cũng không phải là một ý hay, khi bản chất của joins là duyệt tuần tự qua hai (nhiều) bảng cần joins, để tìm những phần tử phù hợp rồi cho vào một bảng tạm. Hai vấn đề thấy ngay là việc phải duyệt tuần tự hai hay nhiều bảng là một truy vấn tốn tài nguyên, thứ hai dữ liệu được bỏ vào mảng tạm hiển nhiên ta cần một vùng nhớ để lưu cái bảng tạm này.</p>\n<p>Để đi sâu hơn về vấn đề hiệu năng, các bài tiếp sau chúng ta sẽ thảo luận về nó.</p>\n"},{"title":"Immutable Vs Mutable","date":"2019-04-07T17:00:00.000Z","draft":false,"mytag":"Ruby","mytrend":"COOL","_content":"\n# Đặt vấn đề\n\nVấn đề ở đây là tôi không có vấn đề gì để đặt cả, bài viết nằm trong mớ kiến thức rối bòng bong của tôi, và giờ tôi cần viết lại như một cách để ôn tập, hy vọng nó có thể giúp được ai đó.\n\n# Luận bàn\n\n# 1. Khái niệm mutable, immutable và ruby\n\nĐi thẳng vào vấn đề, chúng ta cần đề cập đến ba vấn đề: `mutable`, `immutable` và cách ruby xử lý hai khái niệm đó. Trước hết nếu bạn đã quên, thì tôi xin được nhắc lại định nghĩa của chúng.\n\nXin trích dẫn [wiki](https://en.wikipedia.org/wiki/Immutable_object):\n\n> In object-oriented and functional programming, an immutable object (unchangeable[1] object) is an object whose state cannot be modified after it is created.[2] This is in contrast to a mutable object (changeable object), which can be modified after it is created.\n\nTranslate:\n\n> Trong lập trình hướng đối tượng và lập trình hàm, một đối tượng được coi immutable, là một đối tượng **không thể thay đổi** trạng thái sau khi nó được tạo lần đầu, ngược lại với một đối tượng được coi là mutable nó có thể **thay đổi** trạng thái sau khi được khởi tạo lần đầu.\n\nDùng từ quá khó hiểu, what the hell is \"trạng thái\"? Theo một cách hàn lâm và đầy đủ, trạng thái của một đối tượng ngoài đời thật được thiết lập bởi tất cả những gì tạo nên chúng.\n\nTương tự, các trạng thái của một đối tượng trong lập trình cũng được thiết lập bằng tất cả những gì tạo nên chúng. Ví dụ:\n\nVới 1 biến integer cơ bản `x = 10` thì trạng thái của nó được tạo ra bởi tên biến và giá trị, ở đây tên biến là `x` và giá trị là `10`, đâu đó trong vùng nhớ (Ram) của bạn sẽ lưu trữ cái chữ `x` kèm số `10` này.\n\nĐồng nghĩa với đó nếu tôi thay đổi được giá trị 10 của biến x thì x là một đối tượng mutable và ngược lại nó là một đối tượng immutable.\n\nTôi gán `x = 11` và thành công\n\nTừ đó có thể đưa ra kết luận x là một mutable?\n\nCâu trả lời là không, một số khái niệm rối rắm làm khó ta lúc đầu. Như đã biết, thứ mà CPU làm việc là địa chỉ vùng nhớ và chỉ địa chỉ vùng nhớ mà thôi. Những thứ khác nó không quan tâm.\n\nVới câu lệnh gán `x = 10`. Nó được hệ điều hành phiên dịch thành \"có một biến tên `x` được gán giá trị bằng `10`, Ram, mày hãy bố trí thêm hai slot để lưu trữ `x` và `10`\". Vậy lúc đó:\n\n`x`(tên biến) được lưu ở vị trí AAA\n`10`(giá trị) được lưu ở vị trí BBB\n\nVới lệnh gán tiếp theo `x = 11`:\n\n`x` vẫn yên vị nằm ở vị trí AAA\n`10` cũng vẫn yên trí nằm ở vị trí BBB\n`11` giá trị mới gán cho biến x thì lúc này nằm ở vị trí CCC\n\nVậy khi chạy một lệnh gán mới thì biến x đã được gán bằng giá trị trên một vùng nhớ khác, còn vùng nhớ ban đầu **không thay đổi giá trị** nên ta có thể kết luận x là một immutable.\n\nChứng minh bằng ví dụ sau trong ruby, chú ý là ruby là một ngôn ngữ script, với trình thông dịch VM bên dưới để xử lý của nó được viết bằng C, nên ở lớp cơ sở của ruby ta không thể truy xuất vị trí vùng nhớ đến từng thanh ghi như trong C được (việc đó được làm ở lớp core YARV). Tuy nhiên, ta có thể kiếm tra được vị trí tượng trưng trên bộ nhớ của nó thông qua `object_id`.\n\n```ruby\nx = 10\nx.object_id\n#=> 21\nx = 11\nx.object_id\n#=> 23\n```\n\nNote: Nếu bạn gán tiếp x = 12 và kiểm tra lại object_id, lúc này bạn sẽ thấy nó bằng 25. Giá trị 10, 11, 12 tương đương với object_id là 21, 23, 25. Liệu có một quy luật nào ở đây? Câu trả lời là có, nhưng vấn đề này sẽ được đề cập đến trong một bài viết tiếp theo.\n\nTừ ví dụ trên bạn đã hiểu về immutable, vậy còn mutable? Đơn giản nhất là hãy hiểu ngược lại với immutable, nêu gán x = 11 và x có object_id không đổi thì x chính là mutable.\n\n```\nTất cả các loại dữ liệu nguyên thuỷ trong ruby đều là immutable.\n```\n\nInteger, float, string, boolean chúng đều là immutable.\n\n# 2. Liệu đây có phải là một kiến thức cần thiết?\n\nChắc chắn là có.\n\nThứ nhất: Nếu trong công việc bạn không bao giờ phải dùng đến nó, bạn có thể nói về nó như một kiến thức hàn lâm để thể hiện khả năng với sếp và yêu cầu tăng lương :worried:\n\nThứ hai: Xét ví dụ sau\n\n```ruby\nstr = \"\"\n[\"Hoang\", \"Duy\", \"Chinh\"].each do |i|\n  str += i\nend\n```\n\nTư tưởng của đoạn mã này là cộng tất cả các phần tử trong một mảng string và cho ra kết quả cuối cùng là một chuỗi tổng hợp tất cả các phần tử.\nCó điều gì bất thường trong đoạn mã này không nhỉ? Câu trả lời là có. Như những gì chúng ta đã nói ở trên có hai điều cần lưu ý:\n\n> 1. Các kiểu dữ liệu nguyên thuỷ trong ruby đều là immutable và hiển nhiên string không ngoại lệ.\n\n> 2. Khi một object là immutable, thì việc bạn gán nó bằng một giá trị khác đồng nghĩa với việc vùng nhớ cũ sẽ không được dùng đến, mà nó sẽ ra một vùng nhớ mới rồi ghi kết quả mới lên đó, cứ lặp lại như vậy mãi mãi.\n\nTừ hai điều trên ta rút ra được kết luận:\n\n1. Trong lần gán đầu tiên str có giá trị là chuỗi rỗng và được khởi tạo tại ví trí A1\n2. Trong lần lặp `each` đầu tiên, str có giá trị là \"Hoang\" và nó lưu ở vị trí A2\n3. Trong lần lặp `each` thứ hai, str có giá trị mới là \"HoangDuy\" và nó lưu ở vị trí mới là A3\n4. Trong lần lặp cuối cùng thì str có giá trị chúng ta mong đợi là \"HoangDuyChinh\" và nó lưu ở vị trí A4\n\nChứng minh:\n\n```ruby\nstr = \"\"\nputs \"First location: #{str.object_id}\"\n[\"Hoang\", \"Duy\", \"Chinh\"].each do |i|\n  str += i\n  puts \"value: #{str} | location: #{str.object_id}\"\nend\n\nputs \"Final value: #{str} | location: #{str.object_id}\"\n```\n\nKết quả:\n```\nFirst location: 47434608564740\nvalue: Hoang | location: 47434608564520\nvalue: HoangDuy | location: 47434608564440\nvalue: HoangDuyChinh | location: 47434608564360\nFinal value: HoangDuyChinh | location: 47434608564360\n```\n\nVà thứ chúng ta quan tâm từ đó về sau là vị trí A4 này. Vậy còn A1, A2, A3 cũng đang mang giá trị? Chúng đi đâu về đâu? Chính xác, nó trở thành một vùng nhớ rác và sẽ được GC dọn dẹp nhưng không phải ngay lập tức, vậy trong khoảng thời gian đó nó vẫn nắm giữ các vùng nhớ của chúng ta. Đó cũng là một trong các lý do việc bạn muốn chạy ruby on rails trên một chiếc máy tính sinh viên 2GB là vô cùng khó khăn. Ruby ăn Ram như uống nước lã vậy.\n\nVí dụ trên mảng ta có ba phần tử và ta có 3 giá trị rác trên bộ nhớ, hãy tưởng tượng bạn có một mảng một triệu phần tử :worried:\n\nGiải pháp trong trường hợp này là gì? Đó là duyệt mảng như một `object reference` chứ không phải một biến giá trị\n\n```ruby\nstr = \"\"\n[\"Hoang\", \"Duy\", \"Chinh\"].each do |i|\n  str << i\nend\n```\n\nNhư vậy str sẽ ở đúng một vùng nhớ và ta không có một đống biến rác không mong đợi.\n\nChứng minh:\n\n```ruby\nstr = \"\"\nputs \"First location: #{str.object_id}\"\n[\"Hoang\", \"Duy\", \"Chinh\"].each do |i|\n  str << i\n  puts \"value: #{str} | location: #{str.object_id}\"\nend\n\nputs \"Final value: #{str} | location: #{str.object_id}\"\n```\n\nKết quả:\n```\nFirst location: 47196120971580\nvalue: Hoang | location: 47196120971580\nvalue: HoangDuy | location: 47196120971580\nvalue: HoangDuyChinh | location: 47196120971580\nFinal value: HoangDuyChinh | location: 47196120971580\n```\n# Kết luận\n\nTrong bài viết có đề cập đến `object_id` và `GC`, đây là hai vấn đề nền tảng trong ruby, hy vọng sẽ có khả năng viết các bài khác về hai chủ đề này, nếu có thắc mắc hay đóng góp cho thiếu xót của tác giả, hãy để lại bình luận bên dưới :smile:.\n","source":"_posts/2019-04-08-immutable-va-mutable-trong-ruby.md","raw":"---\ntitle: \"Immutable Vs Mutable\"\ndate: 2019-04-08\ndraft: false\ntags: [\"ruby\", \"programming\"]\ncategories: [\"ruby notes\", \"programming\"]\nmytag: \"Ruby\"\nmytrend: \"COOL\"\n---\n\n# Đặt vấn đề\n\nVấn đề ở đây là tôi không có vấn đề gì để đặt cả, bài viết nằm trong mớ kiến thức rối bòng bong của tôi, và giờ tôi cần viết lại như một cách để ôn tập, hy vọng nó có thể giúp được ai đó.\n\n# Luận bàn\n\n# 1. Khái niệm mutable, immutable và ruby\n\nĐi thẳng vào vấn đề, chúng ta cần đề cập đến ba vấn đề: `mutable`, `immutable` và cách ruby xử lý hai khái niệm đó. Trước hết nếu bạn đã quên, thì tôi xin được nhắc lại định nghĩa của chúng.\n\nXin trích dẫn [wiki](https://en.wikipedia.org/wiki/Immutable_object):\n\n> In object-oriented and functional programming, an immutable object (unchangeable[1] object) is an object whose state cannot be modified after it is created.[2] This is in contrast to a mutable object (changeable object), which can be modified after it is created.\n\nTranslate:\n\n> Trong lập trình hướng đối tượng và lập trình hàm, một đối tượng được coi immutable, là một đối tượng **không thể thay đổi** trạng thái sau khi nó được tạo lần đầu, ngược lại với một đối tượng được coi là mutable nó có thể **thay đổi** trạng thái sau khi được khởi tạo lần đầu.\n\nDùng từ quá khó hiểu, what the hell is \"trạng thái\"? Theo một cách hàn lâm và đầy đủ, trạng thái của một đối tượng ngoài đời thật được thiết lập bởi tất cả những gì tạo nên chúng.\n\nTương tự, các trạng thái của một đối tượng trong lập trình cũng được thiết lập bằng tất cả những gì tạo nên chúng. Ví dụ:\n\nVới 1 biến integer cơ bản `x = 10` thì trạng thái của nó được tạo ra bởi tên biến và giá trị, ở đây tên biến là `x` và giá trị là `10`, đâu đó trong vùng nhớ (Ram) của bạn sẽ lưu trữ cái chữ `x` kèm số `10` này.\n\nĐồng nghĩa với đó nếu tôi thay đổi được giá trị 10 của biến x thì x là một đối tượng mutable và ngược lại nó là một đối tượng immutable.\n\nTôi gán `x = 11` và thành công\n\nTừ đó có thể đưa ra kết luận x là một mutable?\n\nCâu trả lời là không, một số khái niệm rối rắm làm khó ta lúc đầu. Như đã biết, thứ mà CPU làm việc là địa chỉ vùng nhớ và chỉ địa chỉ vùng nhớ mà thôi. Những thứ khác nó không quan tâm.\n\nVới câu lệnh gán `x = 10`. Nó được hệ điều hành phiên dịch thành \"có một biến tên `x` được gán giá trị bằng `10`, Ram, mày hãy bố trí thêm hai slot để lưu trữ `x` và `10`\". Vậy lúc đó:\n\n`x`(tên biến) được lưu ở vị trí AAA\n`10`(giá trị) được lưu ở vị trí BBB\n\nVới lệnh gán tiếp theo `x = 11`:\n\n`x` vẫn yên vị nằm ở vị trí AAA\n`10` cũng vẫn yên trí nằm ở vị trí BBB\n`11` giá trị mới gán cho biến x thì lúc này nằm ở vị trí CCC\n\nVậy khi chạy một lệnh gán mới thì biến x đã được gán bằng giá trị trên một vùng nhớ khác, còn vùng nhớ ban đầu **không thay đổi giá trị** nên ta có thể kết luận x là một immutable.\n\nChứng minh bằng ví dụ sau trong ruby, chú ý là ruby là một ngôn ngữ script, với trình thông dịch VM bên dưới để xử lý của nó được viết bằng C, nên ở lớp cơ sở của ruby ta không thể truy xuất vị trí vùng nhớ đến từng thanh ghi như trong C được (việc đó được làm ở lớp core YARV). Tuy nhiên, ta có thể kiếm tra được vị trí tượng trưng trên bộ nhớ của nó thông qua `object_id`.\n\n```ruby\nx = 10\nx.object_id\n#=> 21\nx = 11\nx.object_id\n#=> 23\n```\n\nNote: Nếu bạn gán tiếp x = 12 và kiểm tra lại object_id, lúc này bạn sẽ thấy nó bằng 25. Giá trị 10, 11, 12 tương đương với object_id là 21, 23, 25. Liệu có một quy luật nào ở đây? Câu trả lời là có, nhưng vấn đề này sẽ được đề cập đến trong một bài viết tiếp theo.\n\nTừ ví dụ trên bạn đã hiểu về immutable, vậy còn mutable? Đơn giản nhất là hãy hiểu ngược lại với immutable, nêu gán x = 11 và x có object_id không đổi thì x chính là mutable.\n\n```\nTất cả các loại dữ liệu nguyên thuỷ trong ruby đều là immutable.\n```\n\nInteger, float, string, boolean chúng đều là immutable.\n\n# 2. Liệu đây có phải là một kiến thức cần thiết?\n\nChắc chắn là có.\n\nThứ nhất: Nếu trong công việc bạn không bao giờ phải dùng đến nó, bạn có thể nói về nó như một kiến thức hàn lâm để thể hiện khả năng với sếp và yêu cầu tăng lương :worried:\n\nThứ hai: Xét ví dụ sau\n\n```ruby\nstr = \"\"\n[\"Hoang\", \"Duy\", \"Chinh\"].each do |i|\n  str += i\nend\n```\n\nTư tưởng của đoạn mã này là cộng tất cả các phần tử trong một mảng string và cho ra kết quả cuối cùng là một chuỗi tổng hợp tất cả các phần tử.\nCó điều gì bất thường trong đoạn mã này không nhỉ? Câu trả lời là có. Như những gì chúng ta đã nói ở trên có hai điều cần lưu ý:\n\n> 1. Các kiểu dữ liệu nguyên thuỷ trong ruby đều là immutable và hiển nhiên string không ngoại lệ.\n\n> 2. Khi một object là immutable, thì việc bạn gán nó bằng một giá trị khác đồng nghĩa với việc vùng nhớ cũ sẽ không được dùng đến, mà nó sẽ ra một vùng nhớ mới rồi ghi kết quả mới lên đó, cứ lặp lại như vậy mãi mãi.\n\nTừ hai điều trên ta rút ra được kết luận:\n\n1. Trong lần gán đầu tiên str có giá trị là chuỗi rỗng và được khởi tạo tại ví trí A1\n2. Trong lần lặp `each` đầu tiên, str có giá trị là \"Hoang\" và nó lưu ở vị trí A2\n3. Trong lần lặp `each` thứ hai, str có giá trị mới là \"HoangDuy\" và nó lưu ở vị trí mới là A3\n4. Trong lần lặp cuối cùng thì str có giá trị chúng ta mong đợi là \"HoangDuyChinh\" và nó lưu ở vị trí A4\n\nChứng minh:\n\n```ruby\nstr = \"\"\nputs \"First location: #{str.object_id}\"\n[\"Hoang\", \"Duy\", \"Chinh\"].each do |i|\n  str += i\n  puts \"value: #{str} | location: #{str.object_id}\"\nend\n\nputs \"Final value: #{str} | location: #{str.object_id}\"\n```\n\nKết quả:\n```\nFirst location: 47434608564740\nvalue: Hoang | location: 47434608564520\nvalue: HoangDuy | location: 47434608564440\nvalue: HoangDuyChinh | location: 47434608564360\nFinal value: HoangDuyChinh | location: 47434608564360\n```\n\nVà thứ chúng ta quan tâm từ đó về sau là vị trí A4 này. Vậy còn A1, A2, A3 cũng đang mang giá trị? Chúng đi đâu về đâu? Chính xác, nó trở thành một vùng nhớ rác và sẽ được GC dọn dẹp nhưng không phải ngay lập tức, vậy trong khoảng thời gian đó nó vẫn nắm giữ các vùng nhớ của chúng ta. Đó cũng là một trong các lý do việc bạn muốn chạy ruby on rails trên một chiếc máy tính sinh viên 2GB là vô cùng khó khăn. Ruby ăn Ram như uống nước lã vậy.\n\nVí dụ trên mảng ta có ba phần tử và ta có 3 giá trị rác trên bộ nhớ, hãy tưởng tượng bạn có một mảng một triệu phần tử :worried:\n\nGiải pháp trong trường hợp này là gì? Đó là duyệt mảng như một `object reference` chứ không phải một biến giá trị\n\n```ruby\nstr = \"\"\n[\"Hoang\", \"Duy\", \"Chinh\"].each do |i|\n  str << i\nend\n```\n\nNhư vậy str sẽ ở đúng một vùng nhớ và ta không có một đống biến rác không mong đợi.\n\nChứng minh:\n\n```ruby\nstr = \"\"\nputs \"First location: #{str.object_id}\"\n[\"Hoang\", \"Duy\", \"Chinh\"].each do |i|\n  str << i\n  puts \"value: #{str} | location: #{str.object_id}\"\nend\n\nputs \"Final value: #{str} | location: #{str.object_id}\"\n```\n\nKết quả:\n```\nFirst location: 47196120971580\nvalue: Hoang | location: 47196120971580\nvalue: HoangDuy | location: 47196120971580\nvalue: HoangDuyChinh | location: 47196120971580\nFinal value: HoangDuyChinh | location: 47196120971580\n```\n# Kết luận\n\nTrong bài viết có đề cập đến `object_id` và `GC`, đây là hai vấn đề nền tảng trong ruby, hy vọng sẽ có khả năng viết các bài khác về hai chủ đề này, nếu có thắc mắc hay đóng góp cho thiếu xót của tác giả, hãy để lại bình luận bên dưới :smile:.\n","slug":"2019-04-08-immutable-va-mutable-trong-ruby","published":1,"updated":"2019-11-13T04:02:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7sufm000x5rrs1cxrd9qm","content":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Vấn đề ở đây là tôi không có vấn đề gì để đặt cả, bài viết nằm trong mớ kiến thức rối bòng bong của tôi, và giờ tôi cần viết lại như một cách để ôn tập, hy vọng nó có thể giúp được ai đó.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-Khai-niem-mutable-immutable-va-ruby\"><a href=\"#1-Khai-niem-mutable-immutable-va-ruby\" class=\"headerlink\" title=\"1. Khái niệm mutable, immutable và ruby\"></a>1. Khái niệm mutable, immutable và ruby</h1><p>Đi thẳng vào vấn đề, chúng ta cần đề cập đến ba vấn đề: <code>mutable</code>, <code>immutable</code> và cách ruby xử lý hai khái niệm đó. Trước hết nếu bạn đã quên, thì tôi xin được nhắc lại định nghĩa của chúng.</p>\n<p>Xin trích dẫn <a href=\"https://en.wikipedia.org/wiki/Immutable_object\" target=\"_blank\" rel=\"noopener\">wiki</a>:</p>\n<blockquote>\n<p>In object-oriented and functional programming, an immutable object (unchangeable[1] object) is an object whose state cannot be modified after it is created.[2] This is in contrast to a mutable object (changeable object), which can be modified after it is created.</p>\n</blockquote>\n<p>Translate:</p>\n<blockquote>\n<p>Trong lập trình hướng đối tượng và lập trình hàm, một đối tượng được coi immutable, là một đối tượng <strong>không thể thay đổi</strong> trạng thái sau khi nó được tạo lần đầu, ngược lại với một đối tượng được coi là mutable nó có thể <strong>thay đổi</strong> trạng thái sau khi được khởi tạo lần đầu.</p>\n</blockquote>\n<p>Dùng từ quá khó hiểu, what the hell is “trạng thái”? Theo một cách hàn lâm và đầy đủ, trạng thái của một đối tượng ngoài đời thật được thiết lập bởi tất cả những gì tạo nên chúng.</p>\n<p>Tương tự, các trạng thái của một đối tượng trong lập trình cũng được thiết lập bằng tất cả những gì tạo nên chúng. Ví dụ:</p>\n<p>Với 1 biến integer cơ bản <code>x = 10</code> thì trạng thái của nó được tạo ra bởi tên biến và giá trị, ở đây tên biến là <code>x</code> và giá trị là <code>10</code>, đâu đó trong vùng nhớ (Ram) của bạn sẽ lưu trữ cái chữ <code>x</code> kèm số <code>10</code> này.</p>\n<p>Đồng nghĩa với đó nếu tôi thay đổi được giá trị 10 của biến x thì x là một đối tượng mutable và ngược lại nó là một đối tượng immutable.</p>\n<p>Tôi gán <code>x = 11</code> và thành công</p>\n<p>Từ đó có thể đưa ra kết luận x là một mutable?</p>\n<p>Câu trả lời là không, một số khái niệm rối rắm làm khó ta lúc đầu. Như đã biết, thứ mà CPU làm việc là địa chỉ vùng nhớ và chỉ địa chỉ vùng nhớ mà thôi. Những thứ khác nó không quan tâm.</p>\n<p>Với câu lệnh gán <code>x = 10</code>. Nó được hệ điều hành phiên dịch thành “có một biến tên <code>x</code> được gán giá trị bằng <code>10</code>, Ram, mày hãy bố trí thêm hai slot để lưu trữ <code>x</code> và <code>10</code>“. Vậy lúc đó:</p>\n<p><code>x</code>(tên biến) được lưu ở vị trí AAA<br><code>10</code>(giá trị) được lưu ở vị trí BBB</p>\n<p>Với lệnh gán tiếp theo <code>x = 11</code>:</p>\n<p><code>x</code> vẫn yên vị nằm ở vị trí AAA<br><code>10</code> cũng vẫn yên trí nằm ở vị trí BBB<br><code>11</code> giá trị mới gán cho biến x thì lúc này nằm ở vị trí CCC</p>\n<p>Vậy khi chạy một lệnh gán mới thì biến x đã được gán bằng giá trị trên một vùng nhớ khác, còn vùng nhớ ban đầu <strong>không thay đổi giá trị</strong> nên ta có thể kết luận x là một immutable.</p>\n<p>Chứng minh bằng ví dụ sau trong ruby, chú ý là ruby là một ngôn ngữ script, với trình thông dịch VM bên dưới để xử lý của nó được viết bằng C, nên ở lớp cơ sở của ruby ta không thể truy xuất vị trí vùng nhớ đến từng thanh ghi như trong C được (việc đó được làm ở lớp core YARV). Tuy nhiên, ta có thể kiếm tra được vị trí tượng trưng trên bộ nhớ của nó thông qua <code>object_id</code>.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">10</span></span><br><span class=\"line\">x.object_id</span><br><span class=\"line\"><span class=\"comment\">#=&gt; 21</span></span><br><span class=\"line\">x = <span class=\"number\">11</span></span><br><span class=\"line\">x.object_id</span><br><span class=\"line\"><span class=\"comment\">#=&gt; 23</span></span><br></pre></td></tr></table></figure>\n\n<p>Note: Nếu bạn gán tiếp x = 12 và kiểm tra lại object_id, lúc này bạn sẽ thấy nó bằng 25. Giá trị 10, 11, 12 tương đương với object_id là 21, 23, 25. Liệu có một quy luật nào ở đây? Câu trả lời là có, nhưng vấn đề này sẽ được đề cập đến trong một bài viết tiếp theo.</p>\n<p>Từ ví dụ trên bạn đã hiểu về immutable, vậy còn mutable? Đơn giản nhất là hãy hiểu ngược lại với immutable, nêu gán x = 11 và x có object_id không đổi thì x chính là mutable.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Tất cả các loại dữ liệu nguyên thuỷ trong ruby đều là immutable.</span><br></pre></td></tr></table></figure>\n\n<p>Integer, float, string, boolean chúng đều là immutable.</p>\n<h1 id=\"2-Lieu-day-co-phai-la-mot-kien-thuc-can-thiet\"><a href=\"#2-Lieu-day-co-phai-la-mot-kien-thuc-can-thiet\" class=\"headerlink\" title=\"2. Liệu đây có phải là một kiến thức cần thiết?\"></a>2. Liệu đây có phải là một kiến thức cần thiết?</h1><p>Chắc chắn là có.</p>\n<p>Thứ nhất: Nếu trong công việc bạn không bao giờ phải dùng đến nó, bạn có thể nói về nó như một kiến thức hàn lâm để thể hiện khả năng với sếp và yêu cầu tăng lương :worried:</p>\n<p>Thứ hai: Xét ví dụ sau</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">\"\"</span></span><br><span class=\"line\">[<span class=\"string\">\"Hoang\"</span>, <span class=\"string\">\"Duy\"</span>, <span class=\"string\">\"Chinh\"</span>].each <span class=\"keyword\">do</span> <span class=\"params\">|i|</span></span><br><span class=\"line\">  str += i</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Tư tưởng của đoạn mã này là cộng tất cả các phần tử trong một mảng string và cho ra kết quả cuối cùng là một chuỗi tổng hợp tất cả các phần tử.<br>Có điều gì bất thường trong đoạn mã này không nhỉ? Câu trả lời là có. Như những gì chúng ta đã nói ở trên có hai điều cần lưu ý:</p>\n<blockquote>\n<ol>\n<li>Các kiểu dữ liệu nguyên thuỷ trong ruby đều là immutable và hiển nhiên string không ngoại lệ.</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>Khi một object là immutable, thì việc bạn gán nó bằng một giá trị khác đồng nghĩa với việc vùng nhớ cũ sẽ không được dùng đến, mà nó sẽ ra một vùng nhớ mới rồi ghi kết quả mới lên đó, cứ lặp lại như vậy mãi mãi.</li>\n</ol>\n</blockquote>\n<p>Từ hai điều trên ta rút ra được kết luận:</p>\n<ol>\n<li>Trong lần gán đầu tiên str có giá trị là chuỗi rỗng và được khởi tạo tại ví trí A1</li>\n<li>Trong lần lặp <code>each</code> đầu tiên, str có giá trị là “Hoang” và nó lưu ở vị trí A2</li>\n<li>Trong lần lặp <code>each</code> thứ hai, str có giá trị mới là “HoangDuy” và nó lưu ở vị trí mới là A3</li>\n<li>Trong lần lặp cuối cùng thì str có giá trị chúng ta mong đợi là “HoangDuyChinh” và nó lưu ở vị trí A4</li>\n</ol>\n<p>Chứng minh:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">\"\"</span></span><br><span class=\"line\">puts <span class=\"string\">\"First location: <span class=\"subst\">#&#123;str.object_id&#125;</span>\"</span></span><br><span class=\"line\">[<span class=\"string\">\"Hoang\"</span>, <span class=\"string\">\"Duy\"</span>, <span class=\"string\">\"Chinh\"</span>].each <span class=\"keyword\">do</span> <span class=\"params\">|i|</span></span><br><span class=\"line\">  str += i</span><br><span class=\"line\">  puts <span class=\"string\">\"value: <span class=\"subst\">#&#123;str&#125;</span> | location: <span class=\"subst\">#&#123;str.object_id&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">\"Final value: <span class=\"subst\">#&#123;str&#125;</span> | location: <span class=\"subst\">#&#123;str.object_id&#125;</span>\"</span></span><br></pre></td></tr></table></figure>\n\n<p>Kết quả:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">First location: 47434608564740</span><br><span class=\"line\">value: Hoang | location: 47434608564520</span><br><span class=\"line\">value: HoangDuy | location: 47434608564440</span><br><span class=\"line\">value: HoangDuyChinh | location: 47434608564360</span><br><span class=\"line\">Final value: HoangDuyChinh | location: 47434608564360</span><br></pre></td></tr></table></figure>\n\n<p>Và thứ chúng ta quan tâm từ đó về sau là vị trí A4 này. Vậy còn A1, A2, A3 cũng đang mang giá trị? Chúng đi đâu về đâu? Chính xác, nó trở thành một vùng nhớ rác và sẽ được GC dọn dẹp nhưng không phải ngay lập tức, vậy trong khoảng thời gian đó nó vẫn nắm giữ các vùng nhớ của chúng ta. Đó cũng là một trong các lý do việc bạn muốn chạy ruby on rails trên một chiếc máy tính sinh viên 2GB là vô cùng khó khăn. Ruby ăn Ram như uống nước lã vậy.</p>\n<p>Ví dụ trên mảng ta có ba phần tử và ta có 3 giá trị rác trên bộ nhớ, hãy tưởng tượng bạn có một mảng một triệu phần tử :worried:</p>\n<p>Giải pháp trong trường hợp này là gì? Đó là duyệt mảng như một <code>object reference</code> chứ không phải một biến giá trị</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">\"\"</span></span><br><span class=\"line\">[<span class=\"string\">\"Hoang\"</span>, <span class=\"string\">\"Duy\"</span>, <span class=\"string\">\"Chinh\"</span>].each <span class=\"keyword\">do</span> <span class=\"params\">|i|</span></span><br><span class=\"line\">  str &lt;&lt; i</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Như vậy str sẽ ở đúng một vùng nhớ và ta không có một đống biến rác không mong đợi.</p>\n<p>Chứng minh:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">\"\"</span></span><br><span class=\"line\">puts <span class=\"string\">\"First location: <span class=\"subst\">#&#123;str.object_id&#125;</span>\"</span></span><br><span class=\"line\">[<span class=\"string\">\"Hoang\"</span>, <span class=\"string\">\"Duy\"</span>, <span class=\"string\">\"Chinh\"</span>].each <span class=\"keyword\">do</span> <span class=\"params\">|i|</span></span><br><span class=\"line\">  str &lt;&lt; i</span><br><span class=\"line\">  puts <span class=\"string\">\"value: <span class=\"subst\">#&#123;str&#125;</span> | location: <span class=\"subst\">#&#123;str.object_id&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">\"Final value: <span class=\"subst\">#&#123;str&#125;</span> | location: <span class=\"subst\">#&#123;str.object_id&#125;</span>\"</span></span><br></pre></td></tr></table></figure>\n\n<p>Kết quả:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">First location: 47196120971580</span><br><span class=\"line\">value: Hoang | location: 47196120971580</span><br><span class=\"line\">value: HoangDuy | location: 47196120971580</span><br><span class=\"line\">value: HoangDuyChinh | location: 47196120971580</span><br><span class=\"line\">Final value: HoangDuyChinh | location: 47196120971580</span><br></pre></td></tr></table></figure>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Trong bài viết có đề cập đến <code>object_id</code> và <code>GC</code>, đây là hai vấn đề nền tảng trong ruby, hy vọng sẽ có khả năng viết các bài khác về hai chủ đề này, nếu có thắc mắc hay đóng góp cho thiếu xót của tác giả, hãy để lại bình luận bên dưới :smile:.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Vấn đề ở đây là tôi không có vấn đề gì để đặt cả, bài viết nằm trong mớ kiến thức rối bòng bong của tôi, và giờ tôi cần viết lại như một cách để ôn tập, hy vọng nó có thể giúp được ai đó.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-Khai-niem-mutable-immutable-va-ruby\"><a href=\"#1-Khai-niem-mutable-immutable-va-ruby\" class=\"headerlink\" title=\"1. Khái niệm mutable, immutable và ruby\"></a>1. Khái niệm mutable, immutable và ruby</h1><p>Đi thẳng vào vấn đề, chúng ta cần đề cập đến ba vấn đề: <code>mutable</code>, <code>immutable</code> và cách ruby xử lý hai khái niệm đó. Trước hết nếu bạn đã quên, thì tôi xin được nhắc lại định nghĩa của chúng.</p>\n<p>Xin trích dẫn <a href=\"https://en.wikipedia.org/wiki/Immutable_object\" target=\"_blank\" rel=\"noopener\">wiki</a>:</p>\n<blockquote>\n<p>In object-oriented and functional programming, an immutable object (unchangeable[1] object) is an object whose state cannot be modified after it is created.[2] This is in contrast to a mutable object (changeable object), which can be modified after it is created.</p>\n</blockquote>\n<p>Translate:</p>\n<blockquote>\n<p>Trong lập trình hướng đối tượng và lập trình hàm, một đối tượng được coi immutable, là một đối tượng <strong>không thể thay đổi</strong> trạng thái sau khi nó được tạo lần đầu, ngược lại với một đối tượng được coi là mutable nó có thể <strong>thay đổi</strong> trạng thái sau khi được khởi tạo lần đầu.</p>\n</blockquote>\n<p>Dùng từ quá khó hiểu, what the hell is “trạng thái”? Theo một cách hàn lâm và đầy đủ, trạng thái của một đối tượng ngoài đời thật được thiết lập bởi tất cả những gì tạo nên chúng.</p>\n<p>Tương tự, các trạng thái của một đối tượng trong lập trình cũng được thiết lập bằng tất cả những gì tạo nên chúng. Ví dụ:</p>\n<p>Với 1 biến integer cơ bản <code>x = 10</code> thì trạng thái của nó được tạo ra bởi tên biến và giá trị, ở đây tên biến là <code>x</code> và giá trị là <code>10</code>, đâu đó trong vùng nhớ (Ram) của bạn sẽ lưu trữ cái chữ <code>x</code> kèm số <code>10</code> này.</p>\n<p>Đồng nghĩa với đó nếu tôi thay đổi được giá trị 10 của biến x thì x là một đối tượng mutable và ngược lại nó là một đối tượng immutable.</p>\n<p>Tôi gán <code>x = 11</code> và thành công</p>\n<p>Từ đó có thể đưa ra kết luận x là một mutable?</p>\n<p>Câu trả lời là không, một số khái niệm rối rắm làm khó ta lúc đầu. Như đã biết, thứ mà CPU làm việc là địa chỉ vùng nhớ và chỉ địa chỉ vùng nhớ mà thôi. Những thứ khác nó không quan tâm.</p>\n<p>Với câu lệnh gán <code>x = 10</code>. Nó được hệ điều hành phiên dịch thành “có một biến tên <code>x</code> được gán giá trị bằng <code>10</code>, Ram, mày hãy bố trí thêm hai slot để lưu trữ <code>x</code> và <code>10</code>“. Vậy lúc đó:</p>\n<p><code>x</code>(tên biến) được lưu ở vị trí AAA<br><code>10</code>(giá trị) được lưu ở vị trí BBB</p>\n<p>Với lệnh gán tiếp theo <code>x = 11</code>:</p>\n<p><code>x</code> vẫn yên vị nằm ở vị trí AAA<br><code>10</code> cũng vẫn yên trí nằm ở vị trí BBB<br><code>11</code> giá trị mới gán cho biến x thì lúc này nằm ở vị trí CCC</p>\n<p>Vậy khi chạy một lệnh gán mới thì biến x đã được gán bằng giá trị trên một vùng nhớ khác, còn vùng nhớ ban đầu <strong>không thay đổi giá trị</strong> nên ta có thể kết luận x là một immutable.</p>\n<p>Chứng minh bằng ví dụ sau trong ruby, chú ý là ruby là một ngôn ngữ script, với trình thông dịch VM bên dưới để xử lý của nó được viết bằng C, nên ở lớp cơ sở của ruby ta không thể truy xuất vị trí vùng nhớ đến từng thanh ghi như trong C được (việc đó được làm ở lớp core YARV). Tuy nhiên, ta có thể kiếm tra được vị trí tượng trưng trên bộ nhớ của nó thông qua <code>object_id</code>.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">10</span></span><br><span class=\"line\">x.object_id</span><br><span class=\"line\"><span class=\"comment\">#=&gt; 21</span></span><br><span class=\"line\">x = <span class=\"number\">11</span></span><br><span class=\"line\">x.object_id</span><br><span class=\"line\"><span class=\"comment\">#=&gt; 23</span></span><br></pre></td></tr></table></figure>\n\n<p>Note: Nếu bạn gán tiếp x = 12 và kiểm tra lại object_id, lúc này bạn sẽ thấy nó bằng 25. Giá trị 10, 11, 12 tương đương với object_id là 21, 23, 25. Liệu có một quy luật nào ở đây? Câu trả lời là có, nhưng vấn đề này sẽ được đề cập đến trong một bài viết tiếp theo.</p>\n<p>Từ ví dụ trên bạn đã hiểu về immutable, vậy còn mutable? Đơn giản nhất là hãy hiểu ngược lại với immutable, nêu gán x = 11 và x có object_id không đổi thì x chính là mutable.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Tất cả các loại dữ liệu nguyên thuỷ trong ruby đều là immutable.</span><br></pre></td></tr></table></figure>\n\n<p>Integer, float, string, boolean chúng đều là immutable.</p>\n<h1 id=\"2-Lieu-day-co-phai-la-mot-kien-thuc-can-thiet\"><a href=\"#2-Lieu-day-co-phai-la-mot-kien-thuc-can-thiet\" class=\"headerlink\" title=\"2. Liệu đây có phải là một kiến thức cần thiết?\"></a>2. Liệu đây có phải là một kiến thức cần thiết?</h1><p>Chắc chắn là có.</p>\n<p>Thứ nhất: Nếu trong công việc bạn không bao giờ phải dùng đến nó, bạn có thể nói về nó như một kiến thức hàn lâm để thể hiện khả năng với sếp và yêu cầu tăng lương :worried:</p>\n<p>Thứ hai: Xét ví dụ sau</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">\"\"</span></span><br><span class=\"line\">[<span class=\"string\">\"Hoang\"</span>, <span class=\"string\">\"Duy\"</span>, <span class=\"string\">\"Chinh\"</span>].each <span class=\"keyword\">do</span> <span class=\"params\">|i|</span></span><br><span class=\"line\">  str += i</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Tư tưởng của đoạn mã này là cộng tất cả các phần tử trong một mảng string và cho ra kết quả cuối cùng là một chuỗi tổng hợp tất cả các phần tử.<br>Có điều gì bất thường trong đoạn mã này không nhỉ? Câu trả lời là có. Như những gì chúng ta đã nói ở trên có hai điều cần lưu ý:</p>\n<blockquote>\n<ol>\n<li>Các kiểu dữ liệu nguyên thuỷ trong ruby đều là immutable và hiển nhiên string không ngoại lệ.</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>Khi một object là immutable, thì việc bạn gán nó bằng một giá trị khác đồng nghĩa với việc vùng nhớ cũ sẽ không được dùng đến, mà nó sẽ ra một vùng nhớ mới rồi ghi kết quả mới lên đó, cứ lặp lại như vậy mãi mãi.</li>\n</ol>\n</blockquote>\n<p>Từ hai điều trên ta rút ra được kết luận:</p>\n<ol>\n<li>Trong lần gán đầu tiên str có giá trị là chuỗi rỗng và được khởi tạo tại ví trí A1</li>\n<li>Trong lần lặp <code>each</code> đầu tiên, str có giá trị là “Hoang” và nó lưu ở vị trí A2</li>\n<li>Trong lần lặp <code>each</code> thứ hai, str có giá trị mới là “HoangDuy” và nó lưu ở vị trí mới là A3</li>\n<li>Trong lần lặp cuối cùng thì str có giá trị chúng ta mong đợi là “HoangDuyChinh” và nó lưu ở vị trí A4</li>\n</ol>\n<p>Chứng minh:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">\"\"</span></span><br><span class=\"line\">puts <span class=\"string\">\"First location: <span class=\"subst\">#&#123;str.object_id&#125;</span>\"</span></span><br><span class=\"line\">[<span class=\"string\">\"Hoang\"</span>, <span class=\"string\">\"Duy\"</span>, <span class=\"string\">\"Chinh\"</span>].each <span class=\"keyword\">do</span> <span class=\"params\">|i|</span></span><br><span class=\"line\">  str += i</span><br><span class=\"line\">  puts <span class=\"string\">\"value: <span class=\"subst\">#&#123;str&#125;</span> | location: <span class=\"subst\">#&#123;str.object_id&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">\"Final value: <span class=\"subst\">#&#123;str&#125;</span> | location: <span class=\"subst\">#&#123;str.object_id&#125;</span>\"</span></span><br></pre></td></tr></table></figure>\n\n<p>Kết quả:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">First location: 47434608564740</span><br><span class=\"line\">value: Hoang | location: 47434608564520</span><br><span class=\"line\">value: HoangDuy | location: 47434608564440</span><br><span class=\"line\">value: HoangDuyChinh | location: 47434608564360</span><br><span class=\"line\">Final value: HoangDuyChinh | location: 47434608564360</span><br></pre></td></tr></table></figure>\n\n<p>Và thứ chúng ta quan tâm từ đó về sau là vị trí A4 này. Vậy còn A1, A2, A3 cũng đang mang giá trị? Chúng đi đâu về đâu? Chính xác, nó trở thành một vùng nhớ rác và sẽ được GC dọn dẹp nhưng không phải ngay lập tức, vậy trong khoảng thời gian đó nó vẫn nắm giữ các vùng nhớ của chúng ta. Đó cũng là một trong các lý do việc bạn muốn chạy ruby on rails trên một chiếc máy tính sinh viên 2GB là vô cùng khó khăn. Ruby ăn Ram như uống nước lã vậy.</p>\n<p>Ví dụ trên mảng ta có ba phần tử và ta có 3 giá trị rác trên bộ nhớ, hãy tưởng tượng bạn có một mảng một triệu phần tử :worried:</p>\n<p>Giải pháp trong trường hợp này là gì? Đó là duyệt mảng như một <code>object reference</code> chứ không phải một biến giá trị</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">\"\"</span></span><br><span class=\"line\">[<span class=\"string\">\"Hoang\"</span>, <span class=\"string\">\"Duy\"</span>, <span class=\"string\">\"Chinh\"</span>].each <span class=\"keyword\">do</span> <span class=\"params\">|i|</span></span><br><span class=\"line\">  str &lt;&lt; i</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Như vậy str sẽ ở đúng một vùng nhớ và ta không có một đống biến rác không mong đợi.</p>\n<p>Chứng minh:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">\"\"</span></span><br><span class=\"line\">puts <span class=\"string\">\"First location: <span class=\"subst\">#&#123;str.object_id&#125;</span>\"</span></span><br><span class=\"line\">[<span class=\"string\">\"Hoang\"</span>, <span class=\"string\">\"Duy\"</span>, <span class=\"string\">\"Chinh\"</span>].each <span class=\"keyword\">do</span> <span class=\"params\">|i|</span></span><br><span class=\"line\">  str &lt;&lt; i</span><br><span class=\"line\">  puts <span class=\"string\">\"value: <span class=\"subst\">#&#123;str&#125;</span> | location: <span class=\"subst\">#&#123;str.object_id&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">\"Final value: <span class=\"subst\">#&#123;str&#125;</span> | location: <span class=\"subst\">#&#123;str.object_id&#125;</span>\"</span></span><br></pre></td></tr></table></figure>\n\n<p>Kết quả:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">First location: 47196120971580</span><br><span class=\"line\">value: Hoang | location: 47196120971580</span><br><span class=\"line\">value: HoangDuy | location: 47196120971580</span><br><span class=\"line\">value: HoangDuyChinh | location: 47196120971580</span><br><span class=\"line\">Final value: HoangDuyChinh | location: 47196120971580</span><br></pre></td></tr></table></figure>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Trong bài viết có đề cập đến <code>object_id</code> và <code>GC</code>, đây là hai vấn đề nền tảng trong ruby, hy vọng sẽ có khả năng viết các bài khác về hai chủ đề này, nếu có thắc mắc hay đóng góp cho thiếu xót của tác giả, hãy để lại bình luận bên dưới :smile:.</p>\n"},{"title":"SaaS, PaaS và IaaS","date":"2019-04-09T17:00:00.000Z","draft":false,"mytag":"#TIL","_content":"\n**SaaS:  Software as a Service**\nVí dụ như: TFS, Github.\nMua một căn nhà và mua xong thì vào đó ở luôn chứ không cần vất vả xây dựng gì thêm.\nƯu: Nhanh, tiện.\nNhược: không có tính tuỳ chỉnh, vì dịch vụ sẽ phổ thông và không thể cover hết được nhu cầu của  chúng ta.\n\n**PaaS:  Platform as a Service**\nVí dụ như: Heroku, AWS Elastic Beanstalk.\nMua một căn nhà đã có một số tiện ích cơ bản để sống, mình chỉ cần dọn thêm đồ đạc của mình(source code) vào là sống được.\nƯu: Tuỳ chỉnh dễ dàng hơn SaaS, làm nhanh và đơn giản hơn IaaS\nNhược: Vẫn không thể tự thiết lập các cài đặt nâng cao hơn.\n\n**IaaS: Infrastructure as a Service**\nVí dụ như: EC2, DigitalOcean\nMua một mảnh đất sau đó thì tự xây nhà, sắm đồ...\nƯu: Được tự chủ hệ thống và có thể tuỳ ý cấu hình(trong giới hạn của cloud cho phép).\nNhược: Phức tạp nhất trong 3 loại.\n","source":"_posts/2019-04-10-iaas-paas-saas.md","raw":"---\ntitle: \"SaaS, PaaS và IaaS\"\ndate: 2019-04-10\ndraft: false\ntags: [\"til\"]\ncategories: [\"rails notes\"]\nmytag: \"#TIL\"\n---\n\n**SaaS:  Software as a Service**\nVí dụ như: TFS, Github.\nMua một căn nhà và mua xong thì vào đó ở luôn chứ không cần vất vả xây dựng gì thêm.\nƯu: Nhanh, tiện.\nNhược: không có tính tuỳ chỉnh, vì dịch vụ sẽ phổ thông và không thể cover hết được nhu cầu của  chúng ta.\n\n**PaaS:  Platform as a Service**\nVí dụ như: Heroku, AWS Elastic Beanstalk.\nMua một căn nhà đã có một số tiện ích cơ bản để sống, mình chỉ cần dọn thêm đồ đạc của mình(source code) vào là sống được.\nƯu: Tuỳ chỉnh dễ dàng hơn SaaS, làm nhanh và đơn giản hơn IaaS\nNhược: Vẫn không thể tự thiết lập các cài đặt nâng cao hơn.\n\n**IaaS: Infrastructure as a Service**\nVí dụ như: EC2, DigitalOcean\nMua một mảnh đất sau đó thì tự xây nhà, sắm đồ...\nƯu: Được tự chủ hệ thống và có thể tuỳ ý cấu hình(trong giới hạn của cloud cho phép).\nNhược: Phức tạp nhất trong 3 loại.\n","slug":"2019-04-10-iaas-paas-saas","published":1,"updated":"2019-11-13T04:03:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7sufn000z5rrs5xuc13v6","content":"<p><strong>SaaS:  Software as a Service</strong><br>Ví dụ như: TFS, Github.<br>Mua một căn nhà và mua xong thì vào đó ở luôn chứ không cần vất vả xây dựng gì thêm.<br>Ưu: Nhanh, tiện.<br>Nhược: không có tính tuỳ chỉnh, vì dịch vụ sẽ phổ thông và không thể cover hết được nhu cầu của  chúng ta.</p>\n<p><strong>PaaS:  Platform as a Service</strong><br>Ví dụ như: Heroku, AWS Elastic Beanstalk.<br>Mua một căn nhà đã có một số tiện ích cơ bản để sống, mình chỉ cần dọn thêm đồ đạc của mình(source code) vào là sống được.<br>Ưu: Tuỳ chỉnh dễ dàng hơn SaaS, làm nhanh và đơn giản hơn IaaS<br>Nhược: Vẫn không thể tự thiết lập các cài đặt nâng cao hơn.</p>\n<p><strong>IaaS: Infrastructure as a Service</strong><br>Ví dụ như: EC2, DigitalOcean<br>Mua một mảnh đất sau đó thì tự xây nhà, sắm đồ…<br>Ưu: Được tự chủ hệ thống và có thể tuỳ ý cấu hình(trong giới hạn của cloud cho phép).<br>Nhược: Phức tạp nhất trong 3 loại.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>SaaS:  Software as a Service</strong><br>Ví dụ như: TFS, Github.<br>Mua một căn nhà và mua xong thì vào đó ở luôn chứ không cần vất vả xây dựng gì thêm.<br>Ưu: Nhanh, tiện.<br>Nhược: không có tính tuỳ chỉnh, vì dịch vụ sẽ phổ thông và không thể cover hết được nhu cầu của  chúng ta.</p>\n<p><strong>PaaS:  Platform as a Service</strong><br>Ví dụ như: Heroku, AWS Elastic Beanstalk.<br>Mua một căn nhà đã có một số tiện ích cơ bản để sống, mình chỉ cần dọn thêm đồ đạc của mình(source code) vào là sống được.<br>Ưu: Tuỳ chỉnh dễ dàng hơn SaaS, làm nhanh và đơn giản hơn IaaS<br>Nhược: Vẫn không thể tự thiết lập các cài đặt nâng cao hơn.</p>\n<p><strong>IaaS: Infrastructure as a Service</strong><br>Ví dụ như: EC2, DigitalOcean<br>Mua một mảnh đất sau đó thì tự xây nhà, sắm đồ…<br>Ưu: Được tự chủ hệ thống và có thể tuỳ ý cấu hình(trong giới hạn của cloud cho phép).<br>Nhược: Phức tạp nhất trong 3 loại.</p>\n"},{"title":"Upload Với S3 Trong Rails","date":"2019-04-09T17:00:00.000Z","draft":false,"mytag":"#TIL","_content":"\nGhi chú này được tham khảo từ bài viết [Lưu trữ file trên Amazon S3](https://viblo.asia/p/ror-luu-tru-file-tren-amazon-s3-BMvRpNXEzwY#_cau-hinh-connect-toi-dich-vu-s3-trong-ung-dung-rails-3) của tác giả `@duyth1993` trên website `viblo.com`.\n\nBài toán: Hiện tại tôi đang cần tìm một dịch vụ lưu trữ file, trước giờ tôi không sử dụng vì chưa có nhu cầu. Tìm kiếm một lúc thì tôi quyết định sử dụng S3 vì sẵn cũng đang còn tài khoản free của của AWS, tham khảo bài viết bên trên một số lưu ý khi sử dụng này mà tôi rút ra như sau:\n\n1. Bài viết trên của tác giả viết rất chi tiết, tuy nhiên hướng dẫn đó là trên rails 4 và cần chú ý thay đổi một số config để phù hợp với rails 5 mà tôi đang sử dụng. Đó là về việc sử dụng `credentials` thay thế cho `secret`, thông tin đầy hơn có thể tham khảo tại bài viết [Rails và bảo mật thông tin quan trọng](https://hdchinh.github.io/ruby/2019/02/22/xu-ly-thong-tin-quan-trong-trong-rails.html).\n\n2. Có 4 thông tin quan trọng để cấu hình đến S3 đó là: `access_key_id`, `secret_access_key`, `region` và `bucket_name`.\n\n3. Một số config để connect tới server S3 là do thư viện `aws-sdk-rails` quy định vì vậy đơn giản là làm theo và không thắc mắc tại sao.\n\n4. Cần chú ý bước config cho file trước khi upload với các thông tin như: `content_type`(định dạng file, việc sử dụng định dạng file dạng không tương thích với ảnh bạn upload lên dẫn để việc không thể hiển thị view bức ảnh đó.), `acl`(access control list: quy định về việc ai có thể access khi có url của file) và `server_side_encryption`(lựa chọn này để mã hóa file bạn tải lên, đi kèm đó là giảm hiệu năng vì thêm 1 bước cần xử lý.)\n\nSource demo xem tại [đây](https://github.com/hdchinh/S3_with_rails_5.2)\n","source":"_posts/2019-04-10-upload-file-len-aws-s3-va-nhung-van-de-can-luu-y.md","raw":"---\ntitle: \"Upload Với S3 Trong Rails\"\ndate: 2019-04-10\ndraft: false\ntags: [\"aws\", \"rails\", \"til\"]\ncategories: [\"rails notes\"]\nmytag: \"#TIL\"\n---\n\nGhi chú này được tham khảo từ bài viết [Lưu trữ file trên Amazon S3](https://viblo.asia/p/ror-luu-tru-file-tren-amazon-s3-BMvRpNXEzwY#_cau-hinh-connect-toi-dich-vu-s3-trong-ung-dung-rails-3) của tác giả `@duyth1993` trên website `viblo.com`.\n\nBài toán: Hiện tại tôi đang cần tìm một dịch vụ lưu trữ file, trước giờ tôi không sử dụng vì chưa có nhu cầu. Tìm kiếm một lúc thì tôi quyết định sử dụng S3 vì sẵn cũng đang còn tài khoản free của của AWS, tham khảo bài viết bên trên một số lưu ý khi sử dụng này mà tôi rút ra như sau:\n\n1. Bài viết trên của tác giả viết rất chi tiết, tuy nhiên hướng dẫn đó là trên rails 4 và cần chú ý thay đổi một số config để phù hợp với rails 5 mà tôi đang sử dụng. Đó là về việc sử dụng `credentials` thay thế cho `secret`, thông tin đầy hơn có thể tham khảo tại bài viết [Rails và bảo mật thông tin quan trọng](https://hdchinh.github.io/ruby/2019/02/22/xu-ly-thong-tin-quan-trong-trong-rails.html).\n\n2. Có 4 thông tin quan trọng để cấu hình đến S3 đó là: `access_key_id`, `secret_access_key`, `region` và `bucket_name`.\n\n3. Một số config để connect tới server S3 là do thư viện `aws-sdk-rails` quy định vì vậy đơn giản là làm theo và không thắc mắc tại sao.\n\n4. Cần chú ý bước config cho file trước khi upload với các thông tin như: `content_type`(định dạng file, việc sử dụng định dạng file dạng không tương thích với ảnh bạn upload lên dẫn để việc không thể hiển thị view bức ảnh đó.), `acl`(access control list: quy định về việc ai có thể access khi có url của file) và `server_side_encryption`(lựa chọn này để mã hóa file bạn tải lên, đi kèm đó là giảm hiệu năng vì thêm 1 bước cần xử lý.)\n\nSource demo xem tại [đây](https://github.com/hdchinh/S3_with_rails_5.2)\n","slug":"2019-04-10-upload-file-len-aws-s3-va-nhung-van-de-can-luu-y","published":1,"updated":"2019-11-13T04:03:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7sufq00145rrsbq88di4e","content":"<p>Ghi chú này được tham khảo từ bài viết <a href=\"https://viblo.asia/p/ror-luu-tru-file-tren-amazon-s3-BMvRpNXEzwY#_cau-hinh-connect-toi-dich-vu-s3-trong-ung-dung-rails-3\" target=\"_blank\" rel=\"noopener\">Lưu trữ file trên Amazon S3</a> của tác giả <code>@duyth1993</code> trên website <code>viblo.com</code>.</p>\n<p>Bài toán: Hiện tại tôi đang cần tìm một dịch vụ lưu trữ file, trước giờ tôi không sử dụng vì chưa có nhu cầu. Tìm kiếm một lúc thì tôi quyết định sử dụng S3 vì sẵn cũng đang còn tài khoản free của của AWS, tham khảo bài viết bên trên một số lưu ý khi sử dụng này mà tôi rút ra như sau:</p>\n<ol>\n<li><p>Bài viết trên của tác giả viết rất chi tiết, tuy nhiên hướng dẫn đó là trên rails 4 và cần chú ý thay đổi một số config để phù hợp với rails 5 mà tôi đang sử dụng. Đó là về việc sử dụng <code>credentials</code> thay thế cho <code>secret</code>, thông tin đầy hơn có thể tham khảo tại bài viết <a href=\"https://hdchinh.github.io/ruby/2019/02/22/xu-ly-thong-tin-quan-trong-trong-rails.html\">Rails và bảo mật thông tin quan trọng</a>.</p>\n</li>\n<li><p>Có 4 thông tin quan trọng để cấu hình đến S3 đó là: <code>access_key_id</code>, <code>secret_access_key</code>, <code>region</code> và <code>bucket_name</code>.</p>\n</li>\n<li><p>Một số config để connect tới server S3 là do thư viện <code>aws-sdk-rails</code> quy định vì vậy đơn giản là làm theo và không thắc mắc tại sao.</p>\n</li>\n<li><p>Cần chú ý bước config cho file trước khi upload với các thông tin như: <code>content_type</code>(định dạng file, việc sử dụng định dạng file dạng không tương thích với ảnh bạn upload lên dẫn để việc không thể hiển thị view bức ảnh đó.), <code>acl</code>(access control list: quy định về việc ai có thể access khi có url của file) và <code>server_side_encryption</code>(lựa chọn này để mã hóa file bạn tải lên, đi kèm đó là giảm hiệu năng vì thêm 1 bước cần xử lý.)</p>\n</li>\n</ol>\n<p>Source demo xem tại <a href=\"https://github.com/hdchinh/S3_with_rails_5.2\" target=\"_blank\" rel=\"noopener\">đây</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Ghi chú này được tham khảo từ bài viết <a href=\"https://viblo.asia/p/ror-luu-tru-file-tren-amazon-s3-BMvRpNXEzwY#_cau-hinh-connect-toi-dich-vu-s3-trong-ung-dung-rails-3\" target=\"_blank\" rel=\"noopener\">Lưu trữ file trên Amazon S3</a> của tác giả <code>@duyth1993</code> trên website <code>viblo.com</code>.</p>\n<p>Bài toán: Hiện tại tôi đang cần tìm một dịch vụ lưu trữ file, trước giờ tôi không sử dụng vì chưa có nhu cầu. Tìm kiếm một lúc thì tôi quyết định sử dụng S3 vì sẵn cũng đang còn tài khoản free của của AWS, tham khảo bài viết bên trên một số lưu ý khi sử dụng này mà tôi rút ra như sau:</p>\n<ol>\n<li><p>Bài viết trên của tác giả viết rất chi tiết, tuy nhiên hướng dẫn đó là trên rails 4 và cần chú ý thay đổi một số config để phù hợp với rails 5 mà tôi đang sử dụng. Đó là về việc sử dụng <code>credentials</code> thay thế cho <code>secret</code>, thông tin đầy hơn có thể tham khảo tại bài viết <a href=\"https://hdchinh.github.io/ruby/2019/02/22/xu-ly-thong-tin-quan-trong-trong-rails.html\">Rails và bảo mật thông tin quan trọng</a>.</p>\n</li>\n<li><p>Có 4 thông tin quan trọng để cấu hình đến S3 đó là: <code>access_key_id</code>, <code>secret_access_key</code>, <code>region</code> và <code>bucket_name</code>.</p>\n</li>\n<li><p>Một số config để connect tới server S3 là do thư viện <code>aws-sdk-rails</code> quy định vì vậy đơn giản là làm theo và không thắc mắc tại sao.</p>\n</li>\n<li><p>Cần chú ý bước config cho file trước khi upload với các thông tin như: <code>content_type</code>(định dạng file, việc sử dụng định dạng file dạng không tương thích với ảnh bạn upload lên dẫn để việc không thể hiển thị view bức ảnh đó.), <code>acl</code>(access control list: quy định về việc ai có thể access khi có url của file) và <code>server_side_encryption</code>(lựa chọn này để mã hóa file bạn tải lên, đi kèm đó là giảm hiệu năng vì thêm 1 bước cần xử lý.)</p>\n</li>\n</ol>\n<p>Source demo xem tại <a href=\"https://github.com/hdchinh/S3_with_rails_5.2\" target=\"_blank\" rel=\"noopener\">đây</a></p>\n"},{"title":"Sử Dụng Carrierwave Với S3","date":"2019-04-10T17:00:00.000Z","draft":false,"mytag":"#TIL","_content":"\n# Gemfile\n\n```ruby\ngem 'fog', require: 'fog/aws'\ngem 'carrierwave'\n```\n# Class Uploader\n\n```ruby\nstorage :fog\n```\n\n# File cấu hình config/initializers/carrierwave.rb\n\n```ruby\nrequire 'carrierwave/storage/fog'\n\nCarrierWave.configure do |config|\n  config.fog_credentials = {\n    :provider              => 'AWS',\n    :aws_access_key_id     => Rails.application.credentials.access_key_id,\n    :aws_secret_access_key => Rails.application.credentials.secret_access_key,\n    :region                => Rails.application.credentials.s3_region,\n    :path_style            => true,\n    :host                  => 's3.us-east-2.amazonaws.com',\n    :endpoint              => 'https://s3.us-east-2.amazonaws.com'\n  }\n  config.cache_dir = \"#{Rails.root}/tmp/uploads\"\n  config.fog_directory  = Rails.application.credentials.s3_bucket\n  config.fog_public     = true\n  config.fog_attributes = { 'Cache-Control' => \"max-age=#{10.day.to_i}\" }\n  config.storage = :fog\nend\n```\n\n# Acess File uploaded\n\n`Instance.field_name_image.url` (get link s3)\n\n# Source demo\n\n[Tại đây](https://github.com/hdchinh/s3_carrierwave)\n","source":"_posts/2019-04-11-su-dung-carrierwave-voi-s3.md","raw":"---\ntitle: \"Sử Dụng Carrierwave Với S3\"\ndate: 2019-04-11\ndraft: false\ntags: [\"rails\", \"aws\", \"carrierwave\", \"til\"]\ncategories: [\"rails notes\"]\nmytag: \"#TIL\"\n---\n\n# Gemfile\n\n```ruby\ngem 'fog', require: 'fog/aws'\ngem 'carrierwave'\n```\n# Class Uploader\n\n```ruby\nstorage :fog\n```\n\n# File cấu hình config/initializers/carrierwave.rb\n\n```ruby\nrequire 'carrierwave/storage/fog'\n\nCarrierWave.configure do |config|\n  config.fog_credentials = {\n    :provider              => 'AWS',\n    :aws_access_key_id     => Rails.application.credentials.access_key_id,\n    :aws_secret_access_key => Rails.application.credentials.secret_access_key,\n    :region                => Rails.application.credentials.s3_region,\n    :path_style            => true,\n    :host                  => 's3.us-east-2.amazonaws.com',\n    :endpoint              => 'https://s3.us-east-2.amazonaws.com'\n  }\n  config.cache_dir = \"#{Rails.root}/tmp/uploads\"\n  config.fog_directory  = Rails.application.credentials.s3_bucket\n  config.fog_public     = true\n  config.fog_attributes = { 'Cache-Control' => \"max-age=#{10.day.to_i}\" }\n  config.storage = :fog\nend\n```\n\n# Acess File uploaded\n\n`Instance.field_name_image.url` (get link s3)\n\n# Source demo\n\n[Tại đây](https://github.com/hdchinh/s3_carrierwave)\n","slug":"2019-04-11-su-dung-carrierwave-voi-s3","published":1,"updated":"2019-11-13T04:04:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7sufs00165rrsdds1h8z2","content":"<h1 id=\"Gemfile\"><a href=\"#Gemfile\" class=\"headerlink\" title=\"Gemfile\"></a>Gemfile</h1><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem <span class=\"string\">'fog'</span>, <span class=\"symbol\">require:</span> <span class=\"string\">'fog/aws'</span></span><br><span class=\"line\">gem <span class=\"string\">'carrierwave'</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Class-Uploader\"><a href=\"#Class-Uploader\" class=\"headerlink\" title=\"Class Uploader\"></a>Class Uploader</h1><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">storage <span class=\"symbol\">:fog</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"File-cau-hinh-config-initializers-carrierwave-rb\"><a href=\"#File-cau-hinh-config-initializers-carrierwave-rb\" class=\"headerlink\" title=\"File cấu hình config/initializers/carrierwave.rb\"></a>File cấu hình config/initializers/carrierwave.rb</h1><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'carrierwave/storage/fog'</span></span><br><span class=\"line\"></span><br><span class=\"line\">CarrierWave.configure <span class=\"keyword\">do</span> <span class=\"params\">|config|</span></span><br><span class=\"line\">  config.fog_credentials = &#123;</span><br><span class=\"line\">    <span class=\"symbol\">:provider</span>              =&gt; <span class=\"string\">'AWS'</span>,</span><br><span class=\"line\">    <span class=\"symbol\">:aws_access_key_id</span>     =&gt; Rails.application.credentials.access_key_id,</span><br><span class=\"line\">    <span class=\"symbol\">:aws_secret_access_key</span> =&gt; Rails.application.credentials.secret_access_key,</span><br><span class=\"line\">    <span class=\"symbol\">:region</span>                =&gt; Rails.application.credentials.s3_region,</span><br><span class=\"line\">    <span class=\"symbol\">:path_style</span>            =&gt; <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"symbol\">:host</span>                  =&gt; <span class=\"string\">'s3.us-east-2.amazonaws.com'</span>,</span><br><span class=\"line\">    <span class=\"symbol\">:endpoint</span>              =&gt; <span class=\"string\">'https://s3.us-east-2.amazonaws.com'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  config.cache_dir = <span class=\"string\">\"<span class=\"subst\">#&#123;Rails.root&#125;</span>/tmp/uploads\"</span></span><br><span class=\"line\">  config.fog_directory  = Rails.application.credentials.s3_bucket</span><br><span class=\"line\">  config.fog_public     = <span class=\"literal\">true</span></span><br><span class=\"line\">  config.fog_attributes = &#123; <span class=\"string\">'Cache-Control'</span> =&gt; <span class=\"string\">\"max-age=<span class=\"subst\">#&#123;<span class=\"number\">10</span>.day.to_i&#125;</span>\"</span> &#125;</span><br><span class=\"line\">  config.storage = <span class=\"symbol\">:fog</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Acess-File-uploaded\"><a href=\"#Acess-File-uploaded\" class=\"headerlink\" title=\"Acess File uploaded\"></a>Acess File uploaded</h1><p><code>Instance.field_name_image.url</code> (get link s3)</p>\n<h1 id=\"Source-demo\"><a href=\"#Source-demo\" class=\"headerlink\" title=\"Source demo\"></a>Source demo</h1><p><a href=\"https://github.com/hdchinh/s3_carrierwave\" target=\"_blank\" rel=\"noopener\">Tại đây</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Gemfile\"><a href=\"#Gemfile\" class=\"headerlink\" title=\"Gemfile\"></a>Gemfile</h1><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem <span class=\"string\">'fog'</span>, <span class=\"symbol\">require:</span> <span class=\"string\">'fog/aws'</span></span><br><span class=\"line\">gem <span class=\"string\">'carrierwave'</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Class-Uploader\"><a href=\"#Class-Uploader\" class=\"headerlink\" title=\"Class Uploader\"></a>Class Uploader</h1><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">storage <span class=\"symbol\">:fog</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"File-cau-hinh-config-initializers-carrierwave-rb\"><a href=\"#File-cau-hinh-config-initializers-carrierwave-rb\" class=\"headerlink\" title=\"File cấu hình config/initializers/carrierwave.rb\"></a>File cấu hình config/initializers/carrierwave.rb</h1><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'carrierwave/storage/fog'</span></span><br><span class=\"line\"></span><br><span class=\"line\">CarrierWave.configure <span class=\"keyword\">do</span> <span class=\"params\">|config|</span></span><br><span class=\"line\">  config.fog_credentials = &#123;</span><br><span class=\"line\">    <span class=\"symbol\">:provider</span>              =&gt; <span class=\"string\">'AWS'</span>,</span><br><span class=\"line\">    <span class=\"symbol\">:aws_access_key_id</span>     =&gt; Rails.application.credentials.access_key_id,</span><br><span class=\"line\">    <span class=\"symbol\">:aws_secret_access_key</span> =&gt; Rails.application.credentials.secret_access_key,</span><br><span class=\"line\">    <span class=\"symbol\">:region</span>                =&gt; Rails.application.credentials.s3_region,</span><br><span class=\"line\">    <span class=\"symbol\">:path_style</span>            =&gt; <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"symbol\">:host</span>                  =&gt; <span class=\"string\">'s3.us-east-2.amazonaws.com'</span>,</span><br><span class=\"line\">    <span class=\"symbol\">:endpoint</span>              =&gt; <span class=\"string\">'https://s3.us-east-2.amazonaws.com'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  config.cache_dir = <span class=\"string\">\"<span class=\"subst\">#&#123;Rails.root&#125;</span>/tmp/uploads\"</span></span><br><span class=\"line\">  config.fog_directory  = Rails.application.credentials.s3_bucket</span><br><span class=\"line\">  config.fog_public     = <span class=\"literal\">true</span></span><br><span class=\"line\">  config.fog_attributes = &#123; <span class=\"string\">'Cache-Control'</span> =&gt; <span class=\"string\">\"max-age=<span class=\"subst\">#&#123;<span class=\"number\">10</span>.day.to_i&#125;</span>\"</span> &#125;</span><br><span class=\"line\">  config.storage = <span class=\"symbol\">:fog</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Acess-File-uploaded\"><a href=\"#Acess-File-uploaded\" class=\"headerlink\" title=\"Acess File uploaded\"></a>Acess File uploaded</h1><p><code>Instance.field_name_image.url</code> (get link s3)</p>\n<h1 id=\"Source-demo\"><a href=\"#Source-demo\" class=\"headerlink\" title=\"Source demo\"></a>Source demo</h1><p><a href=\"https://github.com/hdchinh/s3_carrierwave\" target=\"_blank\" rel=\"noopener\">Tại đây</a></p>\n"},{"title":"Session Vs Cookies Trong Rails","date":"2019-04-16T17:00:00.000Z","draft":false,"mytag":"Rails","mytrend":"COOL","_content":"\n# Đặt vấn đề\n`session[:user_id] = @user.id`, dòng code này thật quen thuộc? khi làm chức năng đăng nhập trong những ngày nhập môn, hẳn ai cũng đã từng làm qua hoặc làm gần giống như vậy, ta được dạy rằng, `http` là 1 giao thức không có trạng thái nên request thứ `N + 1` sẽ chẳng thể biết được request thứ `N` đã làm gì, vậy nếu ở lần request thứ `N` chúng ta đã thực hiện hành vi đăng nhập, và `http` thì không có lưu vết lại điều đó, hệ quả là ở lần request tiếp theo, website hiểu như bạn chưa đăng nhập, rất đáng buồn.\n\nCũng theo những gì được dạy, `session/cookies` được tạo ra với mục đích làm cho http request có \"trạng thái\". Vì sao lại để từ trạng thái trong nháy kép, vì thực sự là `http` không bao giờ có trạng thái cả, mà `session/cookies` với khả năng lưu vết của mình có thể giúp website nắm được một số **thông tin** từ client đã request trước đó và làm chúng giống như `http` đã có trạng thái.\n\nQuá mơ hồ? đúng vậy, khi được dạy điều này tôi cũng thấy thật mơ hồ, wth is trạng thái? phi trạng thái? lưu vết?... Hy vọng bài viết này sẽ giúp người đọc có 1 cái nhìn dễ hiểu hơn về 2 đối tượng này trong ruby on rails.\n# Luận bàn\n\n# 1. Flow hoạt động\n\nMột cách ngắn gọn cookies sẽ được vận hành như sau:\n\n**Step 1**: Lần đầu bạn request đến web ABC.com, nhẹ nhàng tựa mây bay, bạn không mang theo thông tin gì của ABC.com cả\n\n**Step 2**: ABC.com nhận request của bạn, nó nhận ra bạn không mang theo cookies của website, nên nó trong response trả về nó set một hoặc một vài cookies mặc định cho bạn.\n\n**Step 3**: Bạn nhận được response của ABC.com, rồi bạn tiếp tục request lên ABC.com lần thứ 2, lần này đi theo request của bạn là toàn bộ số cookies đã được khởi tạo ở bước 2.\n\n**Step 4**: ABC.com lại nhận được request của bạn, và lần này nó đã thấy bạn mang cookies của ABC.com nên nó sẽ đọc nội dung trong cookies đó (nếu cần).\n\n# 2. Một vài loại cookies quan trọng trong rails\n\n1. `Normal cookies`: Một dạng cookie mà dữ liệu được lưu trữ dưới dạng text.\n\n2. `Signed cookies`: Một dạng cookie mà dữ liệu lưu trữ sẽ được \"ký\" bởi 1 `digest`, và `digest` này được tạo ra bởi `secret_key_base` trong app của bạn, sau đó nó sẽ được chuyển sang dạng `base64` code. Điều này có nghĩa là nếu ai đó có được `signed cookies` của bạn, thì họ hoàn toàn có thể đọc được nội dung bên trong (decode base64 là có thể đọc được). Tuy nhiên nếu họ sửa lại nội dung của cookies đó và gửi lên server thì lúc này, cookies này trở thành 1 cookies không hợp lệ, vì sao? Vì như đã trình bày, nó được ký bởi 1 digest sinh ra qua `secret_key_base`, vậy nên cookies loại này nếu bị sửa đổi nội dung ở client thì khi kiểm tra tính toàn vẹn trên server thông qua digest sẽ không còn đúng nữa. Và nó trở thành 1 cookies không hợp lệ.\n\n3. `Encrypted cookies`: Một dạng cookies mà dữ liệu được mã hóa qua một quá trình mã hóa với 1 khóa quan trọng là `secret_key_base`, một cách đơn giản nhất để hiểu là không có `secret_key_base` thì ta không thể nào **đọc** hay sửa đổi dữ liệu của cookies này được.\n\nVí dụ:\n\n```ruby\ncookies.signed[:signed] = \"Duy Chinh\"\ncookies.encrypted[:encrypted] = \"Duy Chinh\"\ncookies[:normal] = \"Duy Chinh\"\n\n```\nTôi đã tạo 3 cookies ứng với 3 dạng cookies nêu ở trên, giá trị của chúng đều giống nhau (đều được gán bằng \"Duy Chinh\").\n\nHãy xem giá trị ở client nhận được:\n\n```ruby\nnormal = \"Duy+Chinh\"\nsigned = \"IkR1eSBDaGluaCI%3D--a3af2bfd61abcd20cc3b8ac714968d0aaf578fe5\"\nencrypted = \"%2BVulShtBgFR2I18%3D--zQP8FmCAW4%2FZUwar--CQ%2FH6HFHSVlox5H8QC4CTg%3D%3D\"\n```\n\nNhận xét:\n\n1. Kiểu cookies thông thường, dữ liệu lưu dạng text nên ở client ta dễ dàng đọc được nội dung cũng như sửa đổi dữ liệu của chúng.\n\n2. Nhìn signed cookies và encrypted cookies đều không thân thiện với người dùng cuối, vì chúng gồm những ký tự không có ngữ nghĩa với end user.\n\n3. Nếu decode `base64` ta thu được giá trị của signed cookies ở trên là: `\"Duy Chinh\"7횿f߷횭Ƕч7oƜ뇴i繯Ǟ䀀`, dù một số ký tự phía sau không thể hiểu được, tuy nhiên không quan trọng vì nội dung cookies vẫn được giải mã (đúng với tính chất, có thể đọc nhưng không thể sửa đổi).\n\n4. Việc decode encrypted cookies là vô vọng khi không có `secret_key_base`.\n\n**NOTE:**\n\nViệc sử dụng loại cookies nào sẽ đúng trong những trường hợp cụ thể, với những dữ liệu vô hại và không hề quan trọng thì sử dụng cookies thông thường và lưu mọi thứ dưới dạng text là khả dĩ hơn cả. Bỏ qua các bước mã hóa giúp nó hoạt động với performance tốt hơn hẳn 2 dạng cookies còn lại.\nNgược lại, encrypted cookies là dạng cookies tốn công sức để xử lý nhất, vì vậy hãy chỉ sử dụng nó cho những thông tin thực sự quan trọng và không thể để lộ (những thông tin bớt quan trọng hơn và chỉ cần đảm bảo tính toàn vẹn của dữ liệu chứ không cần bảo mật thông tin thì hãy dùng signed cookies).\n\n# 3. Giải mã cookies và tìm hiểu về session trong rails\n\nSau khá nhiều công sức tìm kiếm, tôi đã tìm ra cách để giải mã cookies trong rails 5.2, nội dung đơn giản như sau:\n\n```ruby\nrequire 'cgi'\nrequire 'active_support'\n\ndef verify_and_decrypt_session_cookie(cookie, secret_key_base)\n  cookie                  = CGI::unescape(cookie)\n  salt                    = 'authenticated encrypted cookie'\n  encrypted_cookie_cipher = 'aes-256-gcm'\n  serializer              = ActiveSupport::MessageEncryptor::NullSerializer\n\n  key_generator           = ActiveSupport::KeyGenerator.new(secret_key_base, iterations: 1000)\n  key_len                 = ActiveSupport::MessageEncryptor.key_len(encrypted_cookie_cipher)\n  secret                  = key_generator.generate_key(salt, key_len)\n  encryptor               = ActiveSupport::MessageEncryptor.new(secret, cipher: encrypted_cookie_cipher, serializer: serializer)\n\n  encryptor.decrypt_and_verify(cookie)\nend\n\ncookie         = \"QkS0eMMxz8z0Kso%3D--4opNQwT5tGUsnn90--5fXye0VQJX%2BXMVkUmK69gw%3D%3D\"\nskb            = \"2fc48081a207cbe98379b2ed33b5072125d6f80a55997494b021bde37cec4d9c8f17f90357d6ade926b02a3bc271ccecaf6894af1410d6ef8f6c9b3b0d871fba\"\ncookie_session = \"ahp9AcIyl%2BhLvQW695lhNUCnI7bF2iNZY8e4bM%2B2Lrx%2FlnbVXkYF3nL493dMM7eslFJKAyBNJKZlY5ugZpUuznCxO%2BpNXudnOdQVuDyvVBLxA8gQ4t48Gs%2BqOS7e%2FlSjBedhFKAaoBRdVI06QL8%3D--enarz3Hu%2FZ2n1Ys%2B--YdTghGWd4ZFef9Lf7WM%2FMQ%3D%3D\"\nputs verify_and_decrypt_session_cookie(cookie_session, skb)\n\n```\n\nNội dung được tham khảo từ nhiều nguồn (vì không một nguồn cụ thể nào copy và chạy luôn được :unamused:), nhưng chủ yếu được tìm hiểu [tại đây](https://api.rubyonrails.org/classes/ActiveSupport/MessageEncryptor.html), các bạn có thể vào trang này để tìm hiểu kỹ hơn.\n\n**NOTE:** Một điểm hết sức cần chú ý đó là biến `skb` tôi sử dụng ở trên chính là `secret_key_base` của project mà tôi sử dụng để demo, vì đây chỉ là một project test nên tôi có thể viết dạng text vào file sau đó commit lên github như này, trong tất cả các trường hợp khác thì đây là một hành động vô cùng **tồi tệ**, việc bị lộ `secret_key_base` sẽ khiến ứng dụng của bạn trần trụi trước hacker. Vậy nên hãy thật cẩn thận!\n\nĐoạn mã trên work tốt trên rails 5.2, chú ý là cách mã hóa ở các phiên bản rails khác nhau hoàn toàn có khả năng khác nhau, nên nếu đoạn mã này không thể chạy được với rails 4 chẳng hạn thì đó là điều hết sức bình thường.\n\nTrở lại vấn đề chính, nếu bạn để ý thì trong lần đầu tiên request khi bạn chưa hề làm gì và code trên server của bạn cũng chưa hề set bất kỳ giá trị cookies nào thì trong response trả về vẫn sẽ có một cookies (mà tôi đã nói ở trên, trong lần đầu request server sẽ khởi tạo và gửi về cho bạn một hoặc một vài cookies).\n\nTrong trường hợp này là một, cookies đó có thể có tên dạng `_app_name_session`. Nội dung của cookies này cũng được mã hóa, thử decode bằng `base64` không được ta có thể hiểu đây là 1 cookies đã được encrypted.\n\nGiá trị của cookies này trong trường hợp tôi test là:\n\n```\n\"aW2fSskgCyZ20Fi6E68xRGl0%2FR%2FzeFWoWU5YdhgkVhB%2FMtWSsX0rf3JuRgsfPPgQXjYYNygaRSxRjXAmOcsjohN28JQJnjej0Grfpwx52cZ5qjIRdMfOS9aXdTmedpuJ7T99aObbv75D3dsPtdQ%3D--FW10HzOu9FIoKK%2B8--9sMKANggTvi%2BlBjFwpIHEg%3D%3D\"\n```\n\nSử dụng đoạn mã ta đã viết ở trên, ta giải mã ra được giá trị của cookies này là:\n\n```ruby\n{\n  \"session_id\":\"52cc440e209ad03d306e550c2ca2dd78\",\n  \"_csrf_token\":\"rD35dsIoJyf5MIRA54/ARQNMBAN0yKvfMU4RjCc9WD8=\"\n}\n```\n\nVậy trong lần đầu request tới 1 website ruby on rails, nó sẽ tạo ra cho chúng ta 1 session, session lúc khởi tạo không có giá trị gì ngoài `session_id` và `_csrf_token`.\n\n**Ủa sai sai, tôi nhớ là ngày xưa đi học được dạy rằng điểm khác biệt của session và cookies là session được lưu ở server còn cookies được lưu ở client cơ mà**\n\nĐúng, tôi cũng được học như vậy, nhưng đó không phải là cách mà rails xử lý, `Rails được config mặc định là lưu session bằng cookies`, nếu không muốn ta có thể lưu trên `redis`, `database`... Tuy nhiên nếu không thấy ngại vì giới hạn không quá `4KB` của cookies thì tôi không thấy lý do gì để chuyển vị trí lưu trữ của session đi cả. :smiley:\n\nBây giờ tôi add thêm 1 giá trị vào session với câu lệnh `session[:user_id] = 1`, lúc này giá trị của cookies cũng thay đổi theo, lại decrypt ta thu được:\n\n```ruby\n{\n  \"session_id\":\"52cc440e209ad03d306e550c2ca2dd78\",\n  \"_csrf_token\":\"rD35dsIoJyf5MIRA54/ARQNMBAN0yKvfMU4RjCc9WD8=\",\n  \"user_id\":1\n}\n```\n\nSession bây giờ đã có thêm một key mới là `user_id` với giá trị là `1`. À vậy cuối cùng thì session cũng là 1 `hash` thôi nhỉ.\n\n# Kết luận\n\nĐể phân biệt các client khác nhau, server sẽ dựa vào `session_id` được lưu trong cookies, vì vậy nếu chiếm được cookies đăng nhập trên website ABC.com của bạn, các hacker có thể dùng nó để giả mạo bạn và request lên server, đáng buồn thay server sẽ đọc cookies được hacker request lên, sử dụng `secret_key_base` để giải mã cookies và đọc nội dung bên trong, đoạn code xử lý login lại đọc từ session[:user_id], lúc này thì cookies kia có giá trị `session[:user_id] = 1` và thế là server đã tưởng rằng hacker chính là bạn.\n\nTrong các bài tiếp theo chúng ta sẽ tìm hiểu về một số kiểu tấn công thông thường cũng như cách phòng tránh trong rails.\n","source":"_posts/2019-04-17-doi-dieu-ve-session-va-cookie-trong-rails.md","raw":"---\ntitle: \"Session Vs Cookies Trong Rails\"\ndate: 2019-04-17\ndraft: false\ntags: [\"rails\", \"secure\"]\ncategories: [\"rails notes\"]\nmytag: \"Rails\"\nmytrend: \"COOL\"\n---\n\n# Đặt vấn đề\n`session[:user_id] = @user.id`, dòng code này thật quen thuộc? khi làm chức năng đăng nhập trong những ngày nhập môn, hẳn ai cũng đã từng làm qua hoặc làm gần giống như vậy, ta được dạy rằng, `http` là 1 giao thức không có trạng thái nên request thứ `N + 1` sẽ chẳng thể biết được request thứ `N` đã làm gì, vậy nếu ở lần request thứ `N` chúng ta đã thực hiện hành vi đăng nhập, và `http` thì không có lưu vết lại điều đó, hệ quả là ở lần request tiếp theo, website hiểu như bạn chưa đăng nhập, rất đáng buồn.\n\nCũng theo những gì được dạy, `session/cookies` được tạo ra với mục đích làm cho http request có \"trạng thái\". Vì sao lại để từ trạng thái trong nháy kép, vì thực sự là `http` không bao giờ có trạng thái cả, mà `session/cookies` với khả năng lưu vết của mình có thể giúp website nắm được một số **thông tin** từ client đã request trước đó và làm chúng giống như `http` đã có trạng thái.\n\nQuá mơ hồ? đúng vậy, khi được dạy điều này tôi cũng thấy thật mơ hồ, wth is trạng thái? phi trạng thái? lưu vết?... Hy vọng bài viết này sẽ giúp người đọc có 1 cái nhìn dễ hiểu hơn về 2 đối tượng này trong ruby on rails.\n# Luận bàn\n\n# 1. Flow hoạt động\n\nMột cách ngắn gọn cookies sẽ được vận hành như sau:\n\n**Step 1**: Lần đầu bạn request đến web ABC.com, nhẹ nhàng tựa mây bay, bạn không mang theo thông tin gì của ABC.com cả\n\n**Step 2**: ABC.com nhận request của bạn, nó nhận ra bạn không mang theo cookies của website, nên nó trong response trả về nó set một hoặc một vài cookies mặc định cho bạn.\n\n**Step 3**: Bạn nhận được response của ABC.com, rồi bạn tiếp tục request lên ABC.com lần thứ 2, lần này đi theo request của bạn là toàn bộ số cookies đã được khởi tạo ở bước 2.\n\n**Step 4**: ABC.com lại nhận được request của bạn, và lần này nó đã thấy bạn mang cookies của ABC.com nên nó sẽ đọc nội dung trong cookies đó (nếu cần).\n\n# 2. Một vài loại cookies quan trọng trong rails\n\n1. `Normal cookies`: Một dạng cookie mà dữ liệu được lưu trữ dưới dạng text.\n\n2. `Signed cookies`: Một dạng cookie mà dữ liệu lưu trữ sẽ được \"ký\" bởi 1 `digest`, và `digest` này được tạo ra bởi `secret_key_base` trong app của bạn, sau đó nó sẽ được chuyển sang dạng `base64` code. Điều này có nghĩa là nếu ai đó có được `signed cookies` của bạn, thì họ hoàn toàn có thể đọc được nội dung bên trong (decode base64 là có thể đọc được). Tuy nhiên nếu họ sửa lại nội dung của cookies đó và gửi lên server thì lúc này, cookies này trở thành 1 cookies không hợp lệ, vì sao? Vì như đã trình bày, nó được ký bởi 1 digest sinh ra qua `secret_key_base`, vậy nên cookies loại này nếu bị sửa đổi nội dung ở client thì khi kiểm tra tính toàn vẹn trên server thông qua digest sẽ không còn đúng nữa. Và nó trở thành 1 cookies không hợp lệ.\n\n3. `Encrypted cookies`: Một dạng cookies mà dữ liệu được mã hóa qua một quá trình mã hóa với 1 khóa quan trọng là `secret_key_base`, một cách đơn giản nhất để hiểu là không có `secret_key_base` thì ta không thể nào **đọc** hay sửa đổi dữ liệu của cookies này được.\n\nVí dụ:\n\n```ruby\ncookies.signed[:signed] = \"Duy Chinh\"\ncookies.encrypted[:encrypted] = \"Duy Chinh\"\ncookies[:normal] = \"Duy Chinh\"\n\n```\nTôi đã tạo 3 cookies ứng với 3 dạng cookies nêu ở trên, giá trị của chúng đều giống nhau (đều được gán bằng \"Duy Chinh\").\n\nHãy xem giá trị ở client nhận được:\n\n```ruby\nnormal = \"Duy+Chinh\"\nsigned = \"IkR1eSBDaGluaCI%3D--a3af2bfd61abcd20cc3b8ac714968d0aaf578fe5\"\nencrypted = \"%2BVulShtBgFR2I18%3D--zQP8FmCAW4%2FZUwar--CQ%2FH6HFHSVlox5H8QC4CTg%3D%3D\"\n```\n\nNhận xét:\n\n1. Kiểu cookies thông thường, dữ liệu lưu dạng text nên ở client ta dễ dàng đọc được nội dung cũng như sửa đổi dữ liệu của chúng.\n\n2. Nhìn signed cookies và encrypted cookies đều không thân thiện với người dùng cuối, vì chúng gồm những ký tự không có ngữ nghĩa với end user.\n\n3. Nếu decode `base64` ta thu được giá trị của signed cookies ở trên là: `\"Duy Chinh\"7횿f߷횭Ƕч7oƜ뇴i繯Ǟ䀀`, dù một số ký tự phía sau không thể hiểu được, tuy nhiên không quan trọng vì nội dung cookies vẫn được giải mã (đúng với tính chất, có thể đọc nhưng không thể sửa đổi).\n\n4. Việc decode encrypted cookies là vô vọng khi không có `secret_key_base`.\n\n**NOTE:**\n\nViệc sử dụng loại cookies nào sẽ đúng trong những trường hợp cụ thể, với những dữ liệu vô hại và không hề quan trọng thì sử dụng cookies thông thường và lưu mọi thứ dưới dạng text là khả dĩ hơn cả. Bỏ qua các bước mã hóa giúp nó hoạt động với performance tốt hơn hẳn 2 dạng cookies còn lại.\nNgược lại, encrypted cookies là dạng cookies tốn công sức để xử lý nhất, vì vậy hãy chỉ sử dụng nó cho những thông tin thực sự quan trọng và không thể để lộ (những thông tin bớt quan trọng hơn và chỉ cần đảm bảo tính toàn vẹn của dữ liệu chứ không cần bảo mật thông tin thì hãy dùng signed cookies).\n\n# 3. Giải mã cookies và tìm hiểu về session trong rails\n\nSau khá nhiều công sức tìm kiếm, tôi đã tìm ra cách để giải mã cookies trong rails 5.2, nội dung đơn giản như sau:\n\n```ruby\nrequire 'cgi'\nrequire 'active_support'\n\ndef verify_and_decrypt_session_cookie(cookie, secret_key_base)\n  cookie                  = CGI::unescape(cookie)\n  salt                    = 'authenticated encrypted cookie'\n  encrypted_cookie_cipher = 'aes-256-gcm'\n  serializer              = ActiveSupport::MessageEncryptor::NullSerializer\n\n  key_generator           = ActiveSupport::KeyGenerator.new(secret_key_base, iterations: 1000)\n  key_len                 = ActiveSupport::MessageEncryptor.key_len(encrypted_cookie_cipher)\n  secret                  = key_generator.generate_key(salt, key_len)\n  encryptor               = ActiveSupport::MessageEncryptor.new(secret, cipher: encrypted_cookie_cipher, serializer: serializer)\n\n  encryptor.decrypt_and_verify(cookie)\nend\n\ncookie         = \"QkS0eMMxz8z0Kso%3D--4opNQwT5tGUsnn90--5fXye0VQJX%2BXMVkUmK69gw%3D%3D\"\nskb            = \"2fc48081a207cbe98379b2ed33b5072125d6f80a55997494b021bde37cec4d9c8f17f90357d6ade926b02a3bc271ccecaf6894af1410d6ef8f6c9b3b0d871fba\"\ncookie_session = \"ahp9AcIyl%2BhLvQW695lhNUCnI7bF2iNZY8e4bM%2B2Lrx%2FlnbVXkYF3nL493dMM7eslFJKAyBNJKZlY5ugZpUuznCxO%2BpNXudnOdQVuDyvVBLxA8gQ4t48Gs%2BqOS7e%2FlSjBedhFKAaoBRdVI06QL8%3D--enarz3Hu%2FZ2n1Ys%2B--YdTghGWd4ZFef9Lf7WM%2FMQ%3D%3D\"\nputs verify_and_decrypt_session_cookie(cookie_session, skb)\n\n```\n\nNội dung được tham khảo từ nhiều nguồn (vì không một nguồn cụ thể nào copy và chạy luôn được :unamused:), nhưng chủ yếu được tìm hiểu [tại đây](https://api.rubyonrails.org/classes/ActiveSupport/MessageEncryptor.html), các bạn có thể vào trang này để tìm hiểu kỹ hơn.\n\n**NOTE:** Một điểm hết sức cần chú ý đó là biến `skb` tôi sử dụng ở trên chính là `secret_key_base` của project mà tôi sử dụng để demo, vì đây chỉ là một project test nên tôi có thể viết dạng text vào file sau đó commit lên github như này, trong tất cả các trường hợp khác thì đây là một hành động vô cùng **tồi tệ**, việc bị lộ `secret_key_base` sẽ khiến ứng dụng của bạn trần trụi trước hacker. Vậy nên hãy thật cẩn thận!\n\nĐoạn mã trên work tốt trên rails 5.2, chú ý là cách mã hóa ở các phiên bản rails khác nhau hoàn toàn có khả năng khác nhau, nên nếu đoạn mã này không thể chạy được với rails 4 chẳng hạn thì đó là điều hết sức bình thường.\n\nTrở lại vấn đề chính, nếu bạn để ý thì trong lần đầu tiên request khi bạn chưa hề làm gì và code trên server của bạn cũng chưa hề set bất kỳ giá trị cookies nào thì trong response trả về vẫn sẽ có một cookies (mà tôi đã nói ở trên, trong lần đầu request server sẽ khởi tạo và gửi về cho bạn một hoặc một vài cookies).\n\nTrong trường hợp này là một, cookies đó có thể có tên dạng `_app_name_session`. Nội dung của cookies này cũng được mã hóa, thử decode bằng `base64` không được ta có thể hiểu đây là 1 cookies đã được encrypted.\n\nGiá trị của cookies này trong trường hợp tôi test là:\n\n```\n\"aW2fSskgCyZ20Fi6E68xRGl0%2FR%2FzeFWoWU5YdhgkVhB%2FMtWSsX0rf3JuRgsfPPgQXjYYNygaRSxRjXAmOcsjohN28JQJnjej0Grfpwx52cZ5qjIRdMfOS9aXdTmedpuJ7T99aObbv75D3dsPtdQ%3D--FW10HzOu9FIoKK%2B8--9sMKANggTvi%2BlBjFwpIHEg%3D%3D\"\n```\n\nSử dụng đoạn mã ta đã viết ở trên, ta giải mã ra được giá trị của cookies này là:\n\n```ruby\n{\n  \"session_id\":\"52cc440e209ad03d306e550c2ca2dd78\",\n  \"_csrf_token\":\"rD35dsIoJyf5MIRA54/ARQNMBAN0yKvfMU4RjCc9WD8=\"\n}\n```\n\nVậy trong lần đầu request tới 1 website ruby on rails, nó sẽ tạo ra cho chúng ta 1 session, session lúc khởi tạo không có giá trị gì ngoài `session_id` và `_csrf_token`.\n\n**Ủa sai sai, tôi nhớ là ngày xưa đi học được dạy rằng điểm khác biệt của session và cookies là session được lưu ở server còn cookies được lưu ở client cơ mà**\n\nĐúng, tôi cũng được học như vậy, nhưng đó không phải là cách mà rails xử lý, `Rails được config mặc định là lưu session bằng cookies`, nếu không muốn ta có thể lưu trên `redis`, `database`... Tuy nhiên nếu không thấy ngại vì giới hạn không quá `4KB` của cookies thì tôi không thấy lý do gì để chuyển vị trí lưu trữ của session đi cả. :smiley:\n\nBây giờ tôi add thêm 1 giá trị vào session với câu lệnh `session[:user_id] = 1`, lúc này giá trị của cookies cũng thay đổi theo, lại decrypt ta thu được:\n\n```ruby\n{\n  \"session_id\":\"52cc440e209ad03d306e550c2ca2dd78\",\n  \"_csrf_token\":\"rD35dsIoJyf5MIRA54/ARQNMBAN0yKvfMU4RjCc9WD8=\",\n  \"user_id\":1\n}\n```\n\nSession bây giờ đã có thêm một key mới là `user_id` với giá trị là `1`. À vậy cuối cùng thì session cũng là 1 `hash` thôi nhỉ.\n\n# Kết luận\n\nĐể phân biệt các client khác nhau, server sẽ dựa vào `session_id` được lưu trong cookies, vì vậy nếu chiếm được cookies đăng nhập trên website ABC.com của bạn, các hacker có thể dùng nó để giả mạo bạn và request lên server, đáng buồn thay server sẽ đọc cookies được hacker request lên, sử dụng `secret_key_base` để giải mã cookies và đọc nội dung bên trong, đoạn code xử lý login lại đọc từ session[:user_id], lúc này thì cookies kia có giá trị `session[:user_id] = 1` và thế là server đã tưởng rằng hacker chính là bạn.\n\nTrong các bài tiếp theo chúng ta sẽ tìm hiểu về một số kiểu tấn công thông thường cũng như cách phòng tránh trong rails.\n","slug":"2019-04-17-doi-dieu-ve-session-va-cookie-trong-rails","published":1,"updated":"2019-11-13T04:04:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7sufu001b5rrs3m9x5c62","content":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p><code>session[:user_id] = @user.id</code>, dòng code này thật quen thuộc? khi làm chức năng đăng nhập trong những ngày nhập môn, hẳn ai cũng đã từng làm qua hoặc làm gần giống như vậy, ta được dạy rằng, <code>http</code> là 1 giao thức không có trạng thái nên request thứ <code>N + 1</code> sẽ chẳng thể biết được request thứ <code>N</code> đã làm gì, vậy nếu ở lần request thứ <code>N</code> chúng ta đã thực hiện hành vi đăng nhập, và <code>http</code> thì không có lưu vết lại điều đó, hệ quả là ở lần request tiếp theo, website hiểu như bạn chưa đăng nhập, rất đáng buồn.</p>\n<p>Cũng theo những gì được dạy, <code>session/cookies</code> được tạo ra với mục đích làm cho http request có “trạng thái”. Vì sao lại để từ trạng thái trong nháy kép, vì thực sự là <code>http</code> không bao giờ có trạng thái cả, mà <code>session/cookies</code> với khả năng lưu vết của mình có thể giúp website nắm được một số <strong>thông tin</strong> từ client đã request trước đó và làm chúng giống như <code>http</code> đã có trạng thái.</p>\n<p>Quá mơ hồ? đúng vậy, khi được dạy điều này tôi cũng thấy thật mơ hồ, wth is trạng thái? phi trạng thái? lưu vết?… Hy vọng bài viết này sẽ giúp người đọc có 1 cái nhìn dễ hiểu hơn về 2 đối tượng này trong ruby on rails.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-Flow-hoat-dong\"><a href=\"#1-Flow-hoat-dong\" class=\"headerlink\" title=\"1. Flow hoạt động\"></a>1. Flow hoạt động</h1><p>Một cách ngắn gọn cookies sẽ được vận hành như sau:</p>\n<p><strong>Step 1</strong>: Lần đầu bạn request đến web ABC.com, nhẹ nhàng tựa mây bay, bạn không mang theo thông tin gì của ABC.com cả</p>\n<p><strong>Step 2</strong>: ABC.com nhận request của bạn, nó nhận ra bạn không mang theo cookies của website, nên nó trong response trả về nó set một hoặc một vài cookies mặc định cho bạn.</p>\n<p><strong>Step 3</strong>: Bạn nhận được response của ABC.com, rồi bạn tiếp tục request lên ABC.com lần thứ 2, lần này đi theo request của bạn là toàn bộ số cookies đã được khởi tạo ở bước 2.</p>\n<p><strong>Step 4</strong>: ABC.com lại nhận được request của bạn, và lần này nó đã thấy bạn mang cookies của ABC.com nên nó sẽ đọc nội dung trong cookies đó (nếu cần).</p>\n<h1 id=\"2-Mot-vai-loai-cookies-quan-trong-trong-rails\"><a href=\"#2-Mot-vai-loai-cookies-quan-trong-trong-rails\" class=\"headerlink\" title=\"2. Một vài loại cookies quan trọng trong rails\"></a>2. Một vài loại cookies quan trọng trong rails</h1><ol>\n<li><p><code>Normal cookies</code>: Một dạng cookie mà dữ liệu được lưu trữ dưới dạng text.</p>\n</li>\n<li><p><code>Signed cookies</code>: Một dạng cookie mà dữ liệu lưu trữ sẽ được “ký” bởi 1 <code>digest</code>, và <code>digest</code> này được tạo ra bởi <code>secret_key_base</code> trong app của bạn, sau đó nó sẽ được chuyển sang dạng <code>base64</code> code. Điều này có nghĩa là nếu ai đó có được <code>signed cookies</code> của bạn, thì họ hoàn toàn có thể đọc được nội dung bên trong (decode base64 là có thể đọc được). Tuy nhiên nếu họ sửa lại nội dung của cookies đó và gửi lên server thì lúc này, cookies này trở thành 1 cookies không hợp lệ, vì sao? Vì như đã trình bày, nó được ký bởi 1 digest sinh ra qua <code>secret_key_base</code>, vậy nên cookies loại này nếu bị sửa đổi nội dung ở client thì khi kiểm tra tính toàn vẹn trên server thông qua digest sẽ không còn đúng nữa. Và nó trở thành 1 cookies không hợp lệ.</p>\n</li>\n<li><p><code>Encrypted cookies</code>: Một dạng cookies mà dữ liệu được mã hóa qua một quá trình mã hóa với 1 khóa quan trọng là <code>secret_key_base</code>, một cách đơn giản nhất để hiểu là không có <code>secret_key_base</code> thì ta không thể nào <strong>đọc</strong> hay sửa đổi dữ liệu của cookies này được.</p>\n</li>\n</ol>\n<p>Ví dụ:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookies.signed[<span class=\"symbol\">:signed</span>] = <span class=\"string\">\"Duy Chinh\"</span></span><br><span class=\"line\">cookies.encrypted[<span class=\"symbol\">:encrypted</span>] = <span class=\"string\">\"Duy Chinh\"</span></span><br><span class=\"line\">cookies[<span class=\"symbol\">:normal</span>] = <span class=\"string\">\"Duy Chinh\"</span></span><br></pre></td></tr></table></figure>\n<p>Tôi đã tạo 3 cookies ứng với 3 dạng cookies nêu ở trên, giá trị của chúng đều giống nhau (đều được gán bằng “Duy Chinh”).</p>\n<p>Hãy xem giá trị ở client nhận được:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">normal = <span class=\"string\">\"Duy+Chinh\"</span></span><br><span class=\"line\">signed = <span class=\"string\">\"IkR1eSBDaGluaCI%3D--a3af2bfd61abcd20cc3b8ac714968d0aaf578fe5\"</span></span><br><span class=\"line\">encrypted = <span class=\"string\">\"%2BVulShtBgFR2I18%3D--zQP8FmCAW4%2FZUwar--CQ%2FH6HFHSVlox5H8QC4CTg%3D%3D\"</span></span><br></pre></td></tr></table></figure>\n\n<p>Nhận xét:</p>\n<ol>\n<li><p>Kiểu cookies thông thường, dữ liệu lưu dạng text nên ở client ta dễ dàng đọc được nội dung cũng như sửa đổi dữ liệu của chúng.</p>\n</li>\n<li><p>Nhìn signed cookies và encrypted cookies đều không thân thiện với người dùng cuối, vì chúng gồm những ký tự không có ngữ nghĩa với end user.</p>\n</li>\n<li><p>Nếu decode <code>base64</code> ta thu được giá trị của signed cookies ở trên là: <code>&quot;Duy Chinh&quot;7횿f߷횭Ƕч7oƜ뇴i繯Ǟ䀀</code>, dù một số ký tự phía sau không thể hiểu được, tuy nhiên không quan trọng vì nội dung cookies vẫn được giải mã (đúng với tính chất, có thể đọc nhưng không thể sửa đổi).</p>\n</li>\n<li><p>Việc decode encrypted cookies là vô vọng khi không có <code>secret_key_base</code>.</p>\n</li>\n</ol>\n<p><strong>NOTE:</strong></p>\n<p>Việc sử dụng loại cookies nào sẽ đúng trong những trường hợp cụ thể, với những dữ liệu vô hại và không hề quan trọng thì sử dụng cookies thông thường và lưu mọi thứ dưới dạng text là khả dĩ hơn cả. Bỏ qua các bước mã hóa giúp nó hoạt động với performance tốt hơn hẳn 2 dạng cookies còn lại.<br>Ngược lại, encrypted cookies là dạng cookies tốn công sức để xử lý nhất, vì vậy hãy chỉ sử dụng nó cho những thông tin thực sự quan trọng và không thể để lộ (những thông tin bớt quan trọng hơn và chỉ cần đảm bảo tính toàn vẹn của dữ liệu chứ không cần bảo mật thông tin thì hãy dùng signed cookies).</p>\n<h1 id=\"3-Giai-ma-cookies-va-tim-hieu-ve-session-trong-rails\"><a href=\"#3-Giai-ma-cookies-va-tim-hieu-ve-session-trong-rails\" class=\"headerlink\" title=\"3. Giải mã cookies và tìm hiểu về session trong rails\"></a>3. Giải mã cookies và tìm hiểu về session trong rails</h1><p>Sau khá nhiều công sức tìm kiếm, tôi đã tìm ra cách để giải mã cookies trong rails 5.2, nội dung đơn giản như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'cgi'</span></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'active_support'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">verify_and_decrypt_session_cookie</span><span class=\"params\">(cookie, secret_key_base)</span></span></span><br><span class=\"line\">  cookie                  = CGI::unescape(cookie)</span><br><span class=\"line\">  salt                    = <span class=\"string\">'authenticated encrypted cookie'</span></span><br><span class=\"line\">  encrypted_cookie_cipher = <span class=\"string\">'aes-256-gcm'</span></span><br><span class=\"line\">  serializer              = ActiveSupport::MessageEncryptor::NullSerializer</span><br><span class=\"line\"></span><br><span class=\"line\">  key_generator           = ActiveSupport::KeyGenerator.new(secret_key_base, <span class=\"symbol\">iterations:</span> <span class=\"number\">1000</span>)</span><br><span class=\"line\">  key_len                 = ActiveSupport::MessageEncryptor.key_len(encrypted_cookie_cipher)</span><br><span class=\"line\">  secret                  = key_generator.generate_key(salt, key_len)</span><br><span class=\"line\">  encryptor               = ActiveSupport::MessageEncryptor.new(secret, <span class=\"symbol\">cipher:</span> encrypted_cookie_cipher, <span class=\"symbol\">serializer:</span> serializer)</span><br><span class=\"line\"></span><br><span class=\"line\">  encryptor.decrypt_and_verify(cookie)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">cookie         = <span class=\"string\">\"QkS0eMMxz8z0Kso%3D--4opNQwT5tGUsnn90--5fXye0VQJX%2BXMVkUmK69gw%3D%3D\"</span></span><br><span class=\"line\">skb            = <span class=\"string\">\"2fc48081a207cbe98379b2ed33b5072125d6f80a55997494b021bde37cec4d9c8f17f90357d6ade926b02a3bc271ccecaf6894af1410d6ef8f6c9b3b0d871fba\"</span></span><br><span class=\"line\">cookie_session = <span class=\"string\">\"ahp9AcIyl%2BhLvQW695lhNUCnI7bF2iNZY8e4bM%2B2Lrx%2FlnbVXkYF3nL493dMM7eslFJKAyBNJKZlY5ugZpUuznCxO%2BpNXudnOdQVuDyvVBLxA8gQ4t48Gs%2BqOS7e%2FlSjBedhFKAaoBRdVI06QL8%3D--enarz3Hu%2FZ2n1Ys%2B--YdTghGWd4ZFef9Lf7WM%2FMQ%3D%3D\"</span></span><br><span class=\"line\">puts verify_and_decrypt_session_cookie(cookie_session, skb)</span><br></pre></td></tr></table></figure>\n\n<p>Nội dung được tham khảo từ nhiều nguồn (vì không một nguồn cụ thể nào copy và chạy luôn được :unamused:), nhưng chủ yếu được tìm hiểu <a href=\"https://api.rubyonrails.org/classes/ActiveSupport/MessageEncryptor.html\" target=\"_blank\" rel=\"noopener\">tại đây</a>, các bạn có thể vào trang này để tìm hiểu kỹ hơn.</p>\n<p><strong>NOTE:</strong> Một điểm hết sức cần chú ý đó là biến <code>skb</code> tôi sử dụng ở trên chính là <code>secret_key_base</code> của project mà tôi sử dụng để demo, vì đây chỉ là một project test nên tôi có thể viết dạng text vào file sau đó commit lên github như này, trong tất cả các trường hợp khác thì đây là một hành động vô cùng <strong>tồi tệ</strong>, việc bị lộ <code>secret_key_base</code> sẽ khiến ứng dụng của bạn trần trụi trước hacker. Vậy nên hãy thật cẩn thận!</p>\n<p>Đoạn mã trên work tốt trên rails 5.2, chú ý là cách mã hóa ở các phiên bản rails khác nhau hoàn toàn có khả năng khác nhau, nên nếu đoạn mã này không thể chạy được với rails 4 chẳng hạn thì đó là điều hết sức bình thường.</p>\n<p>Trở lại vấn đề chính, nếu bạn để ý thì trong lần đầu tiên request khi bạn chưa hề làm gì và code trên server của bạn cũng chưa hề set bất kỳ giá trị cookies nào thì trong response trả về vẫn sẽ có một cookies (mà tôi đã nói ở trên, trong lần đầu request server sẽ khởi tạo và gửi về cho bạn một hoặc một vài cookies).</p>\n<p>Trong trường hợp này là một, cookies đó có thể có tên dạng <code>_app_name_session</code>. Nội dung của cookies này cũng được mã hóa, thử decode bằng <code>base64</code> không được ta có thể hiểu đây là 1 cookies đã được encrypted.</p>\n<p>Giá trị của cookies này trong trường hợp tôi test là:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;aW2fSskgCyZ20Fi6E68xRGl0%2FR%2FzeFWoWU5YdhgkVhB%2FMtWSsX0rf3JuRgsfPPgQXjYYNygaRSxRjXAmOcsjohN28JQJnjej0Grfpwx52cZ5qjIRdMfOS9aXdTmedpuJ7T99aObbv75D3dsPtdQ%3D--FW10HzOu9FIoKK%2B8--9sMKANggTvi%2BlBjFwpIHEg%3D%3D&quot;</span><br></pre></td></tr></table></figure>\n\n<p>Sử dụng đoạn mã ta đã viết ở trên, ta giải mã ra được giá trị của cookies này là:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"session_id\"</span><span class=\"symbol\">:<span class=\"string\">\"52cc440e209ad03d306e550c2ca2dd78\"</span></span>,</span><br><span class=\"line\">  <span class=\"string\">\"_csrf_token\"</span><span class=\"symbol\">:<span class=\"string\">\"rD35dsIoJyf5MIRA54/ARQNMBAN0yKvfMU4RjCc9WD8=\"</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Vậy trong lần đầu request tới 1 website ruby on rails, nó sẽ tạo ra cho chúng ta 1 session, session lúc khởi tạo không có giá trị gì ngoài <code>session_id</code> và <code>_csrf_token</code>.</p>\n<p><strong>Ủa sai sai, tôi nhớ là ngày xưa đi học được dạy rằng điểm khác biệt của session và cookies là session được lưu ở server còn cookies được lưu ở client cơ mà</strong></p>\n<p>Đúng, tôi cũng được học như vậy, nhưng đó không phải là cách mà rails xử lý, <code>Rails được config mặc định là lưu session bằng cookies</code>, nếu không muốn ta có thể lưu trên <code>redis</code>, <code>database</code>… Tuy nhiên nếu không thấy ngại vì giới hạn không quá <code>4KB</code> của cookies thì tôi không thấy lý do gì để chuyển vị trí lưu trữ của session đi cả. :smiley:</p>\n<p>Bây giờ tôi add thêm 1 giá trị vào session với câu lệnh <code>session[:user_id] = 1</code>, lúc này giá trị của cookies cũng thay đổi theo, lại decrypt ta thu được:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"session_id\"</span><span class=\"symbol\">:<span class=\"string\">\"52cc440e209ad03d306e550c2ca2dd78\"</span></span>,</span><br><span class=\"line\">  <span class=\"string\">\"_csrf_token\"</span><span class=\"symbol\">:<span class=\"string\">\"rD35dsIoJyf5MIRA54/ARQNMBAN0yKvfMU4RjCc9WD8=\"</span></span>,</span><br><span class=\"line\">  <span class=\"string\">\"user_id\"</span><span class=\"symbol\">:</span><span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Session bây giờ đã có thêm một key mới là <code>user_id</code> với giá trị là <code>1</code>. À vậy cuối cùng thì session cũng là 1 <code>hash</code> thôi nhỉ.</p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Để phân biệt các client khác nhau, server sẽ dựa vào <code>session_id</code> được lưu trong cookies, vì vậy nếu chiếm được cookies đăng nhập trên website ABC.com của bạn, các hacker có thể dùng nó để giả mạo bạn và request lên server, đáng buồn thay server sẽ đọc cookies được hacker request lên, sử dụng <code>secret_key_base</code> để giải mã cookies và đọc nội dung bên trong, đoạn code xử lý login lại đọc từ session[:user_id], lúc này thì cookies kia có giá trị <code>session[:user_id] = 1</code> và thế là server đã tưởng rằng hacker chính là bạn.</p>\n<p>Trong các bài tiếp theo chúng ta sẽ tìm hiểu về một số kiểu tấn công thông thường cũng như cách phòng tránh trong rails.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p><code>session[:user_id] = @user.id</code>, dòng code này thật quen thuộc? khi làm chức năng đăng nhập trong những ngày nhập môn, hẳn ai cũng đã từng làm qua hoặc làm gần giống như vậy, ta được dạy rằng, <code>http</code> là 1 giao thức không có trạng thái nên request thứ <code>N + 1</code> sẽ chẳng thể biết được request thứ <code>N</code> đã làm gì, vậy nếu ở lần request thứ <code>N</code> chúng ta đã thực hiện hành vi đăng nhập, và <code>http</code> thì không có lưu vết lại điều đó, hệ quả là ở lần request tiếp theo, website hiểu như bạn chưa đăng nhập, rất đáng buồn.</p>\n<p>Cũng theo những gì được dạy, <code>session/cookies</code> được tạo ra với mục đích làm cho http request có “trạng thái”. Vì sao lại để từ trạng thái trong nháy kép, vì thực sự là <code>http</code> không bao giờ có trạng thái cả, mà <code>session/cookies</code> với khả năng lưu vết của mình có thể giúp website nắm được một số <strong>thông tin</strong> từ client đã request trước đó và làm chúng giống như <code>http</code> đã có trạng thái.</p>\n<p>Quá mơ hồ? đúng vậy, khi được dạy điều này tôi cũng thấy thật mơ hồ, wth is trạng thái? phi trạng thái? lưu vết?… Hy vọng bài viết này sẽ giúp người đọc có 1 cái nhìn dễ hiểu hơn về 2 đối tượng này trong ruby on rails.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-Flow-hoat-dong\"><a href=\"#1-Flow-hoat-dong\" class=\"headerlink\" title=\"1. Flow hoạt động\"></a>1. Flow hoạt động</h1><p>Một cách ngắn gọn cookies sẽ được vận hành như sau:</p>\n<p><strong>Step 1</strong>: Lần đầu bạn request đến web ABC.com, nhẹ nhàng tựa mây bay, bạn không mang theo thông tin gì của ABC.com cả</p>\n<p><strong>Step 2</strong>: ABC.com nhận request của bạn, nó nhận ra bạn không mang theo cookies của website, nên nó trong response trả về nó set một hoặc một vài cookies mặc định cho bạn.</p>\n<p><strong>Step 3</strong>: Bạn nhận được response của ABC.com, rồi bạn tiếp tục request lên ABC.com lần thứ 2, lần này đi theo request của bạn là toàn bộ số cookies đã được khởi tạo ở bước 2.</p>\n<p><strong>Step 4</strong>: ABC.com lại nhận được request của bạn, và lần này nó đã thấy bạn mang cookies của ABC.com nên nó sẽ đọc nội dung trong cookies đó (nếu cần).</p>\n<h1 id=\"2-Mot-vai-loai-cookies-quan-trong-trong-rails\"><a href=\"#2-Mot-vai-loai-cookies-quan-trong-trong-rails\" class=\"headerlink\" title=\"2. Một vài loại cookies quan trọng trong rails\"></a>2. Một vài loại cookies quan trọng trong rails</h1><ol>\n<li><p><code>Normal cookies</code>: Một dạng cookie mà dữ liệu được lưu trữ dưới dạng text.</p>\n</li>\n<li><p><code>Signed cookies</code>: Một dạng cookie mà dữ liệu lưu trữ sẽ được “ký” bởi 1 <code>digest</code>, và <code>digest</code> này được tạo ra bởi <code>secret_key_base</code> trong app của bạn, sau đó nó sẽ được chuyển sang dạng <code>base64</code> code. Điều này có nghĩa là nếu ai đó có được <code>signed cookies</code> của bạn, thì họ hoàn toàn có thể đọc được nội dung bên trong (decode base64 là có thể đọc được). Tuy nhiên nếu họ sửa lại nội dung của cookies đó và gửi lên server thì lúc này, cookies này trở thành 1 cookies không hợp lệ, vì sao? Vì như đã trình bày, nó được ký bởi 1 digest sinh ra qua <code>secret_key_base</code>, vậy nên cookies loại này nếu bị sửa đổi nội dung ở client thì khi kiểm tra tính toàn vẹn trên server thông qua digest sẽ không còn đúng nữa. Và nó trở thành 1 cookies không hợp lệ.</p>\n</li>\n<li><p><code>Encrypted cookies</code>: Một dạng cookies mà dữ liệu được mã hóa qua một quá trình mã hóa với 1 khóa quan trọng là <code>secret_key_base</code>, một cách đơn giản nhất để hiểu là không có <code>secret_key_base</code> thì ta không thể nào <strong>đọc</strong> hay sửa đổi dữ liệu của cookies này được.</p>\n</li>\n</ol>\n<p>Ví dụ:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookies.signed[<span class=\"symbol\">:signed</span>] = <span class=\"string\">\"Duy Chinh\"</span></span><br><span class=\"line\">cookies.encrypted[<span class=\"symbol\">:encrypted</span>] = <span class=\"string\">\"Duy Chinh\"</span></span><br><span class=\"line\">cookies[<span class=\"symbol\">:normal</span>] = <span class=\"string\">\"Duy Chinh\"</span></span><br></pre></td></tr></table></figure>\n<p>Tôi đã tạo 3 cookies ứng với 3 dạng cookies nêu ở trên, giá trị của chúng đều giống nhau (đều được gán bằng “Duy Chinh”).</p>\n<p>Hãy xem giá trị ở client nhận được:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">normal = <span class=\"string\">\"Duy+Chinh\"</span></span><br><span class=\"line\">signed = <span class=\"string\">\"IkR1eSBDaGluaCI%3D--a3af2bfd61abcd20cc3b8ac714968d0aaf578fe5\"</span></span><br><span class=\"line\">encrypted = <span class=\"string\">\"%2BVulShtBgFR2I18%3D--zQP8FmCAW4%2FZUwar--CQ%2FH6HFHSVlox5H8QC4CTg%3D%3D\"</span></span><br></pre></td></tr></table></figure>\n\n<p>Nhận xét:</p>\n<ol>\n<li><p>Kiểu cookies thông thường, dữ liệu lưu dạng text nên ở client ta dễ dàng đọc được nội dung cũng như sửa đổi dữ liệu của chúng.</p>\n</li>\n<li><p>Nhìn signed cookies và encrypted cookies đều không thân thiện với người dùng cuối, vì chúng gồm những ký tự không có ngữ nghĩa với end user.</p>\n</li>\n<li><p>Nếu decode <code>base64</code> ta thu được giá trị của signed cookies ở trên là: <code>&quot;Duy Chinh&quot;7횿f߷횭Ƕч7oƜ뇴i繯Ǟ䀀</code>, dù một số ký tự phía sau không thể hiểu được, tuy nhiên không quan trọng vì nội dung cookies vẫn được giải mã (đúng với tính chất, có thể đọc nhưng không thể sửa đổi).</p>\n</li>\n<li><p>Việc decode encrypted cookies là vô vọng khi không có <code>secret_key_base</code>.</p>\n</li>\n</ol>\n<p><strong>NOTE:</strong></p>\n<p>Việc sử dụng loại cookies nào sẽ đúng trong những trường hợp cụ thể, với những dữ liệu vô hại và không hề quan trọng thì sử dụng cookies thông thường và lưu mọi thứ dưới dạng text là khả dĩ hơn cả. Bỏ qua các bước mã hóa giúp nó hoạt động với performance tốt hơn hẳn 2 dạng cookies còn lại.<br>Ngược lại, encrypted cookies là dạng cookies tốn công sức để xử lý nhất, vì vậy hãy chỉ sử dụng nó cho những thông tin thực sự quan trọng và không thể để lộ (những thông tin bớt quan trọng hơn và chỉ cần đảm bảo tính toàn vẹn của dữ liệu chứ không cần bảo mật thông tin thì hãy dùng signed cookies).</p>\n<h1 id=\"3-Giai-ma-cookies-va-tim-hieu-ve-session-trong-rails\"><a href=\"#3-Giai-ma-cookies-va-tim-hieu-ve-session-trong-rails\" class=\"headerlink\" title=\"3. Giải mã cookies và tìm hiểu về session trong rails\"></a>3. Giải mã cookies và tìm hiểu về session trong rails</h1><p>Sau khá nhiều công sức tìm kiếm, tôi đã tìm ra cách để giải mã cookies trong rails 5.2, nội dung đơn giản như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'cgi'</span></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'active_support'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">verify_and_decrypt_session_cookie</span><span class=\"params\">(cookie, secret_key_base)</span></span></span><br><span class=\"line\">  cookie                  = CGI::unescape(cookie)</span><br><span class=\"line\">  salt                    = <span class=\"string\">'authenticated encrypted cookie'</span></span><br><span class=\"line\">  encrypted_cookie_cipher = <span class=\"string\">'aes-256-gcm'</span></span><br><span class=\"line\">  serializer              = ActiveSupport::MessageEncryptor::NullSerializer</span><br><span class=\"line\"></span><br><span class=\"line\">  key_generator           = ActiveSupport::KeyGenerator.new(secret_key_base, <span class=\"symbol\">iterations:</span> <span class=\"number\">1000</span>)</span><br><span class=\"line\">  key_len                 = ActiveSupport::MessageEncryptor.key_len(encrypted_cookie_cipher)</span><br><span class=\"line\">  secret                  = key_generator.generate_key(salt, key_len)</span><br><span class=\"line\">  encryptor               = ActiveSupport::MessageEncryptor.new(secret, <span class=\"symbol\">cipher:</span> encrypted_cookie_cipher, <span class=\"symbol\">serializer:</span> serializer)</span><br><span class=\"line\"></span><br><span class=\"line\">  encryptor.decrypt_and_verify(cookie)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">cookie         = <span class=\"string\">\"QkS0eMMxz8z0Kso%3D--4opNQwT5tGUsnn90--5fXye0VQJX%2BXMVkUmK69gw%3D%3D\"</span></span><br><span class=\"line\">skb            = <span class=\"string\">\"2fc48081a207cbe98379b2ed33b5072125d6f80a55997494b021bde37cec4d9c8f17f90357d6ade926b02a3bc271ccecaf6894af1410d6ef8f6c9b3b0d871fba\"</span></span><br><span class=\"line\">cookie_session = <span class=\"string\">\"ahp9AcIyl%2BhLvQW695lhNUCnI7bF2iNZY8e4bM%2B2Lrx%2FlnbVXkYF3nL493dMM7eslFJKAyBNJKZlY5ugZpUuznCxO%2BpNXudnOdQVuDyvVBLxA8gQ4t48Gs%2BqOS7e%2FlSjBedhFKAaoBRdVI06QL8%3D--enarz3Hu%2FZ2n1Ys%2B--YdTghGWd4ZFef9Lf7WM%2FMQ%3D%3D\"</span></span><br><span class=\"line\">puts verify_and_decrypt_session_cookie(cookie_session, skb)</span><br></pre></td></tr></table></figure>\n\n<p>Nội dung được tham khảo từ nhiều nguồn (vì không một nguồn cụ thể nào copy và chạy luôn được :unamused:), nhưng chủ yếu được tìm hiểu <a href=\"https://api.rubyonrails.org/classes/ActiveSupport/MessageEncryptor.html\" target=\"_blank\" rel=\"noopener\">tại đây</a>, các bạn có thể vào trang này để tìm hiểu kỹ hơn.</p>\n<p><strong>NOTE:</strong> Một điểm hết sức cần chú ý đó là biến <code>skb</code> tôi sử dụng ở trên chính là <code>secret_key_base</code> của project mà tôi sử dụng để demo, vì đây chỉ là một project test nên tôi có thể viết dạng text vào file sau đó commit lên github như này, trong tất cả các trường hợp khác thì đây là một hành động vô cùng <strong>tồi tệ</strong>, việc bị lộ <code>secret_key_base</code> sẽ khiến ứng dụng của bạn trần trụi trước hacker. Vậy nên hãy thật cẩn thận!</p>\n<p>Đoạn mã trên work tốt trên rails 5.2, chú ý là cách mã hóa ở các phiên bản rails khác nhau hoàn toàn có khả năng khác nhau, nên nếu đoạn mã này không thể chạy được với rails 4 chẳng hạn thì đó là điều hết sức bình thường.</p>\n<p>Trở lại vấn đề chính, nếu bạn để ý thì trong lần đầu tiên request khi bạn chưa hề làm gì và code trên server của bạn cũng chưa hề set bất kỳ giá trị cookies nào thì trong response trả về vẫn sẽ có một cookies (mà tôi đã nói ở trên, trong lần đầu request server sẽ khởi tạo và gửi về cho bạn một hoặc một vài cookies).</p>\n<p>Trong trường hợp này là một, cookies đó có thể có tên dạng <code>_app_name_session</code>. Nội dung của cookies này cũng được mã hóa, thử decode bằng <code>base64</code> không được ta có thể hiểu đây là 1 cookies đã được encrypted.</p>\n<p>Giá trị của cookies này trong trường hợp tôi test là:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;aW2fSskgCyZ20Fi6E68xRGl0%2FR%2FzeFWoWU5YdhgkVhB%2FMtWSsX0rf3JuRgsfPPgQXjYYNygaRSxRjXAmOcsjohN28JQJnjej0Grfpwx52cZ5qjIRdMfOS9aXdTmedpuJ7T99aObbv75D3dsPtdQ%3D--FW10HzOu9FIoKK%2B8--9sMKANggTvi%2BlBjFwpIHEg%3D%3D&quot;</span><br></pre></td></tr></table></figure>\n\n<p>Sử dụng đoạn mã ta đã viết ở trên, ta giải mã ra được giá trị của cookies này là:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"session_id\"</span><span class=\"symbol\">:<span class=\"string\">\"52cc440e209ad03d306e550c2ca2dd78\"</span></span>,</span><br><span class=\"line\">  <span class=\"string\">\"_csrf_token\"</span><span class=\"symbol\">:<span class=\"string\">\"rD35dsIoJyf5MIRA54/ARQNMBAN0yKvfMU4RjCc9WD8=\"</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Vậy trong lần đầu request tới 1 website ruby on rails, nó sẽ tạo ra cho chúng ta 1 session, session lúc khởi tạo không có giá trị gì ngoài <code>session_id</code> và <code>_csrf_token</code>.</p>\n<p><strong>Ủa sai sai, tôi nhớ là ngày xưa đi học được dạy rằng điểm khác biệt của session và cookies là session được lưu ở server còn cookies được lưu ở client cơ mà</strong></p>\n<p>Đúng, tôi cũng được học như vậy, nhưng đó không phải là cách mà rails xử lý, <code>Rails được config mặc định là lưu session bằng cookies</code>, nếu không muốn ta có thể lưu trên <code>redis</code>, <code>database</code>… Tuy nhiên nếu không thấy ngại vì giới hạn không quá <code>4KB</code> của cookies thì tôi không thấy lý do gì để chuyển vị trí lưu trữ của session đi cả. :smiley:</p>\n<p>Bây giờ tôi add thêm 1 giá trị vào session với câu lệnh <code>session[:user_id] = 1</code>, lúc này giá trị của cookies cũng thay đổi theo, lại decrypt ta thu được:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"session_id\"</span><span class=\"symbol\">:<span class=\"string\">\"52cc440e209ad03d306e550c2ca2dd78\"</span></span>,</span><br><span class=\"line\">  <span class=\"string\">\"_csrf_token\"</span><span class=\"symbol\">:<span class=\"string\">\"rD35dsIoJyf5MIRA54/ARQNMBAN0yKvfMU4RjCc9WD8=\"</span></span>,</span><br><span class=\"line\">  <span class=\"string\">\"user_id\"</span><span class=\"symbol\">:</span><span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Session bây giờ đã có thêm một key mới là <code>user_id</code> với giá trị là <code>1</code>. À vậy cuối cùng thì session cũng là 1 <code>hash</code> thôi nhỉ.</p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Để phân biệt các client khác nhau, server sẽ dựa vào <code>session_id</code> được lưu trong cookies, vì vậy nếu chiếm được cookies đăng nhập trên website ABC.com của bạn, các hacker có thể dùng nó để giả mạo bạn và request lên server, đáng buồn thay server sẽ đọc cookies được hacker request lên, sử dụng <code>secret_key_base</code> để giải mã cookies và đọc nội dung bên trong, đoạn code xử lý login lại đọc từ session[:user_id], lúc này thì cookies kia có giá trị <code>session[:user_id] = 1</code> và thế là server đã tưởng rằng hacker chính là bạn.</p>\n<p>Trong các bài tiếp theo chúng ta sẽ tìm hiểu về một số kiểu tấn công thông thường cũng như cách phòng tránh trong rails.</p>\n"},{"title":"Tìm Hiểu Về Chữ S Trong Https","date":"2019-05-03T17:00:00.000Z","draft":false,"mytag":"Secure","mytrend":"COOL","_content":"\n# Đặt vấn đề\n\nĐi luôn vào chủ đề, khi mới bắt đầu với môn mạng máy tính ở trường đại học, sự mập mờ khi còn ngồi trên ghế nhà trường khiến chúng ta đôi khi đã nhầm lẫn về `http` và `https`, nhớ ngày đó tôi đã từng nghĩ chúng là 2 giao thức khác nhau, à mà ngày đó tôi có hiểu giao thức là gì không nhỉ :fearful: thôi dẹp qua một bên, bản chất của `https` cũng là giao thức `http` nhưng thêm được chữ `s` ứng với `secure`. Nghe thôi đã thấy bảo mật rồi, `https` ra đời nhằm mục đích làm cho giao thức `http` trở nên an toàn hơn, vậy nó làm cho `http` trở nên an toàn hơn như thế nào?\n\n# Luận bàn\n\n# 1. Http hiểu đơn giản thì hoạt động thế nào?\n\nMục đích cuối cùng của mớ hỗn độn rối rắm này cũng là truyền nhận thông tin, tôi có một website tôi muốn gửi nó lên mạng internet để bạn, một ai đó mà tôi không quen có thể vô tình lướt qua đọc được.\nHttp là một giao thức, hiểu đơn giản là một bộ quy tắc để chung để người sử dụng dùng trình duyệt có thể truy cập tới 1 trang web, và trang web đó hiểu được yêu cầu đó rồi trả về nội dung mà trình duyệt có thể hiểu được, ví như có nhiều ngôn ngữ trên thế giới, vậy giữa 2 người có 2 tiếng nói khác nhau để giao tiếp được họ phải cùng nhau sử dụng một bộ ngôn ngữ chung mà cả hai cùng hiểu được.\n\nMột đặc điểm cơ bản của `http` là nó truyền nhận thông tin dưới dạng **text** thông thường, không hề mã hoã, điều này dẫn tới vấn đề đó là thông tin được truyền nhận nhanh chóng, nhẹ nhàng, nội dung rất thân thiện với người dùng (vì nó là text mà).\n\nMọi thứ có vẻ good? không hẳn như vậy, việc dữ liệu truyền gửi được lưu dưới dạng text khiến nó quá thân thiện với người dùng, mà người dùng thì không phải ai cũng tốt :smirk: . Có những người dùng mà mục đích họ tới với website của bạn là để phá hoại, họ sẽ dễ dàng tấn công bằng cách nào đó lấy được request của bạn rồi đọc được nội dung trong request đó 1 cách dễ dàng.\n\nBài học: Không phải lúc nào cũng nên quá thân thiện với người dùng cuối :worried:\n\n# 2. Https khắc phục vấn đề của http như thế nào?\n\nChúng ta đã nắm được khái quát vấn đề bảo mật gặp phải khi sử dụng `http`. Với những website giải trí thuần tuý với nội dung chủ yếu là hình ảnh, âm thanh và không có thông tin cần bảo mật thì sử dụng https hình như cũng chỉ để tốt cho SEO, ngoài ra cũng không còn giá trị gì. Nhưng nếu bạn sử dụng **Internet Banking** với http, rồi bạn đăng nhập với tài khoản ngân hàng của mình trên đó, mọi thông tin bạn gửi đi đều dưới dạng những gói tin có nội dung plain/text trần trụi, vậy điều gì bảo vệ được tài khoản của bạn nếu request kể trên bị những kẻ xấu dùng những thủ thuật hay phần mềm chuyên dụng để bắt được?\n\nHttps giải bài toán trên bằng cách rất đơn giản, nội dung dạng plain/text giúp kẻ gian có thể bắt và đọc dễ dàng, vậy chúng ta hãy mã hoá nội dung để kẻ gian đó không thể hiểu được, và có bắt được gói tin cũng vô dụng?.\n\n# 3. Https và vấn đề mã hoá dữ liệu\n\nTrước tiên phải làm rõ là:\n\n**`https = http + ssl`**\n\nTrong đó:\n\n1. http là giao thức tryền tải.\n\n2. ssl là cơ chế bảo mật thông tin.\n\n![tam the tu tin](/images/7.gif)\n\nFlow tối thiểu của `https` sẽ như sau:\n\n1. `Client hello`, người dùng sử dụng trình duyệt sẽ request tới google.com.\n\n2. `Server hello`, request ở bước một đã tới nơi, server sẽ gửi trả client 2 thông tin quan trọng đó là **ssl certificate** (Để chứng minh \"Ê, tao là google.com thật nha, not fake\") và 1 **Public key** (Gọi là Public-key-1. *Vậy ta có thể hiểu là ở Server google.com nó đang giữ Private key 1 ứng với Public key 1 kia*).\n\n3. Browser sẽ xác minh **ssl certificate** nhận được để xem nó có phải là hàng real hay không. Vậy còn làm sao mà browser có thể phân định thật giả? Chúng ta sẽ tìm hiểu trong 1 bài viết khác.\n\n4. Sau khi browser xác minh và đã tin tưởng máy chủ google.com, browser sẽ tạo 1 cặp khoá bảo mật RSA thứ 2, ta gọi là **Public key 2 và Private key 2**.\n\n5. Browser dùng **Public key 1** đã nhận được từ bước 3, để mã hoá *Public key 2 và Private key 2* sinh ra trong bước 4, rồi gửi cặp khoá này dưới dạng đã mã hoá tới máy chủ google.com.\n\n6. Như bạn nhớ, thì máy chủ google.com đang giữ **Private key 1** và thế là nó có thể giải mã và lấy được cặp key ở bước 5.\n\n7. Vậy là cả máy chủ google.com và client đều có cặp khoá RSA thứ 2, mọi thông tin truyền gửi từ cả 2 phía bây giờ đều được mã hoá bằng Public key 2.\n\nNote: Nhờ cơ chế mã hoá RSA (Chỉ có thể mã hoá bằng public key và giải mã nội dung bằng private key) kể trên. Server và client đã có thể liên lạc với nhau một cách an toàn. Trong quá trình trên, kể cả kẻ thủ ác có bắt được gói tin ở bước 2, bên trong có public key 1, thì cũng không phải vấn đề, bởi vì với public key đó thì hắn không thể đọc được thông tin mà client gửi ở bước 5.\n\n# Kết luận\n\nKhông có kết luận :)\n","source":"_posts/2019-05-04-https-vai-dieu-can-nho.md","raw":"---\ntitle: \"Tìm Hiểu Về Chữ S Trong Https\"\ndate: 2019-05-04\ndraft: false\ntags: [\"https\", \"secure\"]\ncategories: [\"rails notes\"]\nmytag: \"Secure\"\nmytrend: \"COOL\"\n\n---\n\n# Đặt vấn đề\n\nĐi luôn vào chủ đề, khi mới bắt đầu với môn mạng máy tính ở trường đại học, sự mập mờ khi còn ngồi trên ghế nhà trường khiến chúng ta đôi khi đã nhầm lẫn về `http` và `https`, nhớ ngày đó tôi đã từng nghĩ chúng là 2 giao thức khác nhau, à mà ngày đó tôi có hiểu giao thức là gì không nhỉ :fearful: thôi dẹp qua một bên, bản chất của `https` cũng là giao thức `http` nhưng thêm được chữ `s` ứng với `secure`. Nghe thôi đã thấy bảo mật rồi, `https` ra đời nhằm mục đích làm cho giao thức `http` trở nên an toàn hơn, vậy nó làm cho `http` trở nên an toàn hơn như thế nào?\n\n# Luận bàn\n\n# 1. Http hiểu đơn giản thì hoạt động thế nào?\n\nMục đích cuối cùng của mớ hỗn độn rối rắm này cũng là truyền nhận thông tin, tôi có một website tôi muốn gửi nó lên mạng internet để bạn, một ai đó mà tôi không quen có thể vô tình lướt qua đọc được.\nHttp là một giao thức, hiểu đơn giản là một bộ quy tắc để chung để người sử dụng dùng trình duyệt có thể truy cập tới 1 trang web, và trang web đó hiểu được yêu cầu đó rồi trả về nội dung mà trình duyệt có thể hiểu được, ví như có nhiều ngôn ngữ trên thế giới, vậy giữa 2 người có 2 tiếng nói khác nhau để giao tiếp được họ phải cùng nhau sử dụng một bộ ngôn ngữ chung mà cả hai cùng hiểu được.\n\nMột đặc điểm cơ bản của `http` là nó truyền nhận thông tin dưới dạng **text** thông thường, không hề mã hoã, điều này dẫn tới vấn đề đó là thông tin được truyền nhận nhanh chóng, nhẹ nhàng, nội dung rất thân thiện với người dùng (vì nó là text mà).\n\nMọi thứ có vẻ good? không hẳn như vậy, việc dữ liệu truyền gửi được lưu dưới dạng text khiến nó quá thân thiện với người dùng, mà người dùng thì không phải ai cũng tốt :smirk: . Có những người dùng mà mục đích họ tới với website của bạn là để phá hoại, họ sẽ dễ dàng tấn công bằng cách nào đó lấy được request của bạn rồi đọc được nội dung trong request đó 1 cách dễ dàng.\n\nBài học: Không phải lúc nào cũng nên quá thân thiện với người dùng cuối :worried:\n\n# 2. Https khắc phục vấn đề của http như thế nào?\n\nChúng ta đã nắm được khái quát vấn đề bảo mật gặp phải khi sử dụng `http`. Với những website giải trí thuần tuý với nội dung chủ yếu là hình ảnh, âm thanh và không có thông tin cần bảo mật thì sử dụng https hình như cũng chỉ để tốt cho SEO, ngoài ra cũng không còn giá trị gì. Nhưng nếu bạn sử dụng **Internet Banking** với http, rồi bạn đăng nhập với tài khoản ngân hàng của mình trên đó, mọi thông tin bạn gửi đi đều dưới dạng những gói tin có nội dung plain/text trần trụi, vậy điều gì bảo vệ được tài khoản của bạn nếu request kể trên bị những kẻ xấu dùng những thủ thuật hay phần mềm chuyên dụng để bắt được?\n\nHttps giải bài toán trên bằng cách rất đơn giản, nội dung dạng plain/text giúp kẻ gian có thể bắt và đọc dễ dàng, vậy chúng ta hãy mã hoá nội dung để kẻ gian đó không thể hiểu được, và có bắt được gói tin cũng vô dụng?.\n\n# 3. Https và vấn đề mã hoá dữ liệu\n\nTrước tiên phải làm rõ là:\n\n**`https = http + ssl`**\n\nTrong đó:\n\n1. http là giao thức tryền tải.\n\n2. ssl là cơ chế bảo mật thông tin.\n\n![tam the tu tin](/images/7.gif)\n\nFlow tối thiểu của `https` sẽ như sau:\n\n1. `Client hello`, người dùng sử dụng trình duyệt sẽ request tới google.com.\n\n2. `Server hello`, request ở bước một đã tới nơi, server sẽ gửi trả client 2 thông tin quan trọng đó là **ssl certificate** (Để chứng minh \"Ê, tao là google.com thật nha, not fake\") và 1 **Public key** (Gọi là Public-key-1. *Vậy ta có thể hiểu là ở Server google.com nó đang giữ Private key 1 ứng với Public key 1 kia*).\n\n3. Browser sẽ xác minh **ssl certificate** nhận được để xem nó có phải là hàng real hay không. Vậy còn làm sao mà browser có thể phân định thật giả? Chúng ta sẽ tìm hiểu trong 1 bài viết khác.\n\n4. Sau khi browser xác minh và đã tin tưởng máy chủ google.com, browser sẽ tạo 1 cặp khoá bảo mật RSA thứ 2, ta gọi là **Public key 2 và Private key 2**.\n\n5. Browser dùng **Public key 1** đã nhận được từ bước 3, để mã hoá *Public key 2 và Private key 2* sinh ra trong bước 4, rồi gửi cặp khoá này dưới dạng đã mã hoá tới máy chủ google.com.\n\n6. Như bạn nhớ, thì máy chủ google.com đang giữ **Private key 1** và thế là nó có thể giải mã và lấy được cặp key ở bước 5.\n\n7. Vậy là cả máy chủ google.com và client đều có cặp khoá RSA thứ 2, mọi thông tin truyền gửi từ cả 2 phía bây giờ đều được mã hoá bằng Public key 2.\n\nNote: Nhờ cơ chế mã hoá RSA (Chỉ có thể mã hoá bằng public key và giải mã nội dung bằng private key) kể trên. Server và client đã có thể liên lạc với nhau một cách an toàn. Trong quá trình trên, kể cả kẻ thủ ác có bắt được gói tin ở bước 2, bên trong có public key 1, thì cũng không phải vấn đề, bởi vì với public key đó thì hắn không thể đọc được thông tin mà client gửi ở bước 5.\n\n# Kết luận\n\nKhông có kết luận :)\n","slug":"2019-05-04-https-vai-dieu-can-nho","published":1,"updated":"2019-11-13T04:05:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7sufw001d5rrsg9986xvx","content":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Đi luôn vào chủ đề, khi mới bắt đầu với môn mạng máy tính ở trường đại học, sự mập mờ khi còn ngồi trên ghế nhà trường khiến chúng ta đôi khi đã nhầm lẫn về <code>http</code> và <code>https</code>, nhớ ngày đó tôi đã từng nghĩ chúng là 2 giao thức khác nhau, à mà ngày đó tôi có hiểu giao thức là gì không nhỉ :fearful: thôi dẹp qua một bên, bản chất của <code>https</code> cũng là giao thức <code>http</code> nhưng thêm được chữ <code>s</code> ứng với <code>secure</code>. Nghe thôi đã thấy bảo mật rồi, <code>https</code> ra đời nhằm mục đích làm cho giao thức <code>http</code> trở nên an toàn hơn, vậy nó làm cho <code>http</code> trở nên an toàn hơn như thế nào?</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-Http-hieu-don-gian-thi-hoat-dong-the-nao\"><a href=\"#1-Http-hieu-don-gian-thi-hoat-dong-the-nao\" class=\"headerlink\" title=\"1. Http hiểu đơn giản thì hoạt động thế nào?\"></a>1. Http hiểu đơn giản thì hoạt động thế nào?</h1><p>Mục đích cuối cùng của mớ hỗn độn rối rắm này cũng là truyền nhận thông tin, tôi có một website tôi muốn gửi nó lên mạng internet để bạn, một ai đó mà tôi không quen có thể vô tình lướt qua đọc được.<br>Http là một giao thức, hiểu đơn giản là một bộ quy tắc để chung để người sử dụng dùng trình duyệt có thể truy cập tới 1 trang web, và trang web đó hiểu được yêu cầu đó rồi trả về nội dung mà trình duyệt có thể hiểu được, ví như có nhiều ngôn ngữ trên thế giới, vậy giữa 2 người có 2 tiếng nói khác nhau để giao tiếp được họ phải cùng nhau sử dụng một bộ ngôn ngữ chung mà cả hai cùng hiểu được.</p>\n<p>Một đặc điểm cơ bản của <code>http</code> là nó truyền nhận thông tin dưới dạng <strong>text</strong> thông thường, không hề mã hoã, điều này dẫn tới vấn đề đó là thông tin được truyền nhận nhanh chóng, nhẹ nhàng, nội dung rất thân thiện với người dùng (vì nó là text mà).</p>\n<p>Mọi thứ có vẻ good? không hẳn như vậy, việc dữ liệu truyền gửi được lưu dưới dạng text khiến nó quá thân thiện với người dùng, mà người dùng thì không phải ai cũng tốt :smirk: . Có những người dùng mà mục đích họ tới với website của bạn là để phá hoại, họ sẽ dễ dàng tấn công bằng cách nào đó lấy được request của bạn rồi đọc được nội dung trong request đó 1 cách dễ dàng.</p>\n<p>Bài học: Không phải lúc nào cũng nên quá thân thiện với người dùng cuối :worried:</p>\n<h1 id=\"2-Https-khac-phuc-van-de-cua-http-nhu-the-nao\"><a href=\"#2-Https-khac-phuc-van-de-cua-http-nhu-the-nao\" class=\"headerlink\" title=\"2. Https khắc phục vấn đề của http như thế nào?\"></a>2. Https khắc phục vấn đề của http như thế nào?</h1><p>Chúng ta đã nắm được khái quát vấn đề bảo mật gặp phải khi sử dụng <code>http</code>. Với những website giải trí thuần tuý với nội dung chủ yếu là hình ảnh, âm thanh và không có thông tin cần bảo mật thì sử dụng https hình như cũng chỉ để tốt cho SEO, ngoài ra cũng không còn giá trị gì. Nhưng nếu bạn sử dụng <strong>Internet Banking</strong> với http, rồi bạn đăng nhập với tài khoản ngân hàng của mình trên đó, mọi thông tin bạn gửi đi đều dưới dạng những gói tin có nội dung plain/text trần trụi, vậy điều gì bảo vệ được tài khoản của bạn nếu request kể trên bị những kẻ xấu dùng những thủ thuật hay phần mềm chuyên dụng để bắt được?</p>\n<p>Https giải bài toán trên bằng cách rất đơn giản, nội dung dạng plain/text giúp kẻ gian có thể bắt và đọc dễ dàng, vậy chúng ta hãy mã hoá nội dung để kẻ gian đó không thể hiểu được, và có bắt được gói tin cũng vô dụng?.</p>\n<h1 id=\"3-Https-va-van-de-ma-hoa-du-lieu\"><a href=\"#3-Https-va-van-de-ma-hoa-du-lieu\" class=\"headerlink\" title=\"3. Https và vấn đề mã hoá dữ liệu\"></a>3. Https và vấn đề mã hoá dữ liệu</h1><p>Trước tiên phải làm rõ là:</p>\n<p><strong><code>https = http + ssl</code></strong></p>\n<p>Trong đó:</p>\n<ol>\n<li><p>http là giao thức tryền tải.</p>\n</li>\n<li><p>ssl là cơ chế bảo mật thông tin.</p>\n</li>\n</ol>\n<p><img src=\"/images/7.gif\" alt=\"tam the tu tin\"></p>\n<p>Flow tối thiểu của <code>https</code> sẽ như sau:</p>\n<ol>\n<li><p><code>Client hello</code>, người dùng sử dụng trình duyệt sẽ request tới google.com.</p>\n</li>\n<li><p><code>Server hello</code>, request ở bước một đã tới nơi, server sẽ gửi trả client 2 thông tin quan trọng đó là <strong>ssl certificate</strong> (Để chứng minh “Ê, tao là google.com thật nha, not fake”) và 1 <strong>Public key</strong> (Gọi là Public-key-1. <em>Vậy ta có thể hiểu là ở Server google.com nó đang giữ Private key 1 ứng với Public key 1 kia</em>).</p>\n</li>\n<li><p>Browser sẽ xác minh <strong>ssl certificate</strong> nhận được để xem nó có phải là hàng real hay không. Vậy còn làm sao mà browser có thể phân định thật giả? Chúng ta sẽ tìm hiểu trong 1 bài viết khác.</p>\n</li>\n<li><p>Sau khi browser xác minh và đã tin tưởng máy chủ google.com, browser sẽ tạo 1 cặp khoá bảo mật RSA thứ 2, ta gọi là <strong>Public key 2 và Private key 2</strong>.</p>\n</li>\n<li><p>Browser dùng <strong>Public key 1</strong> đã nhận được từ bước 3, để mã hoá <em>Public key 2 và Private key 2</em> sinh ra trong bước 4, rồi gửi cặp khoá này dưới dạng đã mã hoá tới máy chủ google.com.</p>\n</li>\n<li><p>Như bạn nhớ, thì máy chủ google.com đang giữ <strong>Private key 1</strong> và thế là nó có thể giải mã và lấy được cặp key ở bước 5.</p>\n</li>\n<li><p>Vậy là cả máy chủ google.com và client đều có cặp khoá RSA thứ 2, mọi thông tin truyền gửi từ cả 2 phía bây giờ đều được mã hoá bằng Public key 2.</p>\n</li>\n</ol>\n<p>Note: Nhờ cơ chế mã hoá RSA (Chỉ có thể mã hoá bằng public key và giải mã nội dung bằng private key) kể trên. Server và client đã có thể liên lạc với nhau một cách an toàn. Trong quá trình trên, kể cả kẻ thủ ác có bắt được gói tin ở bước 2, bên trong có public key 1, thì cũng không phải vấn đề, bởi vì với public key đó thì hắn không thể đọc được thông tin mà client gửi ở bước 5.</p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Không có kết luận :)</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Đi luôn vào chủ đề, khi mới bắt đầu với môn mạng máy tính ở trường đại học, sự mập mờ khi còn ngồi trên ghế nhà trường khiến chúng ta đôi khi đã nhầm lẫn về <code>http</code> và <code>https</code>, nhớ ngày đó tôi đã từng nghĩ chúng là 2 giao thức khác nhau, à mà ngày đó tôi có hiểu giao thức là gì không nhỉ :fearful: thôi dẹp qua một bên, bản chất của <code>https</code> cũng là giao thức <code>http</code> nhưng thêm được chữ <code>s</code> ứng với <code>secure</code>. Nghe thôi đã thấy bảo mật rồi, <code>https</code> ra đời nhằm mục đích làm cho giao thức <code>http</code> trở nên an toàn hơn, vậy nó làm cho <code>http</code> trở nên an toàn hơn như thế nào?</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-Http-hieu-don-gian-thi-hoat-dong-the-nao\"><a href=\"#1-Http-hieu-don-gian-thi-hoat-dong-the-nao\" class=\"headerlink\" title=\"1. Http hiểu đơn giản thì hoạt động thế nào?\"></a>1. Http hiểu đơn giản thì hoạt động thế nào?</h1><p>Mục đích cuối cùng của mớ hỗn độn rối rắm này cũng là truyền nhận thông tin, tôi có một website tôi muốn gửi nó lên mạng internet để bạn, một ai đó mà tôi không quen có thể vô tình lướt qua đọc được.<br>Http là một giao thức, hiểu đơn giản là một bộ quy tắc để chung để người sử dụng dùng trình duyệt có thể truy cập tới 1 trang web, và trang web đó hiểu được yêu cầu đó rồi trả về nội dung mà trình duyệt có thể hiểu được, ví như có nhiều ngôn ngữ trên thế giới, vậy giữa 2 người có 2 tiếng nói khác nhau để giao tiếp được họ phải cùng nhau sử dụng một bộ ngôn ngữ chung mà cả hai cùng hiểu được.</p>\n<p>Một đặc điểm cơ bản của <code>http</code> là nó truyền nhận thông tin dưới dạng <strong>text</strong> thông thường, không hề mã hoã, điều này dẫn tới vấn đề đó là thông tin được truyền nhận nhanh chóng, nhẹ nhàng, nội dung rất thân thiện với người dùng (vì nó là text mà).</p>\n<p>Mọi thứ có vẻ good? không hẳn như vậy, việc dữ liệu truyền gửi được lưu dưới dạng text khiến nó quá thân thiện với người dùng, mà người dùng thì không phải ai cũng tốt :smirk: . Có những người dùng mà mục đích họ tới với website của bạn là để phá hoại, họ sẽ dễ dàng tấn công bằng cách nào đó lấy được request của bạn rồi đọc được nội dung trong request đó 1 cách dễ dàng.</p>\n<p>Bài học: Không phải lúc nào cũng nên quá thân thiện với người dùng cuối :worried:</p>\n<h1 id=\"2-Https-khac-phuc-van-de-cua-http-nhu-the-nao\"><a href=\"#2-Https-khac-phuc-van-de-cua-http-nhu-the-nao\" class=\"headerlink\" title=\"2. Https khắc phục vấn đề của http như thế nào?\"></a>2. Https khắc phục vấn đề của http như thế nào?</h1><p>Chúng ta đã nắm được khái quát vấn đề bảo mật gặp phải khi sử dụng <code>http</code>. Với những website giải trí thuần tuý với nội dung chủ yếu là hình ảnh, âm thanh và không có thông tin cần bảo mật thì sử dụng https hình như cũng chỉ để tốt cho SEO, ngoài ra cũng không còn giá trị gì. Nhưng nếu bạn sử dụng <strong>Internet Banking</strong> với http, rồi bạn đăng nhập với tài khoản ngân hàng của mình trên đó, mọi thông tin bạn gửi đi đều dưới dạng những gói tin có nội dung plain/text trần trụi, vậy điều gì bảo vệ được tài khoản của bạn nếu request kể trên bị những kẻ xấu dùng những thủ thuật hay phần mềm chuyên dụng để bắt được?</p>\n<p>Https giải bài toán trên bằng cách rất đơn giản, nội dung dạng plain/text giúp kẻ gian có thể bắt và đọc dễ dàng, vậy chúng ta hãy mã hoá nội dung để kẻ gian đó không thể hiểu được, và có bắt được gói tin cũng vô dụng?.</p>\n<h1 id=\"3-Https-va-van-de-ma-hoa-du-lieu\"><a href=\"#3-Https-va-van-de-ma-hoa-du-lieu\" class=\"headerlink\" title=\"3. Https và vấn đề mã hoá dữ liệu\"></a>3. Https và vấn đề mã hoá dữ liệu</h1><p>Trước tiên phải làm rõ là:</p>\n<p><strong><code>https = http + ssl</code></strong></p>\n<p>Trong đó:</p>\n<ol>\n<li><p>http là giao thức tryền tải.</p>\n</li>\n<li><p>ssl là cơ chế bảo mật thông tin.</p>\n</li>\n</ol>\n<p><img src=\"/images/7.gif\" alt=\"tam the tu tin\"></p>\n<p>Flow tối thiểu của <code>https</code> sẽ như sau:</p>\n<ol>\n<li><p><code>Client hello</code>, người dùng sử dụng trình duyệt sẽ request tới google.com.</p>\n</li>\n<li><p><code>Server hello</code>, request ở bước một đã tới nơi, server sẽ gửi trả client 2 thông tin quan trọng đó là <strong>ssl certificate</strong> (Để chứng minh “Ê, tao là google.com thật nha, not fake”) và 1 <strong>Public key</strong> (Gọi là Public-key-1. <em>Vậy ta có thể hiểu là ở Server google.com nó đang giữ Private key 1 ứng với Public key 1 kia</em>).</p>\n</li>\n<li><p>Browser sẽ xác minh <strong>ssl certificate</strong> nhận được để xem nó có phải là hàng real hay không. Vậy còn làm sao mà browser có thể phân định thật giả? Chúng ta sẽ tìm hiểu trong 1 bài viết khác.</p>\n</li>\n<li><p>Sau khi browser xác minh và đã tin tưởng máy chủ google.com, browser sẽ tạo 1 cặp khoá bảo mật RSA thứ 2, ta gọi là <strong>Public key 2 và Private key 2</strong>.</p>\n</li>\n<li><p>Browser dùng <strong>Public key 1</strong> đã nhận được từ bước 3, để mã hoá <em>Public key 2 và Private key 2</em> sinh ra trong bước 4, rồi gửi cặp khoá này dưới dạng đã mã hoá tới máy chủ google.com.</p>\n</li>\n<li><p>Như bạn nhớ, thì máy chủ google.com đang giữ <strong>Private key 1</strong> và thế là nó có thể giải mã và lấy được cặp key ở bước 5.</p>\n</li>\n<li><p>Vậy là cả máy chủ google.com và client đều có cặp khoá RSA thứ 2, mọi thông tin truyền gửi từ cả 2 phía bây giờ đều được mã hoá bằng Public key 2.</p>\n</li>\n</ol>\n<p>Note: Nhờ cơ chế mã hoá RSA (Chỉ có thể mã hoá bằng public key và giải mã nội dung bằng private key) kể trên. Server và client đã có thể liên lạc với nhau một cách an toàn. Trong quá trình trên, kể cả kẻ thủ ác có bắt được gói tin ở bước 2, bên trong có public key 1, thì cũng không phải vấn đề, bởi vì với public key đó thì hắn không thể đọc được thông tin mà client gửi ở bước 5.</p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Không có kết luận :)</p>\n"},{"title":"Cập Nhật Dữ Liệu Với ActiveRecord","date":"2019-05-07T17:00:00.000Z","draft":false,"mytag":"#TIL","_content":"\n# Đặt vấn đề\n\nNgoài phương thức thông dụng `update` để cập nhật dữ liệu. Rails nói chung hay Activerecord nói riêng còn cung cấp 1 số phương thức khác để thay đổi dữ liệu hiện có, hãy cùng tìm hiểu về chúng.\n\n# Luận bàn\n\n**Chuẩn bị:**\n\n1. Tôi có một model `Cat` với 2 thuộc tính là `age` và `name`.\n\n2. Trong model Cat tôi có 1 `validation` và 1 `callback` đơn giản.\n\n**Để so sánh các phương thức chúng ta chú ý đến một số điểm sau:**\n\n1. Phương thức nhận một field cần update hay nhiều field?\n\n2. Phương thức update được cho một hay nhiều record?\n\n3. Validate method có chạy hay không?\n\n4. Callback có chạy hay không?\n\n5. Trường update_at có được cập nhật hay không?\n\n# 1. Phương thức update\n\n**Instance method:**\n\nLà phương thức được gọi thông qua một instance. Ta truyền vào field name cần cập nhật và giá trị mới sau cập nhật. Ta có thể truyền tham số dưới dạng hash.\n\nVí dụ:\n\n```ruby\ncat = Cat.first\ncat.update(name: 'change name')\n```\n\nNhiều tham số\n\n```ruby\ncat = Cat.first\ncat.update(name: 'change name', age: 100)\n```\n\nTruyền dưới dạng hash\n\n```ruby\ncat = Cat.first\ncat.update({:name => 'change name', :age => 1})\n```\n\n**Class method**\n\nLà phương thức được gọi thông qua class model. Nhận vào 2 tham số, thứ nhất là id hoặc một mảng các id của record thuộc class cần cập nhật, thứ hai là một hash key-value các field name cần cập nhật và giá trị của chúng sau cập nhật.\n\nCập nhật 1 record\n\n```ruby\nCat.update(1, {:name => 'change name'})\n```\n\nCập nhật nhiều record\n\n```ruby\nCat.update([1, 2, 3], {:name => 'change name'})\n```\n\nNote:\n\n1. Trường updated_at đều được cập nhật lại khi dùng 2 phương thức trên.\n\n2. Validate và callback đều được chạy.\n\n3. Class method `update` thì có thể cập nhật nhiều record một lúc.\n\n# 2. Phương thức update_attribute và update_attributes\n\nPhương thức update_attribute nhận 2 tham số truyền vào, với tham số thứ nhất là field cần cập nhật và tham số thứ 2 là giá trị cập nhật (Khác với update, thì tham số truyền vào không thể để dưới dạng hash).\n\n```ruby\ncat = Cat.first\ncat.update_attribute(:name, 'change name')\n```\n\nPhương thức update_attributes khác với update_attribute là nó nhận 1 tham số chứ không phải 2. Ta truyền tham số dưới hạng một hash cho phương này với giá trị key-value tương ứng field cần update và giá trị cần cập nhật.\n\n```ruby\ncat = Cat.first\ncat.update_attributes({ :name => 'change name', :age => 20 })\n# cách khác\ncat.update_attributes({ name: 'meo tam the 2', age: 20 })\n```\n\nNote:\n\n1. Trường updated_at có được cập nhật lại.\n\n2. Callback vẫn chạy nhưng **không** chạy validate.\n\n3. update_attribute dùng cho cập nhật 1 field còn update_attributes cần khi cập nhật nhiều field.\n\n# 3. Phương update_column và update_columns\n\nPhương thức update_column có cú pháp giống như update_attribute, còn phương thức update_columns thì có cú pháp tương tự như update_attributes.\n\n```ruby\ncat = Cat.first\ncat.update_column(:name, 'change name')\n\n# với update_columns\ncat.update_columns(name: 'change name', age: 10)\n# or\ncat.update_columns(:name => 'change name', :age => 10)\n```\n\nTuy nhiên ta có một số điểm khác biệt cơ bản cần lưu ý với update_attribute và update_attributes cần lưu ý.\n\nNote: Với phương thức update_column và update_columns\n\n1. Trường updated_at không được cập nhật.\n\n2. Callback và validate đều **không** được chạy.\n\n# Kết luận\n\nTrên đây là một số nội dung cơ bản cần nắm bắt về cách cập nhật cơ sở dữ liệu với activerecord trong rails. Nhìn qua thì những phương thức này có vẻ khá giống nhau và đôi lúc bạn tự hỏi là lý do gì khiến phải sinh ra nhiều phương thức như vậy trong khi chỉ riêng phương thức `update` đã gần như làm được tất cả những gì mà chúng ta nghĩ là cần.\n\nCách đây ít lâu tôi có làm 1 ứng dụng nhỏ, trong đó có một model chính gọi là X, trong model này tôi có viết một callback tên Y được thực hiện sau khi record được save (với method after_save). Trong callback Y tôi sử dụng method `update`.\n\nĐáng buồn thay là đoạn code của tôi không hoạt động một cách bình thường, sau khi save record thì terminal bị crash với một vòng lặp bất tận, chợt nhận ra là khi sử dụng `update` thì callback được gọi lại, vậy là nó tạo ra một vòng lặp vĩnh viễn, save record(1) -> callback được gọi(2) -> trong callback có phương thức update(3) -> update được gọi(4) -> update lại gọi lại callback(2).\nĐể khắc phục thì cần chuyển `update` thành `update_column` hoặc `update_columns`.\n\nĐây là một ví dụ nhỏ về việc cần thiết cuả những phương thức kể trên, mỗi phương thức sẽ là tốt hoặc là duy nhất có thể trong từng trường hợp. Hãy cân nhắc kỹ.\n","source":"_posts/2019-05-08-phan-biet-update-update-column-va-update-attribute-trong-rails.md","raw":"---\ntitle: \"Cập Nhật Dữ Liệu Với ActiveRecord\"\ndate: 2019-05-08\ndraft: false\ntags: [\"activerecord\", \"rails\"]\ncategories: [\"rails notes\"]\nmytag: \"#TIL\"\n\n---\n\n# Đặt vấn đề\n\nNgoài phương thức thông dụng `update` để cập nhật dữ liệu. Rails nói chung hay Activerecord nói riêng còn cung cấp 1 số phương thức khác để thay đổi dữ liệu hiện có, hãy cùng tìm hiểu về chúng.\n\n# Luận bàn\n\n**Chuẩn bị:**\n\n1. Tôi có một model `Cat` với 2 thuộc tính là `age` và `name`.\n\n2. Trong model Cat tôi có 1 `validation` và 1 `callback` đơn giản.\n\n**Để so sánh các phương thức chúng ta chú ý đến một số điểm sau:**\n\n1. Phương thức nhận một field cần update hay nhiều field?\n\n2. Phương thức update được cho một hay nhiều record?\n\n3. Validate method có chạy hay không?\n\n4. Callback có chạy hay không?\n\n5. Trường update_at có được cập nhật hay không?\n\n# 1. Phương thức update\n\n**Instance method:**\n\nLà phương thức được gọi thông qua một instance. Ta truyền vào field name cần cập nhật và giá trị mới sau cập nhật. Ta có thể truyền tham số dưới dạng hash.\n\nVí dụ:\n\n```ruby\ncat = Cat.first\ncat.update(name: 'change name')\n```\n\nNhiều tham số\n\n```ruby\ncat = Cat.first\ncat.update(name: 'change name', age: 100)\n```\n\nTruyền dưới dạng hash\n\n```ruby\ncat = Cat.first\ncat.update({:name => 'change name', :age => 1})\n```\n\n**Class method**\n\nLà phương thức được gọi thông qua class model. Nhận vào 2 tham số, thứ nhất là id hoặc một mảng các id của record thuộc class cần cập nhật, thứ hai là một hash key-value các field name cần cập nhật và giá trị của chúng sau cập nhật.\n\nCập nhật 1 record\n\n```ruby\nCat.update(1, {:name => 'change name'})\n```\n\nCập nhật nhiều record\n\n```ruby\nCat.update([1, 2, 3], {:name => 'change name'})\n```\n\nNote:\n\n1. Trường updated_at đều được cập nhật lại khi dùng 2 phương thức trên.\n\n2. Validate và callback đều được chạy.\n\n3. Class method `update` thì có thể cập nhật nhiều record một lúc.\n\n# 2. Phương thức update_attribute và update_attributes\n\nPhương thức update_attribute nhận 2 tham số truyền vào, với tham số thứ nhất là field cần cập nhật và tham số thứ 2 là giá trị cập nhật (Khác với update, thì tham số truyền vào không thể để dưới dạng hash).\n\n```ruby\ncat = Cat.first\ncat.update_attribute(:name, 'change name')\n```\n\nPhương thức update_attributes khác với update_attribute là nó nhận 1 tham số chứ không phải 2. Ta truyền tham số dưới hạng một hash cho phương này với giá trị key-value tương ứng field cần update và giá trị cần cập nhật.\n\n```ruby\ncat = Cat.first\ncat.update_attributes({ :name => 'change name', :age => 20 })\n# cách khác\ncat.update_attributes({ name: 'meo tam the 2', age: 20 })\n```\n\nNote:\n\n1. Trường updated_at có được cập nhật lại.\n\n2. Callback vẫn chạy nhưng **không** chạy validate.\n\n3. update_attribute dùng cho cập nhật 1 field còn update_attributes cần khi cập nhật nhiều field.\n\n# 3. Phương update_column và update_columns\n\nPhương thức update_column có cú pháp giống như update_attribute, còn phương thức update_columns thì có cú pháp tương tự như update_attributes.\n\n```ruby\ncat = Cat.first\ncat.update_column(:name, 'change name')\n\n# với update_columns\ncat.update_columns(name: 'change name', age: 10)\n# or\ncat.update_columns(:name => 'change name', :age => 10)\n```\n\nTuy nhiên ta có một số điểm khác biệt cơ bản cần lưu ý với update_attribute và update_attributes cần lưu ý.\n\nNote: Với phương thức update_column và update_columns\n\n1. Trường updated_at không được cập nhật.\n\n2. Callback và validate đều **không** được chạy.\n\n# Kết luận\n\nTrên đây là một số nội dung cơ bản cần nắm bắt về cách cập nhật cơ sở dữ liệu với activerecord trong rails. Nhìn qua thì những phương thức này có vẻ khá giống nhau và đôi lúc bạn tự hỏi là lý do gì khiến phải sinh ra nhiều phương thức như vậy trong khi chỉ riêng phương thức `update` đã gần như làm được tất cả những gì mà chúng ta nghĩ là cần.\n\nCách đây ít lâu tôi có làm 1 ứng dụng nhỏ, trong đó có một model chính gọi là X, trong model này tôi có viết một callback tên Y được thực hiện sau khi record được save (với method after_save). Trong callback Y tôi sử dụng method `update`.\n\nĐáng buồn thay là đoạn code của tôi không hoạt động một cách bình thường, sau khi save record thì terminal bị crash với một vòng lặp bất tận, chợt nhận ra là khi sử dụng `update` thì callback được gọi lại, vậy là nó tạo ra một vòng lặp vĩnh viễn, save record(1) -> callback được gọi(2) -> trong callback có phương thức update(3) -> update được gọi(4) -> update lại gọi lại callback(2).\nĐể khắc phục thì cần chuyển `update` thành `update_column` hoặc `update_columns`.\n\nĐây là một ví dụ nhỏ về việc cần thiết cuả những phương thức kể trên, mỗi phương thức sẽ là tốt hoặc là duy nhất có thể trong từng trường hợp. Hãy cân nhắc kỹ.\n","slug":"2019-05-08-phan-biet-update-update-column-va-update-attribute-trong-rails","published":1,"updated":"2019-11-13T04:05:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7sufz001i5rrs7ptnefno","content":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Ngoài phương thức thông dụng <code>update</code> để cập nhật dữ liệu. Rails nói chung hay Activerecord nói riêng còn cung cấp 1 số phương thức khác để thay đổi dữ liệu hiện có, hãy cùng tìm hiểu về chúng.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><p><strong>Chuẩn bị:</strong></p>\n<ol>\n<li><p>Tôi có một model <code>Cat</code> với 2 thuộc tính là <code>age</code> và <code>name</code>.</p>\n</li>\n<li><p>Trong model Cat tôi có 1 <code>validation</code> và 1 <code>callback</code> đơn giản.</p>\n</li>\n</ol>\n<p><strong>Để so sánh các phương thức chúng ta chú ý đến một số điểm sau:</strong></p>\n<ol>\n<li><p>Phương thức nhận một field cần update hay nhiều field?</p>\n</li>\n<li><p>Phương thức update được cho một hay nhiều record?</p>\n</li>\n<li><p>Validate method có chạy hay không?</p>\n</li>\n<li><p>Callback có chạy hay không?</p>\n</li>\n<li><p>Trường update_at có được cập nhật hay không?</p>\n</li>\n</ol>\n<h1 id=\"1-Phuong-thuc-update\"><a href=\"#1-Phuong-thuc-update\" class=\"headerlink\" title=\"1. Phương thức update\"></a>1. Phương thức update</h1><p><strong>Instance method:</strong></p>\n<p>Là phương thức được gọi thông qua một instance. Ta truyền vào field name cần cập nhật và giá trị mới sau cập nhật. Ta có thể truyền tham số dưới dạng hash.</p>\n<p>Ví dụ:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat = Cat.first</span><br><span class=\"line\">cat.update(<span class=\"symbol\">name:</span> <span class=\"string\">'change name'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Nhiều tham số</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat = Cat.first</span><br><span class=\"line\">cat.update(<span class=\"symbol\">name:</span> <span class=\"string\">'change name'</span>, <span class=\"symbol\">age:</span> <span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Truyền dưới dạng hash</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat = Cat.first</span><br><span class=\"line\">cat.update(&#123;<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'change name'</span>, <span class=\"symbol\">:age</span> =&gt; <span class=\"number\">1</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>Class method</strong></p>\n<p>Là phương thức được gọi thông qua class model. Nhận vào 2 tham số, thứ nhất là id hoặc một mảng các id của record thuộc class cần cập nhật, thứ hai là một hash key-value các field name cần cập nhật và giá trị của chúng sau cập nhật.</p>\n<p>Cập nhật 1 record</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cat.update(<span class=\"number\">1</span>, &#123;<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'change name'</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Cập nhật nhiều record</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cat.update([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], &#123;<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'change name'</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Note:</p>\n<ol>\n<li><p>Trường updated_at đều được cập nhật lại khi dùng 2 phương thức trên.</p>\n</li>\n<li><p>Validate và callback đều được chạy.</p>\n</li>\n<li><p>Class method <code>update</code> thì có thể cập nhật nhiều record một lúc.</p>\n</li>\n</ol>\n<h1 id=\"2-Phuong-thuc-update-attribute-va-update-attributes\"><a href=\"#2-Phuong-thuc-update-attribute-va-update-attributes\" class=\"headerlink\" title=\"2. Phương thức update_attribute và update_attributes\"></a>2. Phương thức update_attribute và update_attributes</h1><p>Phương thức update_attribute nhận 2 tham số truyền vào, với tham số thứ nhất là field cần cập nhật và tham số thứ 2 là giá trị cập nhật (Khác với update, thì tham số truyền vào không thể để dưới dạng hash).</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat = Cat.first</span><br><span class=\"line\">cat.update_attribute(<span class=\"symbol\">:name</span>, <span class=\"string\">'change name'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Phương thức update_attributes khác với update_attribute là nó nhận 1 tham số chứ không phải 2. Ta truyền tham số dưới hạng một hash cho phương này với giá trị key-value tương ứng field cần update và giá trị cần cập nhật.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat = Cat.first</span><br><span class=\"line\">cat.update_attributes(&#123; <span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'change name'</span>, <span class=\"symbol\">:age</span> =&gt; <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\"># cách khác</span></span><br><span class=\"line\">cat.update_attributes(&#123; <span class=\"symbol\">name:</span> <span class=\"string\">'meo tam the 2'</span>, <span class=\"symbol\">age:</span> <span class=\"number\">20</span> &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Note:</p>\n<ol>\n<li><p>Trường updated_at có được cập nhật lại.</p>\n</li>\n<li><p>Callback vẫn chạy nhưng <strong>không</strong> chạy validate.</p>\n</li>\n<li><p>update_attribute dùng cho cập nhật 1 field còn update_attributes cần khi cập nhật nhiều field.</p>\n</li>\n</ol>\n<h1 id=\"3-Phuong-update-column-va-update-columns\"><a href=\"#3-Phuong-update-column-va-update-columns\" class=\"headerlink\" title=\"3. Phương update_column và update_columns\"></a>3. Phương update_column và update_columns</h1><p>Phương thức update_column có cú pháp giống như update_attribute, còn phương thức update_columns thì có cú pháp tương tự như update_attributes.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat = Cat.first</span><br><span class=\"line\">cat.update_column(<span class=\"symbol\">:name</span>, <span class=\"string\">'change name'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># với update_columns</span></span><br><span class=\"line\">cat.update_columns(<span class=\"symbol\">name:</span> <span class=\"string\">'change name'</span>, <span class=\"symbol\">age:</span> <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">cat.update_columns(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'change name'</span>, <span class=\"symbol\">:age</span> =&gt; <span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Tuy nhiên ta có một số điểm khác biệt cơ bản cần lưu ý với update_attribute và update_attributes cần lưu ý.</p>\n<p>Note: Với phương thức update_column và update_columns</p>\n<ol>\n<li><p>Trường updated_at không được cập nhật.</p>\n</li>\n<li><p>Callback và validate đều <strong>không</strong> được chạy.</p>\n</li>\n</ol>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Trên đây là một số nội dung cơ bản cần nắm bắt về cách cập nhật cơ sở dữ liệu với activerecord trong rails. Nhìn qua thì những phương thức này có vẻ khá giống nhau và đôi lúc bạn tự hỏi là lý do gì khiến phải sinh ra nhiều phương thức như vậy trong khi chỉ riêng phương thức <code>update</code> đã gần như làm được tất cả những gì mà chúng ta nghĩ là cần.</p>\n<p>Cách đây ít lâu tôi có làm 1 ứng dụng nhỏ, trong đó có một model chính gọi là X, trong model này tôi có viết một callback tên Y được thực hiện sau khi record được save (với method after_save). Trong callback Y tôi sử dụng method <code>update</code>.</p>\n<p>Đáng buồn thay là đoạn code của tôi không hoạt động một cách bình thường, sau khi save record thì terminal bị crash với một vòng lặp bất tận, chợt nhận ra là khi sử dụng <code>update</code> thì callback được gọi lại, vậy là nó tạo ra một vòng lặp vĩnh viễn, save record(1) -&gt; callback được gọi(2) -&gt; trong callback có phương thức update(3) -&gt; update được gọi(4) -&gt; update lại gọi lại callback(2).<br>Để khắc phục thì cần chuyển <code>update</code> thành <code>update_column</code> hoặc <code>update_columns</code>.</p>\n<p>Đây là một ví dụ nhỏ về việc cần thiết cuả những phương thức kể trên, mỗi phương thức sẽ là tốt hoặc là duy nhất có thể trong từng trường hợp. Hãy cân nhắc kỹ.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Ngoài phương thức thông dụng <code>update</code> để cập nhật dữ liệu. Rails nói chung hay Activerecord nói riêng còn cung cấp 1 số phương thức khác để thay đổi dữ liệu hiện có, hãy cùng tìm hiểu về chúng.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><p><strong>Chuẩn bị:</strong></p>\n<ol>\n<li><p>Tôi có một model <code>Cat</code> với 2 thuộc tính là <code>age</code> và <code>name</code>.</p>\n</li>\n<li><p>Trong model Cat tôi có 1 <code>validation</code> và 1 <code>callback</code> đơn giản.</p>\n</li>\n</ol>\n<p><strong>Để so sánh các phương thức chúng ta chú ý đến một số điểm sau:</strong></p>\n<ol>\n<li><p>Phương thức nhận một field cần update hay nhiều field?</p>\n</li>\n<li><p>Phương thức update được cho một hay nhiều record?</p>\n</li>\n<li><p>Validate method có chạy hay không?</p>\n</li>\n<li><p>Callback có chạy hay không?</p>\n</li>\n<li><p>Trường update_at có được cập nhật hay không?</p>\n</li>\n</ol>\n<h1 id=\"1-Phuong-thuc-update\"><a href=\"#1-Phuong-thuc-update\" class=\"headerlink\" title=\"1. Phương thức update\"></a>1. Phương thức update</h1><p><strong>Instance method:</strong></p>\n<p>Là phương thức được gọi thông qua một instance. Ta truyền vào field name cần cập nhật và giá trị mới sau cập nhật. Ta có thể truyền tham số dưới dạng hash.</p>\n<p>Ví dụ:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat = Cat.first</span><br><span class=\"line\">cat.update(<span class=\"symbol\">name:</span> <span class=\"string\">'change name'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Nhiều tham số</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat = Cat.first</span><br><span class=\"line\">cat.update(<span class=\"symbol\">name:</span> <span class=\"string\">'change name'</span>, <span class=\"symbol\">age:</span> <span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Truyền dưới dạng hash</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat = Cat.first</span><br><span class=\"line\">cat.update(&#123;<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'change name'</span>, <span class=\"symbol\">:age</span> =&gt; <span class=\"number\">1</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>Class method</strong></p>\n<p>Là phương thức được gọi thông qua class model. Nhận vào 2 tham số, thứ nhất là id hoặc một mảng các id của record thuộc class cần cập nhật, thứ hai là một hash key-value các field name cần cập nhật và giá trị của chúng sau cập nhật.</p>\n<p>Cập nhật 1 record</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cat.update(<span class=\"number\">1</span>, &#123;<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'change name'</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Cập nhật nhiều record</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cat.update([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], &#123;<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'change name'</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Note:</p>\n<ol>\n<li><p>Trường updated_at đều được cập nhật lại khi dùng 2 phương thức trên.</p>\n</li>\n<li><p>Validate và callback đều được chạy.</p>\n</li>\n<li><p>Class method <code>update</code> thì có thể cập nhật nhiều record một lúc.</p>\n</li>\n</ol>\n<h1 id=\"2-Phuong-thuc-update-attribute-va-update-attributes\"><a href=\"#2-Phuong-thuc-update-attribute-va-update-attributes\" class=\"headerlink\" title=\"2. Phương thức update_attribute và update_attributes\"></a>2. Phương thức update_attribute và update_attributes</h1><p>Phương thức update_attribute nhận 2 tham số truyền vào, với tham số thứ nhất là field cần cập nhật và tham số thứ 2 là giá trị cập nhật (Khác với update, thì tham số truyền vào không thể để dưới dạng hash).</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat = Cat.first</span><br><span class=\"line\">cat.update_attribute(<span class=\"symbol\">:name</span>, <span class=\"string\">'change name'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Phương thức update_attributes khác với update_attribute là nó nhận 1 tham số chứ không phải 2. Ta truyền tham số dưới hạng một hash cho phương này với giá trị key-value tương ứng field cần update và giá trị cần cập nhật.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat = Cat.first</span><br><span class=\"line\">cat.update_attributes(&#123; <span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'change name'</span>, <span class=\"symbol\">:age</span> =&gt; <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\"># cách khác</span></span><br><span class=\"line\">cat.update_attributes(&#123; <span class=\"symbol\">name:</span> <span class=\"string\">'meo tam the 2'</span>, <span class=\"symbol\">age:</span> <span class=\"number\">20</span> &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Note:</p>\n<ol>\n<li><p>Trường updated_at có được cập nhật lại.</p>\n</li>\n<li><p>Callback vẫn chạy nhưng <strong>không</strong> chạy validate.</p>\n</li>\n<li><p>update_attribute dùng cho cập nhật 1 field còn update_attributes cần khi cập nhật nhiều field.</p>\n</li>\n</ol>\n<h1 id=\"3-Phuong-update-column-va-update-columns\"><a href=\"#3-Phuong-update-column-va-update-columns\" class=\"headerlink\" title=\"3. Phương update_column và update_columns\"></a>3. Phương update_column và update_columns</h1><p>Phương thức update_column có cú pháp giống như update_attribute, còn phương thức update_columns thì có cú pháp tương tự như update_attributes.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat = Cat.first</span><br><span class=\"line\">cat.update_column(<span class=\"symbol\">:name</span>, <span class=\"string\">'change name'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># với update_columns</span></span><br><span class=\"line\">cat.update_columns(<span class=\"symbol\">name:</span> <span class=\"string\">'change name'</span>, <span class=\"symbol\">age:</span> <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">cat.update_columns(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'change name'</span>, <span class=\"symbol\">:age</span> =&gt; <span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Tuy nhiên ta có một số điểm khác biệt cơ bản cần lưu ý với update_attribute và update_attributes cần lưu ý.</p>\n<p>Note: Với phương thức update_column và update_columns</p>\n<ol>\n<li><p>Trường updated_at không được cập nhật.</p>\n</li>\n<li><p>Callback và validate đều <strong>không</strong> được chạy.</p>\n</li>\n</ol>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Trên đây là một số nội dung cơ bản cần nắm bắt về cách cập nhật cơ sở dữ liệu với activerecord trong rails. Nhìn qua thì những phương thức này có vẻ khá giống nhau và đôi lúc bạn tự hỏi là lý do gì khiến phải sinh ra nhiều phương thức như vậy trong khi chỉ riêng phương thức <code>update</code> đã gần như làm được tất cả những gì mà chúng ta nghĩ là cần.</p>\n<p>Cách đây ít lâu tôi có làm 1 ứng dụng nhỏ, trong đó có một model chính gọi là X, trong model này tôi có viết một callback tên Y được thực hiện sau khi record được save (với method after_save). Trong callback Y tôi sử dụng method <code>update</code>.</p>\n<p>Đáng buồn thay là đoạn code của tôi không hoạt động một cách bình thường, sau khi save record thì terminal bị crash với một vòng lặp bất tận, chợt nhận ra là khi sử dụng <code>update</code> thì callback được gọi lại, vậy là nó tạo ra một vòng lặp vĩnh viễn, save record(1) -&gt; callback được gọi(2) -&gt; trong callback có phương thức update(3) -&gt; update được gọi(4) -&gt; update lại gọi lại callback(2).<br>Để khắc phục thì cần chuyển <code>update</code> thành <code>update_column</code> hoặc <code>update_columns</code>.</p>\n<p>Đây là một ví dụ nhỏ về việc cần thiết cuả những phương thức kể trên, mỗi phương thức sẽ là tốt hoặc là duy nhất có thể trong từng trường hợp. Hãy cân nhắc kỹ.</p>\n"},{"title":"Require Và Load Trong Ruby","date":"2019-05-14T17:00:00.000Z","draft":false,"mytag":"Ruby","mytrend":"COOL","_content":"# Đặt vấn đề\n\nKhác với rails, một framework đã có hỗ trợ autoloading, một chương trình ruby đơn thuần không có cơ chế đó. Để sử dụng những mã nguồn phụ thuộc ta phải \"gọi\" chúng tại file hiện tại bằng method `require` hoặc `load`. Ví dụ:\n\n```ruby\nrequire 'animal'\n\nclass Cat < Animal\n  def hello\n    @cat = Animal.new\n  end\nend\n```\n\nỞ một vấn đề khác trong ruby, đó là ngôn ngữ này không hỗ trợ đa kế thừa, thay vào đó chúng có 1 cơ chế gọi là `mixin` để có thể sử dụng các phương thức trong nhiều `moudle` khác nhau. Ta sử dụng 2 method là `include` và `extend` để hiện thực hoá điều này.\n\n# Luận bàn\n\n# 1. So sánh require và require_relative\n\nTrong tiêu đề bài viết không hề đề cập đến `require_relative` vậy sao giờ phải tìm hiểu về nó? Câu trả lời nằm ở cách mà phương thức `require` hoạt động.\n\nTrở lại ví dụ trong mục đặt vấn đề, giả sử cả 2 file `cat.rb` và `animal.rb` nằm trong cùng một thư mục:\n\n```\n- app\n  - cat.rb\n  - animal.rb\n```\n\nCâu hỏi đặt ra là liệu đoạn mã trong phần đặt vấn đề có work với cấu trúc file như này hay không? Có hoặc không, đó là câu trả lời.\n\nKhác với mường tượng ban đầu rằng phương thức require cũng sẽ bắt đầu tìm file từ thư mục gốc (thư mục chứa file gọi method) thì thực tế reuire tìm kiếm file bằng một cách khác.\n\nNó sẽ tìm đến biến global `$LOAD_PATH`, biến này là một đường dẫn, phương thức require sẽ tìm đến đường dẫn này và coi thư mục đó là gốc, nó sẽ tìm kiếm những file được requỉe bắt đầu từ thư mục đó. Trong lần đầu tiên nó tìm thấy thì ruby sẽ dừng chương trình ở đây và load file vừa tìm được lên. Nếu tìm hết các đường dẫn trong $LOAD_PATH và vẫn không thấy thì `LoadError` sẽ được gọi tới.\n\nTrở về với câu hỏi bên trên, đoạn code của chúng ta work khi biến `$LOAD_PATH` được định nghĩa, và nó là đường dẫn tới thư mục đang làm việc (chính là folder app).\n\nTrong tất cả các trường hợp còn lại, như khi biến này chưa được định nghĩa hay nó lại lại một đường dẫn đến một folder khác, thì đoạn mã khi đầu của chúng ta không thể chạy (vì require không tìm được file tương ứng theo yêu cầu).\n\nThứ bạn nhận được khi này chỉ là một thông báo lỗi `cannot load such file -- animal.rb (LoadError)`.\n\n**Giải quyết vấn đề trên bằng cách nào?**\n\nTa sẽ có thể dùng 2 cách:\n\nCách 1: Điền thêm thư mục đang làm việc vào giá trị của biến `$LOAD_PATH`, khi này thì đoạn mã chúng ta sẽ sửa lại như sau:\n\n```ruby\n# nối thêm đường dẫn thư mục hiện tại vào giá trị hiện tại của biến $LOAD_PATH\n$LOAD_PATH << File.join(File.dirname(__FILE__)\nrequire 'animal'\n\nclass Cat < Animal\n  def hello\n    @cat = Animal.new\n  end\nend\n```\n\nCách 2: Sử dụng `require_relative` thay thế cho require, sửa lại đoạn mã như sau:\n\n```ruby\nrequire_relative 'animal'\n\nclass Cat < Animal\n  def hello\n    @cat = Animal.new\n  end\nend\n```\n\nCả hai phương pháp trên đều hoạt động bình thường.\n\n> $: là một cách viết tắt cho $LOAD_PATH\n\n# 2. So sánh require và load\n\nNhư trong mục 1 đã nói vể require, thực chất load có cách hoạt động và mục đích sử dụng rất giống với require. Cả 2 đều được dùng đê \"gọi\" những đoạn mã cần thiết vào file hiện tại đang làm việc, như việc bạn muốn import thêm một file js vào file html đang làm việc nào đó.\n\nTuy nhiên giữa chúng có một điểm khác nhau cơ bản, mà từ đó đã dẫn tới một lời khuyên về việc sử dụng chúng như sau:\n\n```\nMoreover, Kernel#require loads files once, but development is much more smooth\nif code gets refreshed when it changes without restarting the server.\nIt would be nice to be able to use Kernel#load in development,\nand Kernel#require in production.\n```\n\n`- trích dẫn guides.rubyonrails -`\n\n:arrow_right: Điều rút ra ở đây là:\n\n:one: require sẽ đọc và load file được gọi một lần duy nhất.\n\n:two: load sẽ đọc và load file được gọi mỗi khi file đó được chạy.\n\nTừ đó dẫn đến việc là load sẽ hữu dụng khi làm việc tại môi trường development hơn, nơi mà thay đổi diễn ra liên tục, còn require thích hợp khi triển khai lên production.\n\nNote: Sau khi bạn chạy tới method require, nó sẽ đọc file bạn require và lưu tại bộ nhớ, những lần tiếp theo khi bạn chạy tới file đó, nó sẽ đọc nội dung từ bộ nhớ (mà nó đã lưu lại tại lần load đầu tiên), điều này giúp tăng performance vì không phải lood lại file lần nữa, nhưng đồng nghĩa với đó là những thay đổi sau đó tại file require sẽ không được load khi chạy.\n\n# 3. So sánh include và extend\n\nKhông có nhiều liên hệ với hai mục đầu, 2 phương thức được đề cập trong mục 3 để giải quyết bài tóan mixin trong ruby, như đã có lần tôi trình bày khái quát [tại đây](https://hdchinh.com/post/2019-02-24-ruby-method-lookup/).\n\nCó vẻ vì cao hứng chém gió title quá, mà tôi quên mất đã viết về hai phương thức này một lần, và hiện tại vẫn chưa có gì để bổ sung thêm, nếu cần hãy đọc lại bài viết tham khảo bên trên nhé.\n\n# Kết luận\n\nTham khảo:\n\n[1] [autoloading_and_reloading_constants](https://guides.rubyonrails.org/autoloading_and_reloading_constants.html)\n","source":"_posts/2019-05-15-require-load-include-va-extend-trong-ruby.md","raw":"---\ntitle: \"Require Và Load Trong Ruby\"\ndate: 2019-05-15\ndraft: false\ntags: [\"ruby\"]\ncategories: [\"ruby notes\"]\nmytag: \"Ruby\"\nmytrend: \"COOL\"\n\n---\n# Đặt vấn đề\n\nKhác với rails, một framework đã có hỗ trợ autoloading, một chương trình ruby đơn thuần không có cơ chế đó. Để sử dụng những mã nguồn phụ thuộc ta phải \"gọi\" chúng tại file hiện tại bằng method `require` hoặc `load`. Ví dụ:\n\n```ruby\nrequire 'animal'\n\nclass Cat < Animal\n  def hello\n    @cat = Animal.new\n  end\nend\n```\n\nỞ một vấn đề khác trong ruby, đó là ngôn ngữ này không hỗ trợ đa kế thừa, thay vào đó chúng có 1 cơ chế gọi là `mixin` để có thể sử dụng các phương thức trong nhiều `moudle` khác nhau. Ta sử dụng 2 method là `include` và `extend` để hiện thực hoá điều này.\n\n# Luận bàn\n\n# 1. So sánh require và require_relative\n\nTrong tiêu đề bài viết không hề đề cập đến `require_relative` vậy sao giờ phải tìm hiểu về nó? Câu trả lời nằm ở cách mà phương thức `require` hoạt động.\n\nTrở lại ví dụ trong mục đặt vấn đề, giả sử cả 2 file `cat.rb` và `animal.rb` nằm trong cùng một thư mục:\n\n```\n- app\n  - cat.rb\n  - animal.rb\n```\n\nCâu hỏi đặt ra là liệu đoạn mã trong phần đặt vấn đề có work với cấu trúc file như này hay không? Có hoặc không, đó là câu trả lời.\n\nKhác với mường tượng ban đầu rằng phương thức require cũng sẽ bắt đầu tìm file từ thư mục gốc (thư mục chứa file gọi method) thì thực tế reuire tìm kiếm file bằng một cách khác.\n\nNó sẽ tìm đến biến global `$LOAD_PATH`, biến này là một đường dẫn, phương thức require sẽ tìm đến đường dẫn này và coi thư mục đó là gốc, nó sẽ tìm kiếm những file được requỉe bắt đầu từ thư mục đó. Trong lần đầu tiên nó tìm thấy thì ruby sẽ dừng chương trình ở đây và load file vừa tìm được lên. Nếu tìm hết các đường dẫn trong $LOAD_PATH và vẫn không thấy thì `LoadError` sẽ được gọi tới.\n\nTrở về với câu hỏi bên trên, đoạn code của chúng ta work khi biến `$LOAD_PATH` được định nghĩa, và nó là đường dẫn tới thư mục đang làm việc (chính là folder app).\n\nTrong tất cả các trường hợp còn lại, như khi biến này chưa được định nghĩa hay nó lại lại một đường dẫn đến một folder khác, thì đoạn mã khi đầu của chúng ta không thể chạy (vì require không tìm được file tương ứng theo yêu cầu).\n\nThứ bạn nhận được khi này chỉ là một thông báo lỗi `cannot load such file -- animal.rb (LoadError)`.\n\n**Giải quyết vấn đề trên bằng cách nào?**\n\nTa sẽ có thể dùng 2 cách:\n\nCách 1: Điền thêm thư mục đang làm việc vào giá trị của biến `$LOAD_PATH`, khi này thì đoạn mã chúng ta sẽ sửa lại như sau:\n\n```ruby\n# nối thêm đường dẫn thư mục hiện tại vào giá trị hiện tại của biến $LOAD_PATH\n$LOAD_PATH << File.join(File.dirname(__FILE__)\nrequire 'animal'\n\nclass Cat < Animal\n  def hello\n    @cat = Animal.new\n  end\nend\n```\n\nCách 2: Sử dụng `require_relative` thay thế cho require, sửa lại đoạn mã như sau:\n\n```ruby\nrequire_relative 'animal'\n\nclass Cat < Animal\n  def hello\n    @cat = Animal.new\n  end\nend\n```\n\nCả hai phương pháp trên đều hoạt động bình thường.\n\n> $: là một cách viết tắt cho $LOAD_PATH\n\n# 2. So sánh require và load\n\nNhư trong mục 1 đã nói vể require, thực chất load có cách hoạt động và mục đích sử dụng rất giống với require. Cả 2 đều được dùng đê \"gọi\" những đoạn mã cần thiết vào file hiện tại đang làm việc, như việc bạn muốn import thêm một file js vào file html đang làm việc nào đó.\n\nTuy nhiên giữa chúng có một điểm khác nhau cơ bản, mà từ đó đã dẫn tới một lời khuyên về việc sử dụng chúng như sau:\n\n```\nMoreover, Kernel#require loads files once, but development is much more smooth\nif code gets refreshed when it changes without restarting the server.\nIt would be nice to be able to use Kernel#load in development,\nand Kernel#require in production.\n```\n\n`- trích dẫn guides.rubyonrails -`\n\n:arrow_right: Điều rút ra ở đây là:\n\n:one: require sẽ đọc và load file được gọi một lần duy nhất.\n\n:two: load sẽ đọc và load file được gọi mỗi khi file đó được chạy.\n\nTừ đó dẫn đến việc là load sẽ hữu dụng khi làm việc tại môi trường development hơn, nơi mà thay đổi diễn ra liên tục, còn require thích hợp khi triển khai lên production.\n\nNote: Sau khi bạn chạy tới method require, nó sẽ đọc file bạn require và lưu tại bộ nhớ, những lần tiếp theo khi bạn chạy tới file đó, nó sẽ đọc nội dung từ bộ nhớ (mà nó đã lưu lại tại lần load đầu tiên), điều này giúp tăng performance vì không phải lood lại file lần nữa, nhưng đồng nghĩa với đó là những thay đổi sau đó tại file require sẽ không được load khi chạy.\n\n# 3. So sánh include và extend\n\nKhông có nhiều liên hệ với hai mục đầu, 2 phương thức được đề cập trong mục 3 để giải quyết bài tóan mixin trong ruby, như đã có lần tôi trình bày khái quát [tại đây](https://hdchinh.com/post/2019-02-24-ruby-method-lookup/).\n\nCó vẻ vì cao hứng chém gió title quá, mà tôi quên mất đã viết về hai phương thức này một lần, và hiện tại vẫn chưa có gì để bổ sung thêm, nếu cần hãy đọc lại bài viết tham khảo bên trên nhé.\n\n# Kết luận\n\nTham khảo:\n\n[1] [autoloading_and_reloading_constants](https://guides.rubyonrails.org/autoloading_and_reloading_constants.html)\n","slug":"2019-05-15-require-load-include-va-extend-trong-ruby","published":1,"updated":"2019-11-13T04:05:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7sug0001k5rrsbj7v5c9w","content":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Khác với rails, một framework đã có hỗ trợ autoloading, một chương trình ruby đơn thuần không có cơ chế đó. Để sử dụng những mã nguồn phụ thuộc ta phải “gọi” chúng tại file hiện tại bằng method <code>require</code> hoặc <code>load</code>. Ví dụ:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'animal'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> &lt; Animal</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span></span></span><br><span class=\"line\">    @cat = Animal.new</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Ở một vấn đề khác trong ruby, đó là ngôn ngữ này không hỗ trợ đa kế thừa, thay vào đó chúng có 1 cơ chế gọi là <code>mixin</code> để có thể sử dụng các phương thức trong nhiều <code>moudle</code> khác nhau. Ta sử dụng 2 method là <code>include</code> và <code>extend</code> để hiện thực hoá điều này.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-So-sanh-require-va-require-relative\"><a href=\"#1-So-sanh-require-va-require-relative\" class=\"headerlink\" title=\"1. So sánh require và require_relative\"></a>1. So sánh require và require_relative</h1><p>Trong tiêu đề bài viết không hề đề cập đến <code>require_relative</code> vậy sao giờ phải tìm hiểu về nó? Câu trả lời nằm ở cách mà phương thức <code>require</code> hoạt động.</p>\n<p>Trở lại ví dụ trong mục đặt vấn đề, giả sử cả 2 file <code>cat.rb</code> và <code>animal.rb</code> nằm trong cùng một thư mục:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- app</span><br><span class=\"line\">  - cat.rb</span><br><span class=\"line\">  - animal.rb</span><br></pre></td></tr></table></figure>\n\n<p>Câu hỏi đặt ra là liệu đoạn mã trong phần đặt vấn đề có work với cấu trúc file như này hay không? Có hoặc không, đó là câu trả lời.</p>\n<p>Khác với mường tượng ban đầu rằng phương thức require cũng sẽ bắt đầu tìm file từ thư mục gốc (thư mục chứa file gọi method) thì thực tế reuire tìm kiếm file bằng một cách khác.</p>\n<p>Nó sẽ tìm đến biến global <code>$LOAD_PATH</code>, biến này là một đường dẫn, phương thức require sẽ tìm đến đường dẫn này và coi thư mục đó là gốc, nó sẽ tìm kiếm những file được requỉe bắt đầu từ thư mục đó. Trong lần đầu tiên nó tìm thấy thì ruby sẽ dừng chương trình ở đây và load file vừa tìm được lên. Nếu tìm hết các đường dẫn trong $LOAD_PATH và vẫn không thấy thì <code>LoadError</code> sẽ được gọi tới.</p>\n<p>Trở về với câu hỏi bên trên, đoạn code của chúng ta work khi biến <code>$LOAD_PATH</code> được định nghĩa, và nó là đường dẫn tới thư mục đang làm việc (chính là folder app).</p>\n<p>Trong tất cả các trường hợp còn lại, như khi biến này chưa được định nghĩa hay nó lại lại một đường dẫn đến một folder khác, thì đoạn mã khi đầu của chúng ta không thể chạy (vì require không tìm được file tương ứng theo yêu cầu).</p>\n<p>Thứ bạn nhận được khi này chỉ là một thông báo lỗi <code>cannot load such file -- animal.rb (LoadError)</code>.</p>\n<p><strong>Giải quyết vấn đề trên bằng cách nào?</strong></p>\n<p>Ta sẽ có thể dùng 2 cách:</p>\n<p>Cách 1: Điền thêm thư mục đang làm việc vào giá trị của biến <code>$LOAD_PATH</code>, khi này thì đoạn mã chúng ta sẽ sửa lại như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nối thêm đường dẫn thư mục hiện tại vào giá trị hiện tại của biến $LOAD_PATH</span></span><br><span class=\"line\">$LOAD_PATH &lt;&lt; File.join(File.dirname(__FILE_<span class=\"number\">_</span>)</span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'animal'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> &lt; Animal</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span></span></span><br><span class=\"line\">    @cat = Animal.new</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Cách 2: Sử dụng <code>require_relative</code> thay thế cho require, sửa lại đoạn mã như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require_relative <span class=\"string\">'animal'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> &lt; Animal</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span></span></span><br><span class=\"line\">    @cat = Animal.new</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Cả hai phương pháp trên đều hoạt động bình thường.</p>\n<blockquote>\n<p>$: là một cách viết tắt cho $LOAD_PATH</p>\n</blockquote>\n<h1 id=\"2-So-sanh-require-va-load\"><a href=\"#2-So-sanh-require-va-load\" class=\"headerlink\" title=\"2. So sánh require và load\"></a>2. So sánh require và load</h1><p>Như trong mục 1 đã nói vể require, thực chất load có cách hoạt động và mục đích sử dụng rất giống với require. Cả 2 đều được dùng đê “gọi” những đoạn mã cần thiết vào file hiện tại đang làm việc, như việc bạn muốn import thêm một file js vào file html đang làm việc nào đó.</p>\n<p>Tuy nhiên giữa chúng có một điểm khác nhau cơ bản, mà từ đó đã dẫn tới một lời khuyên về việc sử dụng chúng như sau:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Moreover, Kernel#require loads files once, but development is much more smooth</span><br><span class=\"line\">if code gets refreshed when it changes without restarting the server.</span><br><span class=\"line\">It would be nice to be able to use Kernel#load in development,</span><br><span class=\"line\">and Kernel#require in production.</span><br></pre></td></tr></table></figure>\n\n<p><code>- trích dẫn guides.rubyonrails -</code></p>\n<p>:arrow_right: Điều rút ra ở đây là:</p>\n<p>:one: require sẽ đọc và load file được gọi một lần duy nhất.</p>\n<p>:two: load sẽ đọc và load file được gọi mỗi khi file đó được chạy.</p>\n<p>Từ đó dẫn đến việc là load sẽ hữu dụng khi làm việc tại môi trường development hơn, nơi mà thay đổi diễn ra liên tục, còn require thích hợp khi triển khai lên production.</p>\n<p>Note: Sau khi bạn chạy tới method require, nó sẽ đọc file bạn require và lưu tại bộ nhớ, những lần tiếp theo khi bạn chạy tới file đó, nó sẽ đọc nội dung từ bộ nhớ (mà nó đã lưu lại tại lần load đầu tiên), điều này giúp tăng performance vì không phải lood lại file lần nữa, nhưng đồng nghĩa với đó là những thay đổi sau đó tại file require sẽ không được load khi chạy.</p>\n<h1 id=\"3-So-sanh-include-va-extend\"><a href=\"#3-So-sanh-include-va-extend\" class=\"headerlink\" title=\"3. So sánh include và extend\"></a>3. So sánh include và extend</h1><p>Không có nhiều liên hệ với hai mục đầu, 2 phương thức được đề cập trong mục 3 để giải quyết bài tóan mixin trong ruby, như đã có lần tôi trình bày khái quát <a href=\"https://hdchinh.com/post/2019-02-24-ruby-method-lookup/\" target=\"_blank\" rel=\"noopener\">tại đây</a>.</p>\n<p>Có vẻ vì cao hứng chém gió title quá, mà tôi quên mất đã viết về hai phương thức này một lần, và hiện tại vẫn chưa có gì để bổ sung thêm, nếu cần hãy đọc lại bài viết tham khảo bên trên nhé.</p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Tham khảo:</p>\n<p>[1] <a href=\"https://guides.rubyonrails.org/autoloading_and_reloading_constants.html\" target=\"_blank\" rel=\"noopener\">autoloading_and_reloading_constants</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Khác với rails, một framework đã có hỗ trợ autoloading, một chương trình ruby đơn thuần không có cơ chế đó. Để sử dụng những mã nguồn phụ thuộc ta phải “gọi” chúng tại file hiện tại bằng method <code>require</code> hoặc <code>load</code>. Ví dụ:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'animal'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> &lt; Animal</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span></span></span><br><span class=\"line\">    @cat = Animal.new</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Ở một vấn đề khác trong ruby, đó là ngôn ngữ này không hỗ trợ đa kế thừa, thay vào đó chúng có 1 cơ chế gọi là <code>mixin</code> để có thể sử dụng các phương thức trong nhiều <code>moudle</code> khác nhau. Ta sử dụng 2 method là <code>include</code> và <code>extend</code> để hiện thực hoá điều này.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-So-sanh-require-va-require-relative\"><a href=\"#1-So-sanh-require-va-require-relative\" class=\"headerlink\" title=\"1. So sánh require và require_relative\"></a>1. So sánh require và require_relative</h1><p>Trong tiêu đề bài viết không hề đề cập đến <code>require_relative</code> vậy sao giờ phải tìm hiểu về nó? Câu trả lời nằm ở cách mà phương thức <code>require</code> hoạt động.</p>\n<p>Trở lại ví dụ trong mục đặt vấn đề, giả sử cả 2 file <code>cat.rb</code> và <code>animal.rb</code> nằm trong cùng một thư mục:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- app</span><br><span class=\"line\">  - cat.rb</span><br><span class=\"line\">  - animal.rb</span><br></pre></td></tr></table></figure>\n\n<p>Câu hỏi đặt ra là liệu đoạn mã trong phần đặt vấn đề có work với cấu trúc file như này hay không? Có hoặc không, đó là câu trả lời.</p>\n<p>Khác với mường tượng ban đầu rằng phương thức require cũng sẽ bắt đầu tìm file từ thư mục gốc (thư mục chứa file gọi method) thì thực tế reuire tìm kiếm file bằng một cách khác.</p>\n<p>Nó sẽ tìm đến biến global <code>$LOAD_PATH</code>, biến này là một đường dẫn, phương thức require sẽ tìm đến đường dẫn này và coi thư mục đó là gốc, nó sẽ tìm kiếm những file được requỉe bắt đầu từ thư mục đó. Trong lần đầu tiên nó tìm thấy thì ruby sẽ dừng chương trình ở đây và load file vừa tìm được lên. Nếu tìm hết các đường dẫn trong $LOAD_PATH và vẫn không thấy thì <code>LoadError</code> sẽ được gọi tới.</p>\n<p>Trở về với câu hỏi bên trên, đoạn code của chúng ta work khi biến <code>$LOAD_PATH</code> được định nghĩa, và nó là đường dẫn tới thư mục đang làm việc (chính là folder app).</p>\n<p>Trong tất cả các trường hợp còn lại, như khi biến này chưa được định nghĩa hay nó lại lại một đường dẫn đến một folder khác, thì đoạn mã khi đầu của chúng ta không thể chạy (vì require không tìm được file tương ứng theo yêu cầu).</p>\n<p>Thứ bạn nhận được khi này chỉ là một thông báo lỗi <code>cannot load such file -- animal.rb (LoadError)</code>.</p>\n<p><strong>Giải quyết vấn đề trên bằng cách nào?</strong></p>\n<p>Ta sẽ có thể dùng 2 cách:</p>\n<p>Cách 1: Điền thêm thư mục đang làm việc vào giá trị của biến <code>$LOAD_PATH</code>, khi này thì đoạn mã chúng ta sẽ sửa lại như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nối thêm đường dẫn thư mục hiện tại vào giá trị hiện tại của biến $LOAD_PATH</span></span><br><span class=\"line\">$LOAD_PATH &lt;&lt; File.join(File.dirname(__FILE_<span class=\"number\">_</span>)</span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'animal'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> &lt; Animal</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span></span></span><br><span class=\"line\">    @cat = Animal.new</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Cách 2: Sử dụng <code>require_relative</code> thay thế cho require, sửa lại đoạn mã như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require_relative <span class=\"string\">'animal'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> &lt; Animal</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span></span></span><br><span class=\"line\">    @cat = Animal.new</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Cả hai phương pháp trên đều hoạt động bình thường.</p>\n<blockquote>\n<p>$: là một cách viết tắt cho $LOAD_PATH</p>\n</blockquote>\n<h1 id=\"2-So-sanh-require-va-load\"><a href=\"#2-So-sanh-require-va-load\" class=\"headerlink\" title=\"2. So sánh require và load\"></a>2. So sánh require và load</h1><p>Như trong mục 1 đã nói vể require, thực chất load có cách hoạt động và mục đích sử dụng rất giống với require. Cả 2 đều được dùng đê “gọi” những đoạn mã cần thiết vào file hiện tại đang làm việc, như việc bạn muốn import thêm một file js vào file html đang làm việc nào đó.</p>\n<p>Tuy nhiên giữa chúng có một điểm khác nhau cơ bản, mà từ đó đã dẫn tới một lời khuyên về việc sử dụng chúng như sau:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Moreover, Kernel#require loads files once, but development is much more smooth</span><br><span class=\"line\">if code gets refreshed when it changes without restarting the server.</span><br><span class=\"line\">It would be nice to be able to use Kernel#load in development,</span><br><span class=\"line\">and Kernel#require in production.</span><br></pre></td></tr></table></figure>\n\n<p><code>- trích dẫn guides.rubyonrails -</code></p>\n<p>:arrow_right: Điều rút ra ở đây là:</p>\n<p>:one: require sẽ đọc và load file được gọi một lần duy nhất.</p>\n<p>:two: load sẽ đọc và load file được gọi mỗi khi file đó được chạy.</p>\n<p>Từ đó dẫn đến việc là load sẽ hữu dụng khi làm việc tại môi trường development hơn, nơi mà thay đổi diễn ra liên tục, còn require thích hợp khi triển khai lên production.</p>\n<p>Note: Sau khi bạn chạy tới method require, nó sẽ đọc file bạn require và lưu tại bộ nhớ, những lần tiếp theo khi bạn chạy tới file đó, nó sẽ đọc nội dung từ bộ nhớ (mà nó đã lưu lại tại lần load đầu tiên), điều này giúp tăng performance vì không phải lood lại file lần nữa, nhưng đồng nghĩa với đó là những thay đổi sau đó tại file require sẽ không được load khi chạy.</p>\n<h1 id=\"3-So-sanh-include-va-extend\"><a href=\"#3-So-sanh-include-va-extend\" class=\"headerlink\" title=\"3. So sánh include và extend\"></a>3. So sánh include và extend</h1><p>Không có nhiều liên hệ với hai mục đầu, 2 phương thức được đề cập trong mục 3 để giải quyết bài tóan mixin trong ruby, như đã có lần tôi trình bày khái quát <a href=\"https://hdchinh.com/post/2019-02-24-ruby-method-lookup/\" target=\"_blank\" rel=\"noopener\">tại đây</a>.</p>\n<p>Có vẻ vì cao hứng chém gió title quá, mà tôi quên mất đã viết về hai phương thức này một lần, và hiện tại vẫn chưa có gì để bổ sung thêm, nếu cần hãy đọc lại bài viết tham khảo bên trên nhé.</p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Tham khảo:</p>\n<p>[1] <a href=\"https://guides.rubyonrails.org/autoloading_and_reloading_constants.html\" target=\"_blank\" rel=\"noopener\">autoloading_and_reloading_constants</a></p>\n"},{"title":"So Sánh Class Method Và Scope","date":"2019-06-08T17:00:00.000Z","draft":false,"_content":"# Đặt vấn đề\n\nTrong một thời gian rất lâu, từ khi mới học đến khi làm những ứng dụng đầu tiên. Tôi luôn cho rằng Scope và và Class Method hoàn toàn giống nhau. Và lý do Scope xuất hiện là để giúp mã nguồn ngắn gọn hơn.\n\nNhưng rõ ràng đấy là một suy nghĩ chưa đúng, dưới đây là điểm cần chú ý về 2 phương thức này.\n\n# Luận bàn\n\nTôi có 1 scope:\n\n```ruby\nclass Product < ActiveRecord::Base\n  scope :is_active, -> { where is_active: true }\nend\n\n# Lấy các products có thuộc tính is_active là true.\n```\n\nTôi có 1 class method:\n\n```ruby\nclass Product < ActiveRecord::Base\n  def self.is_active\n    where is_active: true\n  end\nend\n```\n\n2 method này là hoàn toàn tương đương nhau, kết quả trả về cũng vậy. Bây giờ thử 1 ví dụ khác.\n\n```ruby\nclass Product < ActiveRecord::Base\n  # lấy các products đang active\n  scope :is_active, -> { where is_active: true }\n  # lấy các products có type bằng type được truyền vào scope, và đảm bảo type được truyền vào có giá trị\n  scope :by_type, -> type { where type: type if type.present? }\nend\n\n```\n\nViết ví dụ trên dưới dạng Class Method:\n\n```ruby\nclass Product < ActiveRecord::Base\n  # lấy các products đang active\n  def self.is_active\n    where is_active: true\n  end\n  # lấy các products có type bằng type được truyền vào scope và đảm bảo type truyền vào có giá trị\n  def self.by_type(type)\n    where type: type if type.present?\n  end\nend\n```\n\nTiến hành gọi liên tiếp Scope:\n\n```ruby\nProduct.by_type(nil).is_active\n# truyền vào type không hợp lệ, nhưng scope is_active vẫn work bình thường\n```\n\nTiến hành gọi liên tiếp Class Method:\n\n```ruby\nProduct.by_type(nil).is_active\n\n# Trản về một error method is_active không được định nghĩa cho nil.\n```\n\nỦa vậy chuyện này là sao? Tại sao Scope vẫn work bình thường trong khi Class Method lại bắn về một exception?\n\nĐây chính là điểm khác biệt quan trọng của Scopy và Class Method.\n\nScope luôn luôn trả về một `ActiveRecord Relation`. Còn Class Method thì sao? Nếu bạn không cover trường hợp **nil/blank** thì nó sẽ văng về **nil/blank** như vậy không thể chạy Class Method phía sau, vì method đó không thể chạy **với nil/blank**. :smile:\n\n# Kết luận\n\nĐây là một kết luận sơ sài được tôi rút ra trong quá trình làm việc. Nếu có sai xót hãy để lại bình luận dưới đây.\n","source":"_posts/2019-06-09-luu-y-ngan-gon-ve-scope-va-class-method.md","raw":"---\ntitle: \"So Sánh Class Method Và Scope\"\ndate: 2019-06-09\ndraft: false\ntags: [\"RUBY\", \"RAILS\"]\ncategories: [\"RAILS\"]\n---\n# Đặt vấn đề\n\nTrong một thời gian rất lâu, từ khi mới học đến khi làm những ứng dụng đầu tiên. Tôi luôn cho rằng Scope và và Class Method hoàn toàn giống nhau. Và lý do Scope xuất hiện là để giúp mã nguồn ngắn gọn hơn.\n\nNhưng rõ ràng đấy là một suy nghĩ chưa đúng, dưới đây là điểm cần chú ý về 2 phương thức này.\n\n# Luận bàn\n\nTôi có 1 scope:\n\n```ruby\nclass Product < ActiveRecord::Base\n  scope :is_active, -> { where is_active: true }\nend\n\n# Lấy các products có thuộc tính is_active là true.\n```\n\nTôi có 1 class method:\n\n```ruby\nclass Product < ActiveRecord::Base\n  def self.is_active\n    where is_active: true\n  end\nend\n```\n\n2 method này là hoàn toàn tương đương nhau, kết quả trả về cũng vậy. Bây giờ thử 1 ví dụ khác.\n\n```ruby\nclass Product < ActiveRecord::Base\n  # lấy các products đang active\n  scope :is_active, -> { where is_active: true }\n  # lấy các products có type bằng type được truyền vào scope, và đảm bảo type được truyền vào có giá trị\n  scope :by_type, -> type { where type: type if type.present? }\nend\n\n```\n\nViết ví dụ trên dưới dạng Class Method:\n\n```ruby\nclass Product < ActiveRecord::Base\n  # lấy các products đang active\n  def self.is_active\n    where is_active: true\n  end\n  # lấy các products có type bằng type được truyền vào scope và đảm bảo type truyền vào có giá trị\n  def self.by_type(type)\n    where type: type if type.present?\n  end\nend\n```\n\nTiến hành gọi liên tiếp Scope:\n\n```ruby\nProduct.by_type(nil).is_active\n# truyền vào type không hợp lệ, nhưng scope is_active vẫn work bình thường\n```\n\nTiến hành gọi liên tiếp Class Method:\n\n```ruby\nProduct.by_type(nil).is_active\n\n# Trản về một error method is_active không được định nghĩa cho nil.\n```\n\nỦa vậy chuyện này là sao? Tại sao Scope vẫn work bình thường trong khi Class Method lại bắn về một exception?\n\nĐây chính là điểm khác biệt quan trọng của Scopy và Class Method.\n\nScope luôn luôn trả về một `ActiveRecord Relation`. Còn Class Method thì sao? Nếu bạn không cover trường hợp **nil/blank** thì nó sẽ văng về **nil/blank** như vậy không thể chạy Class Method phía sau, vì method đó không thể chạy **với nil/blank**. :smile:\n\n# Kết luận\n\nĐây là một kết luận sơ sài được tôi rút ra trong quá trình làm việc. Nếu có sai xót hãy để lại bình luận dưới đây.\n","slug":"2019-06-09-luu-y-ngan-gon-ve-scope-va-class-method","published":1,"updated":"2019-12-06T15:38:42.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7sug2001m5rrsfq5z230f","content":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Trong một thời gian rất lâu, từ khi mới học đến khi làm những ứng dụng đầu tiên. Tôi luôn cho rằng Scope và và Class Method hoàn toàn giống nhau. Và lý do Scope xuất hiện là để giúp mã nguồn ngắn gọn hơn.</p>\n<p>Nhưng rõ ràng đấy là một suy nghĩ chưa đúng, dưới đây là điểm cần chú ý về 2 phương thức này.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><p>Tôi có 1 scope:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> &lt; ActiveRecord::Base</span></span><br><span class=\"line\">  scope <span class=\"symbol\">:is_active</span>, -&gt; &#123; where <span class=\"symbol\">is_active:</span> <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Lấy các products có thuộc tính is_active là true.</span></span><br></pre></td></tr></table></figure>\n\n<p>Tôi có 1 class method:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> &lt; ActiveRecord::Base</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">is_active</span></span></span><br><span class=\"line\">    where <span class=\"symbol\">is_active:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>2 method này là hoàn toàn tương đương nhau, kết quả trả về cũng vậy. Bây giờ thử 1 ví dụ khác.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> &lt; ActiveRecord::Base</span></span><br><span class=\"line\">  <span class=\"comment\"># lấy các products đang active</span></span><br><span class=\"line\">  scope <span class=\"symbol\">:is_active</span>, -&gt; &#123; where <span class=\"symbol\">is_active:</span> <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">  <span class=\"comment\"># lấy các products có type bằng type được truyền vào scope, và đảm bảo type được truyền vào có giá trị</span></span><br><span class=\"line\">  scope <span class=\"symbol\">:by_type</span>, -&gt; type &#123; where <span class=\"symbol\">type:</span> type <span class=\"keyword\">if</span> type.present? &#125;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Viết ví dụ trên dưới dạng Class Method:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> &lt; ActiveRecord::Base</span></span><br><span class=\"line\">  <span class=\"comment\"># lấy các products đang active</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">is_active</span></span></span><br><span class=\"line\">    where <span class=\"symbol\">is_active:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"comment\"># lấy các products có type bằng type được truyền vào scope và đảm bảo type truyền vào có giá trị</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">by_type</span><span class=\"params\">(type)</span></span></span><br><span class=\"line\">    where <span class=\"symbol\">type:</span> type <span class=\"keyword\">if</span> type.present?</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Tiến hành gọi liên tiếp Scope:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Product.by_type(<span class=\"literal\">nil</span>).is_active</span><br><span class=\"line\"><span class=\"comment\"># truyền vào type không hợp lệ, nhưng scope is_active vẫn work bình thường</span></span><br></pre></td></tr></table></figure>\n\n<p>Tiến hành gọi liên tiếp Class Method:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Product.by_type(<span class=\"literal\">nil</span>).is_active</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Trản về một error method is_active không được định nghĩa cho nil.</span></span><br></pre></td></tr></table></figure>\n\n<p>Ủa vậy chuyện này là sao? Tại sao Scope vẫn work bình thường trong khi Class Method lại bắn về một exception?</p>\n<p>Đây chính là điểm khác biệt quan trọng của Scopy và Class Method.</p>\n<p>Scope luôn luôn trả về một <code>ActiveRecord Relation</code>. Còn Class Method thì sao? Nếu bạn không cover trường hợp <strong>nil/blank</strong> thì nó sẽ văng về <strong>nil/blank</strong> như vậy không thể chạy Class Method phía sau, vì method đó không thể chạy <strong>với nil/blank</strong>. :smile:</p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Đây là một kết luận sơ sài được tôi rút ra trong quá trình làm việc. Nếu có sai xót hãy để lại bình luận dưới đây.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Trong một thời gian rất lâu, từ khi mới học đến khi làm những ứng dụng đầu tiên. Tôi luôn cho rằng Scope và và Class Method hoàn toàn giống nhau. Và lý do Scope xuất hiện là để giúp mã nguồn ngắn gọn hơn.</p>\n<p>Nhưng rõ ràng đấy là một suy nghĩ chưa đúng, dưới đây là điểm cần chú ý về 2 phương thức này.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><p>Tôi có 1 scope:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> &lt; ActiveRecord::Base</span></span><br><span class=\"line\">  scope <span class=\"symbol\">:is_active</span>, -&gt; &#123; where <span class=\"symbol\">is_active:</span> <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Lấy các products có thuộc tính is_active là true.</span></span><br></pre></td></tr></table></figure>\n\n<p>Tôi có 1 class method:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> &lt; ActiveRecord::Base</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">is_active</span></span></span><br><span class=\"line\">    where <span class=\"symbol\">is_active:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>2 method này là hoàn toàn tương đương nhau, kết quả trả về cũng vậy. Bây giờ thử 1 ví dụ khác.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> &lt; ActiveRecord::Base</span></span><br><span class=\"line\">  <span class=\"comment\"># lấy các products đang active</span></span><br><span class=\"line\">  scope <span class=\"symbol\">:is_active</span>, -&gt; &#123; where <span class=\"symbol\">is_active:</span> <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">  <span class=\"comment\"># lấy các products có type bằng type được truyền vào scope, và đảm bảo type được truyền vào có giá trị</span></span><br><span class=\"line\">  scope <span class=\"symbol\">:by_type</span>, -&gt; type &#123; where <span class=\"symbol\">type:</span> type <span class=\"keyword\">if</span> type.present? &#125;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Viết ví dụ trên dưới dạng Class Method:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> &lt; ActiveRecord::Base</span></span><br><span class=\"line\">  <span class=\"comment\"># lấy các products đang active</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">is_active</span></span></span><br><span class=\"line\">    where <span class=\"symbol\">is_active:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"comment\"># lấy các products có type bằng type được truyền vào scope và đảm bảo type truyền vào có giá trị</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">by_type</span><span class=\"params\">(type)</span></span></span><br><span class=\"line\">    where <span class=\"symbol\">type:</span> type <span class=\"keyword\">if</span> type.present?</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Tiến hành gọi liên tiếp Scope:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Product.by_type(<span class=\"literal\">nil</span>).is_active</span><br><span class=\"line\"><span class=\"comment\"># truyền vào type không hợp lệ, nhưng scope is_active vẫn work bình thường</span></span><br></pre></td></tr></table></figure>\n\n<p>Tiến hành gọi liên tiếp Class Method:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Product.by_type(<span class=\"literal\">nil</span>).is_active</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Trản về một error method is_active không được định nghĩa cho nil.</span></span><br></pre></td></tr></table></figure>\n\n<p>Ủa vậy chuyện này là sao? Tại sao Scope vẫn work bình thường trong khi Class Method lại bắn về một exception?</p>\n<p>Đây chính là điểm khác biệt quan trọng của Scopy và Class Method.</p>\n<p>Scope luôn luôn trả về một <code>ActiveRecord Relation</code>. Còn Class Method thì sao? Nếu bạn không cover trường hợp <strong>nil/blank</strong> thì nó sẽ văng về <strong>nil/blank</strong> như vậy không thể chạy Class Method phía sau, vì method đó không thể chạy <strong>với nil/blank</strong>. :smile:</p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Đây là một kết luận sơ sài được tôi rút ra trong quá trình làm việc. Nếu có sai xót hãy để lại bình luận dưới đây.</p>\n"},{"title":"Cơ Chế Autoloading Và Reloading","date":"2019-04-16T17:00:00.000Z","draft":false,"mytag":"#TIL","_content":"\n# Đặt vấn đề\n\n```ruby\nclass CatsController < ApplicationController\n  # do something\nend\n```\n\nĐoạn mã trên là một đoạn mã rất quen thuộc khi sử dụng rails framework, một câu hỏi đó là tại sao trong class CatsController không require file chưa class ApplicationController nhưng ta vẫn có thể sử dụng. Câu trả lời nằm ở việc rails có cơ chế autoloading một số folder nhất định để support cho việc coding và vận hành, bài viết này sẽ nêu một cách khái quát về giải pháp này trong rails.\n\n# Luận bàn\n\nNhư bài viết trước đã đề cập về cách mà phương thức require hoạt động:\n\n1. Tìm file được require theo các đường dẫn được lưu trong biến $LOAD_PATH (biến này là 1 mảng các đường dẫn).\n\n2. Khi tìm được file tương ứng thì dừng quá trình tìm file và bắt đầu load file tìm được vào bộ nhớ.\n\n3. Nếu tìm hết các đường dẫn và không thấy thì gọi tới LoadError.\n\n**autoload_paths** là một tập hợp các thư mục được tự động load mà không cần require. Mặc định thì autoload_paths sẽ chứa các thư mục sau:\n\n1. Tất cả các thư mục con cấp 1 của thư mục app, ví dụ như app/controllers, app/views...\n\n2. Tất cả các thư mục cấp 2 tên là concerns trong app, ví dụ như app/helpers/concerns, app/lib/concerns...\n\n3. Thư mục test/mailers/previews.\n\nTa có thể xem danh sách này bằng câu lệnh:\n\n`bin/rails r 'puts ActiveSupport::Dependencies.autoload_paths'`\n\n**eager_load_paths** hoàn toàn giống như khái niệm về autoload_paths đã nêu ở trên. Điểm chúng ta cần lưu ý đó là:\n\n1. Những thư mục nằm trong eager_load_paths sẽ được load một lần duy nhất TRƯỚC khi ứng dụng của bạn khởi chạy.\n\n2. Những thư mục nằm trong autoload_paths sẽ được sử dụng để tìm kiếm khi chương trình ĐANG CHẠY và gặp 1 từ khoá chưa được định nghĩa trong file hiện tại.\n\nTa có 2 từ in hoa, đó là phần quan trọng, để đảm bảo tính nhất quán và hoạt động một cách ổn định và chính xác, trong môi trường production ta sử dụng eager_load_paths để load toàn bộ những file cần thiết cho các hệ thống cần thì sử dụng, còn ở môi trường phát triển, để khởi chạy ứng dụng nhanh chóng hơn và dễ dàng cập nhật các thay đổi thì ta sử dụng autoload_paths.\n\nViệc thiết lập này phụ thuộc vào cấu hình của bạn trong thư mục `app/config/envirements/...` với 2 cấu hình là:\n\n- config.cache_classes\n\n- config.eager_load\n\n# Kết luận\n\nTham khảo:\n\n[1] [autoloading_and_reloading_constants](https://guides.rubyonrails.org/autoloading_and_reloading_constants.html)\n","source":"_posts/2019-05-16-autoloading-va-reloading-constants-trong-rails.md","raw":"---\ntitle: \"Cơ Chế Autoloading Và Reloading\"\ndate: 2019-04-17\ndraft: false\ntags: [\"rails\"]\ncategories: [\"rails notes\"]\nmytag: \"#TIL\"\n---\n\n# Đặt vấn đề\n\n```ruby\nclass CatsController < ApplicationController\n  # do something\nend\n```\n\nĐoạn mã trên là một đoạn mã rất quen thuộc khi sử dụng rails framework, một câu hỏi đó là tại sao trong class CatsController không require file chưa class ApplicationController nhưng ta vẫn có thể sử dụng. Câu trả lời nằm ở việc rails có cơ chế autoloading một số folder nhất định để support cho việc coding và vận hành, bài viết này sẽ nêu một cách khái quát về giải pháp này trong rails.\n\n# Luận bàn\n\nNhư bài viết trước đã đề cập về cách mà phương thức require hoạt động:\n\n1. Tìm file được require theo các đường dẫn được lưu trong biến $LOAD_PATH (biến này là 1 mảng các đường dẫn).\n\n2. Khi tìm được file tương ứng thì dừng quá trình tìm file và bắt đầu load file tìm được vào bộ nhớ.\n\n3. Nếu tìm hết các đường dẫn và không thấy thì gọi tới LoadError.\n\n**autoload_paths** là một tập hợp các thư mục được tự động load mà không cần require. Mặc định thì autoload_paths sẽ chứa các thư mục sau:\n\n1. Tất cả các thư mục con cấp 1 của thư mục app, ví dụ như app/controllers, app/views...\n\n2. Tất cả các thư mục cấp 2 tên là concerns trong app, ví dụ như app/helpers/concerns, app/lib/concerns...\n\n3. Thư mục test/mailers/previews.\n\nTa có thể xem danh sách này bằng câu lệnh:\n\n`bin/rails r 'puts ActiveSupport::Dependencies.autoload_paths'`\n\n**eager_load_paths** hoàn toàn giống như khái niệm về autoload_paths đã nêu ở trên. Điểm chúng ta cần lưu ý đó là:\n\n1. Những thư mục nằm trong eager_load_paths sẽ được load một lần duy nhất TRƯỚC khi ứng dụng của bạn khởi chạy.\n\n2. Những thư mục nằm trong autoload_paths sẽ được sử dụng để tìm kiếm khi chương trình ĐANG CHẠY và gặp 1 từ khoá chưa được định nghĩa trong file hiện tại.\n\nTa có 2 từ in hoa, đó là phần quan trọng, để đảm bảo tính nhất quán và hoạt động một cách ổn định và chính xác, trong môi trường production ta sử dụng eager_load_paths để load toàn bộ những file cần thiết cho các hệ thống cần thì sử dụng, còn ở môi trường phát triển, để khởi chạy ứng dụng nhanh chóng hơn và dễ dàng cập nhật các thay đổi thì ta sử dụng autoload_paths.\n\nViệc thiết lập này phụ thuộc vào cấu hình của bạn trong thư mục `app/config/envirements/...` với 2 cấu hình là:\n\n- config.cache_classes\n\n- config.eager_load\n\n# Kết luận\n\nTham khảo:\n\n[1] [autoloading_and_reloading_constants](https://guides.rubyonrails.org/autoloading_and_reloading_constants.html)\n","slug":"2019-05-16-autoloading-va-reloading-constants-trong-rails","published":1,"updated":"2019-11-13T04:06:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7sug5001r5rrs9k6a2guy","content":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CatsController</span> &lt; ApplicationController</span></span><br><span class=\"line\">  <span class=\"comment\"># do something</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Đoạn mã trên là một đoạn mã rất quen thuộc khi sử dụng rails framework, một câu hỏi đó là tại sao trong class CatsController không require file chưa class ApplicationController nhưng ta vẫn có thể sử dụng. Câu trả lời nằm ở việc rails có cơ chế autoloading một số folder nhất định để support cho việc coding và vận hành, bài viết này sẽ nêu một cách khái quát về giải pháp này trong rails.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><p>Như bài viết trước đã đề cập về cách mà phương thức require hoạt động:</p>\n<ol>\n<li><p>Tìm file được require theo các đường dẫn được lưu trong biến $LOAD_PATH (biến này là 1 mảng các đường dẫn).</p>\n</li>\n<li><p>Khi tìm được file tương ứng thì dừng quá trình tìm file và bắt đầu load file tìm được vào bộ nhớ.</p>\n</li>\n<li><p>Nếu tìm hết các đường dẫn và không thấy thì gọi tới LoadError.</p>\n</li>\n</ol>\n<p><strong>autoload_paths</strong> là một tập hợp các thư mục được tự động load mà không cần require. Mặc định thì autoload_paths sẽ chứa các thư mục sau:</p>\n<ol>\n<li><p>Tất cả các thư mục con cấp 1 của thư mục app, ví dụ như app/controllers, app/views…</p>\n</li>\n<li><p>Tất cả các thư mục cấp 2 tên là concerns trong app, ví dụ như app/helpers/concerns, app/lib/concerns…</p>\n</li>\n<li><p>Thư mục test/mailers/previews.</p>\n</li>\n</ol>\n<p>Ta có thể xem danh sách này bằng câu lệnh:</p>\n<p><code>bin/rails r &#39;puts ActiveSupport::Dependencies.autoload_paths&#39;</code></p>\n<p><strong>eager_load_paths</strong> hoàn toàn giống như khái niệm về autoload_paths đã nêu ở trên. Điểm chúng ta cần lưu ý đó là:</p>\n<ol>\n<li><p>Những thư mục nằm trong eager_load_paths sẽ được load một lần duy nhất TRƯỚC khi ứng dụng của bạn khởi chạy.</p>\n</li>\n<li><p>Những thư mục nằm trong autoload_paths sẽ được sử dụng để tìm kiếm khi chương trình ĐANG CHẠY và gặp 1 từ khoá chưa được định nghĩa trong file hiện tại.</p>\n</li>\n</ol>\n<p>Ta có 2 từ in hoa, đó là phần quan trọng, để đảm bảo tính nhất quán và hoạt động một cách ổn định và chính xác, trong môi trường production ta sử dụng eager_load_paths để load toàn bộ những file cần thiết cho các hệ thống cần thì sử dụng, còn ở môi trường phát triển, để khởi chạy ứng dụng nhanh chóng hơn và dễ dàng cập nhật các thay đổi thì ta sử dụng autoload_paths.</p>\n<p>Việc thiết lập này phụ thuộc vào cấu hình của bạn trong thư mục <code>app/config/envirements/...</code> với 2 cấu hình là:</p>\n<ul>\n<li><p>config.cache_classes</p>\n</li>\n<li><p>config.eager_load</p>\n</li>\n</ul>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Tham khảo:</p>\n<p>[1] <a href=\"https://guides.rubyonrails.org/autoloading_and_reloading_constants.html\" target=\"_blank\" rel=\"noopener\">autoloading_and_reloading_constants</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CatsController</span> &lt; ApplicationController</span></span><br><span class=\"line\">  <span class=\"comment\"># do something</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Đoạn mã trên là một đoạn mã rất quen thuộc khi sử dụng rails framework, một câu hỏi đó là tại sao trong class CatsController không require file chưa class ApplicationController nhưng ta vẫn có thể sử dụng. Câu trả lời nằm ở việc rails có cơ chế autoloading một số folder nhất định để support cho việc coding và vận hành, bài viết này sẽ nêu một cách khái quát về giải pháp này trong rails.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><p>Như bài viết trước đã đề cập về cách mà phương thức require hoạt động:</p>\n<ol>\n<li><p>Tìm file được require theo các đường dẫn được lưu trong biến $LOAD_PATH (biến này là 1 mảng các đường dẫn).</p>\n</li>\n<li><p>Khi tìm được file tương ứng thì dừng quá trình tìm file và bắt đầu load file tìm được vào bộ nhớ.</p>\n</li>\n<li><p>Nếu tìm hết các đường dẫn và không thấy thì gọi tới LoadError.</p>\n</li>\n</ol>\n<p><strong>autoload_paths</strong> là một tập hợp các thư mục được tự động load mà không cần require. Mặc định thì autoload_paths sẽ chứa các thư mục sau:</p>\n<ol>\n<li><p>Tất cả các thư mục con cấp 1 của thư mục app, ví dụ như app/controllers, app/views…</p>\n</li>\n<li><p>Tất cả các thư mục cấp 2 tên là concerns trong app, ví dụ như app/helpers/concerns, app/lib/concerns…</p>\n</li>\n<li><p>Thư mục test/mailers/previews.</p>\n</li>\n</ol>\n<p>Ta có thể xem danh sách này bằng câu lệnh:</p>\n<p><code>bin/rails r &#39;puts ActiveSupport::Dependencies.autoload_paths&#39;</code></p>\n<p><strong>eager_load_paths</strong> hoàn toàn giống như khái niệm về autoload_paths đã nêu ở trên. Điểm chúng ta cần lưu ý đó là:</p>\n<ol>\n<li><p>Những thư mục nằm trong eager_load_paths sẽ được load một lần duy nhất TRƯỚC khi ứng dụng của bạn khởi chạy.</p>\n</li>\n<li><p>Những thư mục nằm trong autoload_paths sẽ được sử dụng để tìm kiếm khi chương trình ĐANG CHẠY và gặp 1 từ khoá chưa được định nghĩa trong file hiện tại.</p>\n</li>\n</ol>\n<p>Ta có 2 từ in hoa, đó là phần quan trọng, để đảm bảo tính nhất quán và hoạt động một cách ổn định và chính xác, trong môi trường production ta sử dụng eager_load_paths để load toàn bộ những file cần thiết cho các hệ thống cần thì sử dụng, còn ở môi trường phát triển, để khởi chạy ứng dụng nhanh chóng hơn và dễ dàng cập nhật các thay đổi thì ta sử dụng autoload_paths.</p>\n<p>Việc thiết lập này phụ thuộc vào cấu hình của bạn trong thư mục <code>app/config/envirements/...</code> với 2 cấu hình là:</p>\n<ul>\n<li><p>config.cache_classes</p>\n</li>\n<li><p>config.eager_load</p>\n</li>\n</ul>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Tham khảo:</p>\n<p>[1] <a href=\"https://guides.rubyonrails.org/autoloading_and_reloading_constants.html\" target=\"_blank\" rel=\"noopener\">autoloading_and_reloading_constants</a></p>\n"},{"title":"Symbol Và String Trong Ruby","date":"2019-06-08T17:00:00.000Z","draft":false,"_content":"\n# Đặt vấn đề\n\nSymbol là khái niệm rất quen tai và quen tay với lập trình viên ruby, ắt hẳn ai cũng đã từng nghe không ít thì nhiều, bản thân symbol cũng xuất hiện rất thường xuyên trong rails framework.\n\nKhi tôi là thực tập sinh, tôi nhận được nhiều lời khuyên về việc nên sử dụng symbol nhưng chưa từng được nghe 1 lý giải đủ rõ ràng về việc vì sao nên sử dụng nó, mà có lẽ tôi cũng không thích nó, sự xuất hiện của symbol làm cú pháp trong rails không thống nhất khi có thể viết nhiều kiểu để biểu hiện cùng một ý nghĩa. Tôi không thích việc không đồng bộ đó chút nào.\n\nCó một lý giải đơn giản và dễ nhớ để phân biệt giữa 2 đối tượng này đó là: Symbol mà giá trị giống nhau thì có cùng object_id, còn String thì dù giá trị giống nhau, mỗi chuỗi vẫn sẽ có một object_id khác nhau.\nLiệu lý giải này đã đủ? Hãy cùng tìm hiểu.\n\n# Luận bàn\n\n# 1. Khai báo và tư tưởng\n\nĐể khai báo một symbol bạn thêm dấu `:` đằng trước.\n\n```ruby\n:meo\n\n:\"meo\"\n```\n\nĐơn giản như trên, ta đã khai báo bằng 2 cách khác nhau. Nhưng thực tế ruby hiểu là chúng cùng là 1 symbol.\n\nĐiểm cần phải nói rõ trước khi đi xuống các phần sau đó là:\n\n1. Symbol thực chất cũng là một String.\n\n2. Symbol là một [immutable](https://hdchinh.com/programing/2019/04/08/immutable-va-mutable-trong-ruby.html).\n\n# 2. Mutable và Immutable\n\nTôi đã từng trình bày một bài viết về chủ đề này. Các bạn có thể tham khảo tại [đây](https://hdchinh.com/programing/2019/04/08/immutable-va-mutable-trong-ruby.html).\n\nNhưng nói một cách vắn tắt thì biến X là một immutable khi mà vùng nhớ lưu giá trị của X không thể được thay đổi giá trị.\n\nNhư trình bày ở mục 1, symbol là immutable (khác với string thì là mutable).\n\nChúng ta có thể kết luận rằng, symbol thực chất là một string có tính chất bất biến giá trị (immutable).\n\nCâu hỏi đặt ra là: Tại sao tôi lại cần những biến không thể thay đổi giá trị?\n\n1. Trong quá trình lập trình, chúng ta cần một số biến không thể bị thay đổi giá trị trong quá trình sử dụng, để đảm bảo tính đúng đắn của chương trình. (Tôi không có ví dụ cụ thể nào).\n\n2. Vì là mutable, nên mỗi khi một string được gọi, bất kể là các chuỗi có giống nhau hay không, ruby luôn tạo ra một vùng nhớ mới cho chúng.\n\n```ruby\n\"Chinh\".object_id\n#  => 70159285001700\n\"Chinh\".object_id\n# => 70159284996100\n\"Chinh\".object_id\n# => 70159289079920\n```\n\nBa chuỗi cùng một nội dung, nhưng khi được gọi thì lại có 3 object_id khác nhau, chứng tỏ rằng dù cùng giá trị nhưng ruby coi chúng là 3 đối tượng khác nhau và lưu trữ mỗi vùng nhớ riêng cho từng chuỗi.\n\n**Vấn đề phát sinh từ đây khi mà  vùng nhớ bị lãng phí.**\n\nHãy cùng thử với symbol.\n\n```ruby\n:\"Chinh\".object_id\n# => 1271588\n:\"Chinh\".object_id\n# => 1271588\n:\"Chinh\".object_id\n# => 1271588\n```\n\nThật tuyệt, vậy là bằng một cách nào đó, khi sử dụng symbol, ruby biết được symbol này đã tồn tại hay chưa, nếu tồn tại rồi thì khi được gọi chúng sẽ dùng lại đối tượng đã có chứ không tạo thêm vùng nhớ mới.\n\n# 3. Symbol và String được lưu trữ như nào.\n\nMột tiêu đề có vẻ buồn cười, vì cái đối tượng trong ruby tất nhiên được lưu ở bộ nhớ trong với phân vùng gọi là heap.\n\nHiển nhiên String không ngoại lệ.\n\nNếu String được lưu trữ một cách bình thường và không thể kiểm soát xem nó lưu những gì (vì nó là mutable). Nên khi tạo ra một đối tượng String mới, Ruby sẽ tìm một vùng nhớ trống và lưu nó tại đó và không quan tâm xem là có bao nhiêu String đang hoạt động trong chương trình có nội dung giống nhau.\n\nVậy Symbol thì sao? Như đã trình bày ở mục trên thì bằng cách nào đó mà ruby có thể biết được symbol đã tồn tại hay chưa, nếu tồn tại thì xài lại còn chưa thì mới tạo ra vùng nhớ mới. Vậy chúng làm vậy bằng cách nào?\n\nThực ra không hề có phép màu nào ở đây cả, muốn truy vết symbol như nói ở trên thì chúng buộc phải được lưu trữ và quản lý dưới 1 dạng cơ sở dữ liệu nào đó.\n\nSự thật là Symbol được lưu trữ thành một table (thôi cứ tạm gọi là vậy), trong suốt quá trình vận hành một chương trình. Cứ tưởng tượng như việc bạn có 1 bảng trong excel, và khi có một dữ liệu mới được yêu cầu, bạn sẽ tra trong bảng excel này trước coi có chưa, nếu có rồi thì lấy ra xài lại. Còn nếu không có? thì sẽ làm 2 việc:\n\n1. Tạo dữ liệu đó.\n2. Lưu lại trong bảng để lần sau tra cứu.\n\nĐể lấy giá trị trong table lưu symbol nói trên ta có thể dụng lệnh:\n\n```ruby\nputs Symbol.all_symbols\n# hoặc lấy tổng số symbol đã được lưu trữ trong chương trình.\nputs Symbol.all_symbols.size\n```\n\n# 4. Về tốc độ thực thi\n\nQua những gì để phân tích. Ta rút ra một kết luận là Symbol thì tiết kiệm vùng nhớ một cách đáng kể so với String (xem lại cơ chế lưu vào table bên trên).\n\nNhưng vậy ngoài ra thì chúng còn gì khác biệt nữa không? Về performance thì sao?\n\nCâu trả lời là Symbol vẫn nổi trội hơn String ở tốc độ thực thi:\n\n- Trong trường hợp tạo một đối tượng mới: Symbol có thể sử dụng lại, còn String thì luôn luôn tạo mới. Ủa vậy thì tạo mới String phải nhanh hơn chứ ta. Vì nó không cần quét lại bảng table symbols mà luôn luôn tạo đối tượng mới, trong khi đó thì Symbol phải quét lại trước rồi nếu không có mới tạo đối tượng.\n\nNhưng mọi thứ không đơn giản như vậy, Trong ruby có một module gọi tắt là GC có chức năng thu gòm \"rác\", rác ở đây là các string được khai báo nhưng không còn sử dụng, GC sẽ thu hồi vùng nhớ của chúng để lấy không gian cho các đối tượng khác. Đây là một công việc vất vả.\n\nFlow đơn giản của nó sẽ là:  GC quét các đối tượng => Đánh dấu các đối tượng không được sử dụng => Khi chương trình trong thời gian rảnh rỗi thì GC sẽ thu gồm vùng nhớ của các đối tượng bị đánh dấu. Sẽ tốt không ít thời gian cho công đoạn này.\n\nVì vậy về mặt performance khi tạo đối tượng mới, Symbol vẫn giành chiến thắng.\n\n- Trong trường hợp so sánh 2 đối tượng: Chiến thắng một lần nữa thuộc về Symbol.\n\nLý do thì lần này khá đơn giản: Khi cần so sánh 2 symbol, ruby sẽ vào symbols table và so sánh là xong. Trong khi người anh em String thì không thể và để so sánh 2 chuỗi, ruby sẽ phải so sánh từng ký tự trong chuỗi này với từng ký tự trong chuỗi kia. Đây lại là một công việc vất vả.\n\nVà thế là ta đã hiểu performance, Symbol win ez.\n\nĐể thử nghiệm bạn có thể sử dụng thư viện benchmark để kiểm nghiệm kết luận.\n\n# 5. Điểm yếu của Symbol\n\nNếu Symbol toàn năng, toàn thiện thì đã không có lý do gì nó không thay thế luôn String. Bản chất của điểm yếu của Symbol cũng chính là điểm mạnh của nó.\n\nĐó chính là tính chất immutable.\n\nVì không phải khi nào cũng cần một đối tượng immutable, tôi có một input là tên người dùng nhập vào. Tôi muốn chắc chắn là sẽ lưu tên người dùng dưới dạng chữ hoa trong csdl. Vì vậy tôi chạy method `upcase!`.\n\nTuy nhiên, Symbol là immutable mà phương thức `upcase!` lại có mục tiêu thay đổi giá trị của đối tượng và thế là chương trình bắn ra một error về việc bạn đang cố thay đổi giá trị của symbol.\n\nTrong trường hợp này rõ ràng sử dụng String là điều hiển nhiên.\n\n# Kết luận\n\nNếu có nhận xét hoặc phản hồi hãy để lại phản hồi bên dưới nhé.\n","source":"_posts/2019-06-09-so-sanh-symbol-va-string-trong-ruby.md","raw":"---\ntitle: \"Symbol Và String Trong Ruby\"\ndate: 2019-06-09\ndraft: false\ntags: [\"RUBY\"]\ncategories: [\"RUBY\"]\n---\n\n# Đặt vấn đề\n\nSymbol là khái niệm rất quen tai và quen tay với lập trình viên ruby, ắt hẳn ai cũng đã từng nghe không ít thì nhiều, bản thân symbol cũng xuất hiện rất thường xuyên trong rails framework.\n\nKhi tôi là thực tập sinh, tôi nhận được nhiều lời khuyên về việc nên sử dụng symbol nhưng chưa từng được nghe 1 lý giải đủ rõ ràng về việc vì sao nên sử dụng nó, mà có lẽ tôi cũng không thích nó, sự xuất hiện của symbol làm cú pháp trong rails không thống nhất khi có thể viết nhiều kiểu để biểu hiện cùng một ý nghĩa. Tôi không thích việc không đồng bộ đó chút nào.\n\nCó một lý giải đơn giản và dễ nhớ để phân biệt giữa 2 đối tượng này đó là: Symbol mà giá trị giống nhau thì có cùng object_id, còn String thì dù giá trị giống nhau, mỗi chuỗi vẫn sẽ có một object_id khác nhau.\nLiệu lý giải này đã đủ? Hãy cùng tìm hiểu.\n\n# Luận bàn\n\n# 1. Khai báo và tư tưởng\n\nĐể khai báo một symbol bạn thêm dấu `:` đằng trước.\n\n```ruby\n:meo\n\n:\"meo\"\n```\n\nĐơn giản như trên, ta đã khai báo bằng 2 cách khác nhau. Nhưng thực tế ruby hiểu là chúng cùng là 1 symbol.\n\nĐiểm cần phải nói rõ trước khi đi xuống các phần sau đó là:\n\n1. Symbol thực chất cũng là một String.\n\n2. Symbol là một [immutable](https://hdchinh.com/programing/2019/04/08/immutable-va-mutable-trong-ruby.html).\n\n# 2. Mutable và Immutable\n\nTôi đã từng trình bày một bài viết về chủ đề này. Các bạn có thể tham khảo tại [đây](https://hdchinh.com/programing/2019/04/08/immutable-va-mutable-trong-ruby.html).\n\nNhưng nói một cách vắn tắt thì biến X là một immutable khi mà vùng nhớ lưu giá trị của X không thể được thay đổi giá trị.\n\nNhư trình bày ở mục 1, symbol là immutable (khác với string thì là mutable).\n\nChúng ta có thể kết luận rằng, symbol thực chất là một string có tính chất bất biến giá trị (immutable).\n\nCâu hỏi đặt ra là: Tại sao tôi lại cần những biến không thể thay đổi giá trị?\n\n1. Trong quá trình lập trình, chúng ta cần một số biến không thể bị thay đổi giá trị trong quá trình sử dụng, để đảm bảo tính đúng đắn của chương trình. (Tôi không có ví dụ cụ thể nào).\n\n2. Vì là mutable, nên mỗi khi một string được gọi, bất kể là các chuỗi có giống nhau hay không, ruby luôn tạo ra một vùng nhớ mới cho chúng.\n\n```ruby\n\"Chinh\".object_id\n#  => 70159285001700\n\"Chinh\".object_id\n# => 70159284996100\n\"Chinh\".object_id\n# => 70159289079920\n```\n\nBa chuỗi cùng một nội dung, nhưng khi được gọi thì lại có 3 object_id khác nhau, chứng tỏ rằng dù cùng giá trị nhưng ruby coi chúng là 3 đối tượng khác nhau và lưu trữ mỗi vùng nhớ riêng cho từng chuỗi.\n\n**Vấn đề phát sinh từ đây khi mà  vùng nhớ bị lãng phí.**\n\nHãy cùng thử với symbol.\n\n```ruby\n:\"Chinh\".object_id\n# => 1271588\n:\"Chinh\".object_id\n# => 1271588\n:\"Chinh\".object_id\n# => 1271588\n```\n\nThật tuyệt, vậy là bằng một cách nào đó, khi sử dụng symbol, ruby biết được symbol này đã tồn tại hay chưa, nếu tồn tại rồi thì khi được gọi chúng sẽ dùng lại đối tượng đã có chứ không tạo thêm vùng nhớ mới.\n\n# 3. Symbol và String được lưu trữ như nào.\n\nMột tiêu đề có vẻ buồn cười, vì cái đối tượng trong ruby tất nhiên được lưu ở bộ nhớ trong với phân vùng gọi là heap.\n\nHiển nhiên String không ngoại lệ.\n\nNếu String được lưu trữ một cách bình thường và không thể kiểm soát xem nó lưu những gì (vì nó là mutable). Nên khi tạo ra một đối tượng String mới, Ruby sẽ tìm một vùng nhớ trống và lưu nó tại đó và không quan tâm xem là có bao nhiêu String đang hoạt động trong chương trình có nội dung giống nhau.\n\nVậy Symbol thì sao? Như đã trình bày ở mục trên thì bằng cách nào đó mà ruby có thể biết được symbol đã tồn tại hay chưa, nếu tồn tại thì xài lại còn chưa thì mới tạo ra vùng nhớ mới. Vậy chúng làm vậy bằng cách nào?\n\nThực ra không hề có phép màu nào ở đây cả, muốn truy vết symbol như nói ở trên thì chúng buộc phải được lưu trữ và quản lý dưới 1 dạng cơ sở dữ liệu nào đó.\n\nSự thật là Symbol được lưu trữ thành một table (thôi cứ tạm gọi là vậy), trong suốt quá trình vận hành một chương trình. Cứ tưởng tượng như việc bạn có 1 bảng trong excel, và khi có một dữ liệu mới được yêu cầu, bạn sẽ tra trong bảng excel này trước coi có chưa, nếu có rồi thì lấy ra xài lại. Còn nếu không có? thì sẽ làm 2 việc:\n\n1. Tạo dữ liệu đó.\n2. Lưu lại trong bảng để lần sau tra cứu.\n\nĐể lấy giá trị trong table lưu symbol nói trên ta có thể dụng lệnh:\n\n```ruby\nputs Symbol.all_symbols\n# hoặc lấy tổng số symbol đã được lưu trữ trong chương trình.\nputs Symbol.all_symbols.size\n```\n\n# 4. Về tốc độ thực thi\n\nQua những gì để phân tích. Ta rút ra một kết luận là Symbol thì tiết kiệm vùng nhớ một cách đáng kể so với String (xem lại cơ chế lưu vào table bên trên).\n\nNhưng vậy ngoài ra thì chúng còn gì khác biệt nữa không? Về performance thì sao?\n\nCâu trả lời là Symbol vẫn nổi trội hơn String ở tốc độ thực thi:\n\n- Trong trường hợp tạo một đối tượng mới: Symbol có thể sử dụng lại, còn String thì luôn luôn tạo mới. Ủa vậy thì tạo mới String phải nhanh hơn chứ ta. Vì nó không cần quét lại bảng table symbols mà luôn luôn tạo đối tượng mới, trong khi đó thì Symbol phải quét lại trước rồi nếu không có mới tạo đối tượng.\n\nNhưng mọi thứ không đơn giản như vậy, Trong ruby có một module gọi tắt là GC có chức năng thu gòm \"rác\", rác ở đây là các string được khai báo nhưng không còn sử dụng, GC sẽ thu hồi vùng nhớ của chúng để lấy không gian cho các đối tượng khác. Đây là một công việc vất vả.\n\nFlow đơn giản của nó sẽ là:  GC quét các đối tượng => Đánh dấu các đối tượng không được sử dụng => Khi chương trình trong thời gian rảnh rỗi thì GC sẽ thu gồm vùng nhớ của các đối tượng bị đánh dấu. Sẽ tốt không ít thời gian cho công đoạn này.\n\nVì vậy về mặt performance khi tạo đối tượng mới, Symbol vẫn giành chiến thắng.\n\n- Trong trường hợp so sánh 2 đối tượng: Chiến thắng một lần nữa thuộc về Symbol.\n\nLý do thì lần này khá đơn giản: Khi cần so sánh 2 symbol, ruby sẽ vào symbols table và so sánh là xong. Trong khi người anh em String thì không thể và để so sánh 2 chuỗi, ruby sẽ phải so sánh từng ký tự trong chuỗi này với từng ký tự trong chuỗi kia. Đây lại là một công việc vất vả.\n\nVà thế là ta đã hiểu performance, Symbol win ez.\n\nĐể thử nghiệm bạn có thể sử dụng thư viện benchmark để kiểm nghiệm kết luận.\n\n# 5. Điểm yếu của Symbol\n\nNếu Symbol toàn năng, toàn thiện thì đã không có lý do gì nó không thay thế luôn String. Bản chất của điểm yếu của Symbol cũng chính là điểm mạnh của nó.\n\nĐó chính là tính chất immutable.\n\nVì không phải khi nào cũng cần một đối tượng immutable, tôi có một input là tên người dùng nhập vào. Tôi muốn chắc chắn là sẽ lưu tên người dùng dưới dạng chữ hoa trong csdl. Vì vậy tôi chạy method `upcase!`.\n\nTuy nhiên, Symbol là immutable mà phương thức `upcase!` lại có mục tiêu thay đổi giá trị của đối tượng và thế là chương trình bắn ra một error về việc bạn đang cố thay đổi giá trị của symbol.\n\nTrong trường hợp này rõ ràng sử dụng String là điều hiển nhiên.\n\n# Kết luận\n\nNếu có nhận xét hoặc phản hồi hãy để lại phản hồi bên dưới nhé.\n","slug":"2019-06-09-so-sanh-symbol-va-string-trong-ruby","published":1,"updated":"2019-12-06T15:39:14.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7sug7001u5rrs4l5q6q4u","content":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Symbol là khái niệm rất quen tai và quen tay với lập trình viên ruby, ắt hẳn ai cũng đã từng nghe không ít thì nhiều, bản thân symbol cũng xuất hiện rất thường xuyên trong rails framework.</p>\n<p>Khi tôi là thực tập sinh, tôi nhận được nhiều lời khuyên về việc nên sử dụng symbol nhưng chưa từng được nghe 1 lý giải đủ rõ ràng về việc vì sao nên sử dụng nó, mà có lẽ tôi cũng không thích nó, sự xuất hiện của symbol làm cú pháp trong rails không thống nhất khi có thể viết nhiều kiểu để biểu hiện cùng một ý nghĩa. Tôi không thích việc không đồng bộ đó chút nào.</p>\n<p>Có một lý giải đơn giản và dễ nhớ để phân biệt giữa 2 đối tượng này đó là: Symbol mà giá trị giống nhau thì có cùng object_id, còn String thì dù giá trị giống nhau, mỗi chuỗi vẫn sẽ có một object_id khác nhau.<br>Liệu lý giải này đã đủ? Hãy cùng tìm hiểu.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-Khai-bao-va-tu-tuong\"><a href=\"#1-Khai-bao-va-tu-tuong\" class=\"headerlink\" title=\"1. Khai báo và tư tưởng\"></a>1. Khai báo và tư tưởng</h1><p>Để khai báo một symbol bạn thêm dấu <code>:</code> đằng trước.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">:meo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">:<span class=\"string\">\"meo\"</span></span></span><br></pre></td></tr></table></figure>\n\n<p>Đơn giản như trên, ta đã khai báo bằng 2 cách khác nhau. Nhưng thực tế ruby hiểu là chúng cùng là 1 symbol.</p>\n<p>Điểm cần phải nói rõ trước khi đi xuống các phần sau đó là:</p>\n<ol>\n<li><p>Symbol thực chất cũng là một String.</p>\n</li>\n<li><p>Symbol là một <a href=\"https://hdchinh.com/programing/2019/04/08/immutable-va-mutable-trong-ruby.html\" target=\"_blank\" rel=\"noopener\">immutable</a>.</p>\n</li>\n</ol>\n<h1 id=\"2-Mutable-va-Immutable\"><a href=\"#2-Mutable-va-Immutable\" class=\"headerlink\" title=\"2. Mutable và Immutable\"></a>2. Mutable và Immutable</h1><p>Tôi đã từng trình bày một bài viết về chủ đề này. Các bạn có thể tham khảo tại <a href=\"https://hdchinh.com/programing/2019/04/08/immutable-va-mutable-trong-ruby.html\" target=\"_blank\" rel=\"noopener\">đây</a>.</p>\n<p>Nhưng nói một cách vắn tắt thì biến X là một immutable khi mà vùng nhớ lưu giá trị của X không thể được thay đổi giá trị.</p>\n<p>Như trình bày ở mục 1, symbol là immutable (khác với string thì là mutable).</p>\n<p>Chúng ta có thể kết luận rằng, symbol thực chất là một string có tính chất bất biến giá trị (immutable).</p>\n<p>Câu hỏi đặt ra là: Tại sao tôi lại cần những biến không thể thay đổi giá trị?</p>\n<ol>\n<li><p>Trong quá trình lập trình, chúng ta cần một số biến không thể bị thay đổi giá trị trong quá trình sử dụng, để đảm bảo tính đúng đắn của chương trình. (Tôi không có ví dụ cụ thể nào).</p>\n</li>\n<li><p>Vì là mutable, nên mỗi khi một string được gọi, bất kể là các chuỗi có giống nhau hay không, ruby luôn tạo ra một vùng nhớ mới cho chúng.</p>\n</li>\n</ol>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"Chinh\"</span>.object_id</span><br><span class=\"line\"><span class=\"comment\">#  =&gt; 70159285001700</span></span><br><span class=\"line\"><span class=\"string\">\"Chinh\"</span>.object_id</span><br><span class=\"line\"><span class=\"comment\"># =&gt; 70159284996100</span></span><br><span class=\"line\"><span class=\"string\">\"Chinh\"</span>.object_id</span><br><span class=\"line\"><span class=\"comment\"># =&gt; 70159289079920</span></span><br></pre></td></tr></table></figure>\n\n<p>Ba chuỗi cùng một nội dung, nhưng khi được gọi thì lại có 3 object_id khác nhau, chứng tỏ rằng dù cùng giá trị nhưng ruby coi chúng là 3 đối tượng khác nhau và lưu trữ mỗi vùng nhớ riêng cho từng chuỗi.</p>\n<p><strong>Vấn đề phát sinh từ đây khi mà  vùng nhớ bị lãng phí.</strong></p>\n<p>Hãy cùng thử với symbol.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">:<span class=\"string\">\"Chinh\"</span></span>.object_id</span><br><span class=\"line\"><span class=\"comment\"># =&gt; 1271588</span></span><br><span class=\"line\"><span class=\"symbol\">:<span class=\"string\">\"Chinh\"</span></span>.object_id</span><br><span class=\"line\"><span class=\"comment\"># =&gt; 1271588</span></span><br><span class=\"line\"><span class=\"symbol\">:<span class=\"string\">\"Chinh\"</span></span>.object_id</span><br><span class=\"line\"><span class=\"comment\"># =&gt; 1271588</span></span><br></pre></td></tr></table></figure>\n\n<p>Thật tuyệt, vậy là bằng một cách nào đó, khi sử dụng symbol, ruby biết được symbol này đã tồn tại hay chưa, nếu tồn tại rồi thì khi được gọi chúng sẽ dùng lại đối tượng đã có chứ không tạo thêm vùng nhớ mới.</p>\n<h1 id=\"3-Symbol-va-String-duoc-luu-tru-nhu-nao\"><a href=\"#3-Symbol-va-String-duoc-luu-tru-nhu-nao\" class=\"headerlink\" title=\"3. Symbol và String được lưu trữ như nào.\"></a>3. Symbol và String được lưu trữ như nào.</h1><p>Một tiêu đề có vẻ buồn cười, vì cái đối tượng trong ruby tất nhiên được lưu ở bộ nhớ trong với phân vùng gọi là heap.</p>\n<p>Hiển nhiên String không ngoại lệ.</p>\n<p>Nếu String được lưu trữ một cách bình thường và không thể kiểm soát xem nó lưu những gì (vì nó là mutable). Nên khi tạo ra một đối tượng String mới, Ruby sẽ tìm một vùng nhớ trống và lưu nó tại đó và không quan tâm xem là có bao nhiêu String đang hoạt động trong chương trình có nội dung giống nhau.</p>\n<p>Vậy Symbol thì sao? Như đã trình bày ở mục trên thì bằng cách nào đó mà ruby có thể biết được symbol đã tồn tại hay chưa, nếu tồn tại thì xài lại còn chưa thì mới tạo ra vùng nhớ mới. Vậy chúng làm vậy bằng cách nào?</p>\n<p>Thực ra không hề có phép màu nào ở đây cả, muốn truy vết symbol như nói ở trên thì chúng buộc phải được lưu trữ và quản lý dưới 1 dạng cơ sở dữ liệu nào đó.</p>\n<p>Sự thật là Symbol được lưu trữ thành một table (thôi cứ tạm gọi là vậy), trong suốt quá trình vận hành một chương trình. Cứ tưởng tượng như việc bạn có 1 bảng trong excel, và khi có một dữ liệu mới được yêu cầu, bạn sẽ tra trong bảng excel này trước coi có chưa, nếu có rồi thì lấy ra xài lại. Còn nếu không có? thì sẽ làm 2 việc:</p>\n<ol>\n<li>Tạo dữ liệu đó.</li>\n<li>Lưu lại trong bảng để lần sau tra cứu.</li>\n</ol>\n<p>Để lấy giá trị trong table lưu symbol nói trên ta có thể dụng lệnh:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">puts Symbol.all_symbols</span><br><span class=\"line\"><span class=\"comment\"># hoặc lấy tổng số symbol đã được lưu trữ trong chương trình.</span></span><br><span class=\"line\">puts Symbol.all_symbols.size</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-Ve-toc-do-thuc-thi\"><a href=\"#4-Ve-toc-do-thuc-thi\" class=\"headerlink\" title=\"4. Về tốc độ thực thi\"></a>4. Về tốc độ thực thi</h1><p>Qua những gì để phân tích. Ta rút ra một kết luận là Symbol thì tiết kiệm vùng nhớ một cách đáng kể so với String (xem lại cơ chế lưu vào table bên trên).</p>\n<p>Nhưng vậy ngoài ra thì chúng còn gì khác biệt nữa không? Về performance thì sao?</p>\n<p>Câu trả lời là Symbol vẫn nổi trội hơn String ở tốc độ thực thi:</p>\n<ul>\n<li>Trong trường hợp tạo một đối tượng mới: Symbol có thể sử dụng lại, còn String thì luôn luôn tạo mới. Ủa vậy thì tạo mới String phải nhanh hơn chứ ta. Vì nó không cần quét lại bảng table symbols mà luôn luôn tạo đối tượng mới, trong khi đó thì Symbol phải quét lại trước rồi nếu không có mới tạo đối tượng.</li>\n</ul>\n<p>Nhưng mọi thứ không đơn giản như vậy, Trong ruby có một module gọi tắt là GC có chức năng thu gòm “rác”, rác ở đây là các string được khai báo nhưng không còn sử dụng, GC sẽ thu hồi vùng nhớ của chúng để lấy không gian cho các đối tượng khác. Đây là một công việc vất vả.</p>\n<p>Flow đơn giản của nó sẽ là:  GC quét các đối tượng =&gt; Đánh dấu các đối tượng không được sử dụng =&gt; Khi chương trình trong thời gian rảnh rỗi thì GC sẽ thu gồm vùng nhớ của các đối tượng bị đánh dấu. Sẽ tốt không ít thời gian cho công đoạn này.</p>\n<p>Vì vậy về mặt performance khi tạo đối tượng mới, Symbol vẫn giành chiến thắng.</p>\n<ul>\n<li>Trong trường hợp so sánh 2 đối tượng: Chiến thắng một lần nữa thuộc về Symbol.</li>\n</ul>\n<p>Lý do thì lần này khá đơn giản: Khi cần so sánh 2 symbol, ruby sẽ vào symbols table và so sánh là xong. Trong khi người anh em String thì không thể và để so sánh 2 chuỗi, ruby sẽ phải so sánh từng ký tự trong chuỗi này với từng ký tự trong chuỗi kia. Đây lại là một công việc vất vả.</p>\n<p>Và thế là ta đã hiểu performance, Symbol win ez.</p>\n<p>Để thử nghiệm bạn có thể sử dụng thư viện benchmark để kiểm nghiệm kết luận.</p>\n<h1 id=\"5-Diem-yeu-cua-Symbol\"><a href=\"#5-Diem-yeu-cua-Symbol\" class=\"headerlink\" title=\"5. Điểm yếu của Symbol\"></a>5. Điểm yếu của Symbol</h1><p>Nếu Symbol toàn năng, toàn thiện thì đã không có lý do gì nó không thay thế luôn String. Bản chất của điểm yếu của Symbol cũng chính là điểm mạnh của nó.</p>\n<p>Đó chính là tính chất immutable.</p>\n<p>Vì không phải khi nào cũng cần một đối tượng immutable, tôi có một input là tên người dùng nhập vào. Tôi muốn chắc chắn là sẽ lưu tên người dùng dưới dạng chữ hoa trong csdl. Vì vậy tôi chạy method <code>upcase!</code>.</p>\n<p>Tuy nhiên, Symbol là immutable mà phương thức <code>upcase!</code> lại có mục tiêu thay đổi giá trị của đối tượng và thế là chương trình bắn ra một error về việc bạn đang cố thay đổi giá trị của symbol.</p>\n<p>Trong trường hợp này rõ ràng sử dụng String là điều hiển nhiên.</p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Nếu có nhận xét hoặc phản hồi hãy để lại phản hồi bên dưới nhé.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Symbol là khái niệm rất quen tai và quen tay với lập trình viên ruby, ắt hẳn ai cũng đã từng nghe không ít thì nhiều, bản thân symbol cũng xuất hiện rất thường xuyên trong rails framework.</p>\n<p>Khi tôi là thực tập sinh, tôi nhận được nhiều lời khuyên về việc nên sử dụng symbol nhưng chưa từng được nghe 1 lý giải đủ rõ ràng về việc vì sao nên sử dụng nó, mà có lẽ tôi cũng không thích nó, sự xuất hiện của symbol làm cú pháp trong rails không thống nhất khi có thể viết nhiều kiểu để biểu hiện cùng một ý nghĩa. Tôi không thích việc không đồng bộ đó chút nào.</p>\n<p>Có một lý giải đơn giản và dễ nhớ để phân biệt giữa 2 đối tượng này đó là: Symbol mà giá trị giống nhau thì có cùng object_id, còn String thì dù giá trị giống nhau, mỗi chuỗi vẫn sẽ có một object_id khác nhau.<br>Liệu lý giải này đã đủ? Hãy cùng tìm hiểu.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-Khai-bao-va-tu-tuong\"><a href=\"#1-Khai-bao-va-tu-tuong\" class=\"headerlink\" title=\"1. Khai báo và tư tưởng\"></a>1. Khai báo và tư tưởng</h1><p>Để khai báo một symbol bạn thêm dấu <code>:</code> đằng trước.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">:meo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">:<span class=\"string\">\"meo\"</span></span></span><br></pre></td></tr></table></figure>\n\n<p>Đơn giản như trên, ta đã khai báo bằng 2 cách khác nhau. Nhưng thực tế ruby hiểu là chúng cùng là 1 symbol.</p>\n<p>Điểm cần phải nói rõ trước khi đi xuống các phần sau đó là:</p>\n<ol>\n<li><p>Symbol thực chất cũng là một String.</p>\n</li>\n<li><p>Symbol là một <a href=\"https://hdchinh.com/programing/2019/04/08/immutable-va-mutable-trong-ruby.html\" target=\"_blank\" rel=\"noopener\">immutable</a>.</p>\n</li>\n</ol>\n<h1 id=\"2-Mutable-va-Immutable\"><a href=\"#2-Mutable-va-Immutable\" class=\"headerlink\" title=\"2. Mutable và Immutable\"></a>2. Mutable và Immutable</h1><p>Tôi đã từng trình bày một bài viết về chủ đề này. Các bạn có thể tham khảo tại <a href=\"https://hdchinh.com/programing/2019/04/08/immutable-va-mutable-trong-ruby.html\" target=\"_blank\" rel=\"noopener\">đây</a>.</p>\n<p>Nhưng nói một cách vắn tắt thì biến X là một immutable khi mà vùng nhớ lưu giá trị của X không thể được thay đổi giá trị.</p>\n<p>Như trình bày ở mục 1, symbol là immutable (khác với string thì là mutable).</p>\n<p>Chúng ta có thể kết luận rằng, symbol thực chất là một string có tính chất bất biến giá trị (immutable).</p>\n<p>Câu hỏi đặt ra là: Tại sao tôi lại cần những biến không thể thay đổi giá trị?</p>\n<ol>\n<li><p>Trong quá trình lập trình, chúng ta cần một số biến không thể bị thay đổi giá trị trong quá trình sử dụng, để đảm bảo tính đúng đắn của chương trình. (Tôi không có ví dụ cụ thể nào).</p>\n</li>\n<li><p>Vì là mutable, nên mỗi khi một string được gọi, bất kể là các chuỗi có giống nhau hay không, ruby luôn tạo ra một vùng nhớ mới cho chúng.</p>\n</li>\n</ol>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"Chinh\"</span>.object_id</span><br><span class=\"line\"><span class=\"comment\">#  =&gt; 70159285001700</span></span><br><span class=\"line\"><span class=\"string\">\"Chinh\"</span>.object_id</span><br><span class=\"line\"><span class=\"comment\"># =&gt; 70159284996100</span></span><br><span class=\"line\"><span class=\"string\">\"Chinh\"</span>.object_id</span><br><span class=\"line\"><span class=\"comment\"># =&gt; 70159289079920</span></span><br></pre></td></tr></table></figure>\n\n<p>Ba chuỗi cùng một nội dung, nhưng khi được gọi thì lại có 3 object_id khác nhau, chứng tỏ rằng dù cùng giá trị nhưng ruby coi chúng là 3 đối tượng khác nhau và lưu trữ mỗi vùng nhớ riêng cho từng chuỗi.</p>\n<p><strong>Vấn đề phát sinh từ đây khi mà  vùng nhớ bị lãng phí.</strong></p>\n<p>Hãy cùng thử với symbol.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">:<span class=\"string\">\"Chinh\"</span></span>.object_id</span><br><span class=\"line\"><span class=\"comment\"># =&gt; 1271588</span></span><br><span class=\"line\"><span class=\"symbol\">:<span class=\"string\">\"Chinh\"</span></span>.object_id</span><br><span class=\"line\"><span class=\"comment\"># =&gt; 1271588</span></span><br><span class=\"line\"><span class=\"symbol\">:<span class=\"string\">\"Chinh\"</span></span>.object_id</span><br><span class=\"line\"><span class=\"comment\"># =&gt; 1271588</span></span><br></pre></td></tr></table></figure>\n\n<p>Thật tuyệt, vậy là bằng một cách nào đó, khi sử dụng symbol, ruby biết được symbol này đã tồn tại hay chưa, nếu tồn tại rồi thì khi được gọi chúng sẽ dùng lại đối tượng đã có chứ không tạo thêm vùng nhớ mới.</p>\n<h1 id=\"3-Symbol-va-String-duoc-luu-tru-nhu-nao\"><a href=\"#3-Symbol-va-String-duoc-luu-tru-nhu-nao\" class=\"headerlink\" title=\"3. Symbol và String được lưu trữ như nào.\"></a>3. Symbol và String được lưu trữ như nào.</h1><p>Một tiêu đề có vẻ buồn cười, vì cái đối tượng trong ruby tất nhiên được lưu ở bộ nhớ trong với phân vùng gọi là heap.</p>\n<p>Hiển nhiên String không ngoại lệ.</p>\n<p>Nếu String được lưu trữ một cách bình thường và không thể kiểm soát xem nó lưu những gì (vì nó là mutable). Nên khi tạo ra một đối tượng String mới, Ruby sẽ tìm một vùng nhớ trống và lưu nó tại đó và không quan tâm xem là có bao nhiêu String đang hoạt động trong chương trình có nội dung giống nhau.</p>\n<p>Vậy Symbol thì sao? Như đã trình bày ở mục trên thì bằng cách nào đó mà ruby có thể biết được symbol đã tồn tại hay chưa, nếu tồn tại thì xài lại còn chưa thì mới tạo ra vùng nhớ mới. Vậy chúng làm vậy bằng cách nào?</p>\n<p>Thực ra không hề có phép màu nào ở đây cả, muốn truy vết symbol như nói ở trên thì chúng buộc phải được lưu trữ và quản lý dưới 1 dạng cơ sở dữ liệu nào đó.</p>\n<p>Sự thật là Symbol được lưu trữ thành một table (thôi cứ tạm gọi là vậy), trong suốt quá trình vận hành một chương trình. Cứ tưởng tượng như việc bạn có 1 bảng trong excel, và khi có một dữ liệu mới được yêu cầu, bạn sẽ tra trong bảng excel này trước coi có chưa, nếu có rồi thì lấy ra xài lại. Còn nếu không có? thì sẽ làm 2 việc:</p>\n<ol>\n<li>Tạo dữ liệu đó.</li>\n<li>Lưu lại trong bảng để lần sau tra cứu.</li>\n</ol>\n<p>Để lấy giá trị trong table lưu symbol nói trên ta có thể dụng lệnh:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">puts Symbol.all_symbols</span><br><span class=\"line\"><span class=\"comment\"># hoặc lấy tổng số symbol đã được lưu trữ trong chương trình.</span></span><br><span class=\"line\">puts Symbol.all_symbols.size</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-Ve-toc-do-thuc-thi\"><a href=\"#4-Ve-toc-do-thuc-thi\" class=\"headerlink\" title=\"4. Về tốc độ thực thi\"></a>4. Về tốc độ thực thi</h1><p>Qua những gì để phân tích. Ta rút ra một kết luận là Symbol thì tiết kiệm vùng nhớ một cách đáng kể so với String (xem lại cơ chế lưu vào table bên trên).</p>\n<p>Nhưng vậy ngoài ra thì chúng còn gì khác biệt nữa không? Về performance thì sao?</p>\n<p>Câu trả lời là Symbol vẫn nổi trội hơn String ở tốc độ thực thi:</p>\n<ul>\n<li>Trong trường hợp tạo một đối tượng mới: Symbol có thể sử dụng lại, còn String thì luôn luôn tạo mới. Ủa vậy thì tạo mới String phải nhanh hơn chứ ta. Vì nó không cần quét lại bảng table symbols mà luôn luôn tạo đối tượng mới, trong khi đó thì Symbol phải quét lại trước rồi nếu không có mới tạo đối tượng.</li>\n</ul>\n<p>Nhưng mọi thứ không đơn giản như vậy, Trong ruby có một module gọi tắt là GC có chức năng thu gòm “rác”, rác ở đây là các string được khai báo nhưng không còn sử dụng, GC sẽ thu hồi vùng nhớ của chúng để lấy không gian cho các đối tượng khác. Đây là một công việc vất vả.</p>\n<p>Flow đơn giản của nó sẽ là:  GC quét các đối tượng =&gt; Đánh dấu các đối tượng không được sử dụng =&gt; Khi chương trình trong thời gian rảnh rỗi thì GC sẽ thu gồm vùng nhớ của các đối tượng bị đánh dấu. Sẽ tốt không ít thời gian cho công đoạn này.</p>\n<p>Vì vậy về mặt performance khi tạo đối tượng mới, Symbol vẫn giành chiến thắng.</p>\n<ul>\n<li>Trong trường hợp so sánh 2 đối tượng: Chiến thắng một lần nữa thuộc về Symbol.</li>\n</ul>\n<p>Lý do thì lần này khá đơn giản: Khi cần so sánh 2 symbol, ruby sẽ vào symbols table và so sánh là xong. Trong khi người anh em String thì không thể và để so sánh 2 chuỗi, ruby sẽ phải so sánh từng ký tự trong chuỗi này với từng ký tự trong chuỗi kia. Đây lại là một công việc vất vả.</p>\n<p>Và thế là ta đã hiểu performance, Symbol win ez.</p>\n<p>Để thử nghiệm bạn có thể sử dụng thư viện benchmark để kiểm nghiệm kết luận.</p>\n<h1 id=\"5-Diem-yeu-cua-Symbol\"><a href=\"#5-Diem-yeu-cua-Symbol\" class=\"headerlink\" title=\"5. Điểm yếu của Symbol\"></a>5. Điểm yếu của Symbol</h1><p>Nếu Symbol toàn năng, toàn thiện thì đã không có lý do gì nó không thay thế luôn String. Bản chất của điểm yếu của Symbol cũng chính là điểm mạnh của nó.</p>\n<p>Đó chính là tính chất immutable.</p>\n<p>Vì không phải khi nào cũng cần một đối tượng immutable, tôi có một input là tên người dùng nhập vào. Tôi muốn chắc chắn là sẽ lưu tên người dùng dưới dạng chữ hoa trong csdl. Vì vậy tôi chạy method <code>upcase!</code>.</p>\n<p>Tuy nhiên, Symbol là immutable mà phương thức <code>upcase!</code> lại có mục tiêu thay đổi giá trị của đối tượng và thế là chương trình bắn ra một error về việc bạn đang cố thay đổi giá trị của symbol.</p>\n<p>Trong trường hợp này rõ ràng sử dụng String là điều hiển nhiên.</p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Nếu có nhận xét hoặc phản hồi hãy để lại phản hồi bên dưới nhé.</p>\n"},{"title":"Tấn Công SQL Injection","date":"2019-06-07T17:00:00.000Z","draft":false,"_content":"\n# Đặt vấn đề\n\nTrong project của bạn, đã bao giờ bạn sử dụng câu lệnh có dạng như:\n\n```ruby\n  Product.where(\"product_name = 'Meo con di lon ton' \")\n```\n\nNếu có, thì bạn đã vô tình tạo một lỗ hổng về an toàn cho website của mình. Hãy cùng tìm hiểu vì sao lại như vậy.\n\n# Luận bàn\n\n# 1. Tìm hiểu về Sql Injection\n\nQuay lại ví dụ bên trên, nội dung câu lệnh này nhắm lấy ra sản phẩm có tên là `Meo con di lon ton`. Vậy có gì sai nhỉ?\n\nĐể nói rõ hơn, thì câu lệnh này là một câu lệnh được support bởi 1 thư viện ORM mặc định trong rails tên là ActiveRecord. Nó sẽ được phiên dịch thành mã sql như sau:\n\n```sql\n  SELECT  \"products\".* FROM \"products\" WHERE (product_name = 'Meo con di lon ton')\n```\n\nĐây vẫn là một câu lệnh quen thuộc, và nhìn qua thì không thấy gì sai trái cả.\n\nFlow hoạt động của website của tôi bình yên như vậy mà ta.\n\n1. Người dùng submit lên server product_name.\n\n2. Code xử lý ở server sẽ lấy product_name người dùng truyền lên và thực hiện truy vấn như trên.\n\n3. Trả về kết quả cho người dùng.\n\nVậy có gì mà không ổn?\n\nVới những người dùng thông thường thì. Đúng, mã nguồn của chúng ta hoàn toàn ổn. Nhưng nếu bạn là một ông chủ giàu có của một website nổi tiếng, và có nhiều kẻ ghét bạn vì bạn giàu hoặc nhìn mặt bạn thấy ghét và muốn tìm cách phá hoại website bạn thì sao?\n\n**Vậy là thay vì gửi một product_name thông thường như \"iphone x\", \"ghế tình yêu\"...Thì họ lại gửi một product_name có dạng như  `chinh' or '' = '`**\n\nLúc này truy vấn của chúng ta sẽ trở thành:\n\n```ruby\n  Product.where(\"product_name = 'chinh' OR ''=''\")\n```\n\nChuyển sang dạng Sql:\n\n```sql\n  SELECT  \"products\".* FROM \"products\" WHERE (product_name = 'chinh' or '' = '')\n```\n\nVì điều kiện trong where luôn trả về true bất kể product_name có bằng 'xxx' hay không (vì '' thì luôn luôn bằng '' :smile:). Nên câu truy vấn này sẽ trả về toàn bộ bảng products.\n\nVà như vậy dữ liệu website của bạn đã bị lộ trước những kẻ không lấy gì làm tốt đẹp.\n\nTrên đây chỉ là một ví dụ sơ sài, trong thực tế dữ liệu của bạn sẽ quan trọng hơn nhiều là cái products information như trên. Có thể là thông tin liên lạc, địa chỉ nhà, thông tin tài khoản ngân hàng...\n\n# 2. Cách phòng tránh Sql Injection trong rails.\n\nCó thể thấy khi để query dạng string như trên thì rất dễ bị khai thác, vì ActiveRecord sẽ không thể validate giá trị input mà người dùng nhập vào có hợp lệ hay không. Vậy cách tốt nhất để chống lại Sql injection chính là sử dụng query theo params thay vì sử dụng chuỗi như trên.\n\nThay vì viết:\n\n```ruby\n  Product.where(\"product_name  = 'Meo con di lon ton'\")\n```\n\nTa có thể viết dưới dạng params query như sau:\n\n```ruby\n  Product.where(product_name: 'Meo con di lon ton')\n  # hoặc\n  Product.where('product_name = ?', ['Meo con di lon ton'])\n  # hoặc\n  Product.where('product_name = :product_name', {:product_name => 'Meo con di lon ton'})\n```\n\nVới các cách thay thế, giá trị người dùng truyền vào sẽ được đảm bảo hợp lệ trước khi có dữ liệu trả về...\n\n\n# Kết luận.\n\nĐây là một bài sơ sài, ngắn gọn và khái quát cho người mới tìm hiểu về sql injection. Không phải bài viết chuyên sâu dành cho người có nhiều kinh nghiệm. Hãy để lại thảo luận nếu bạn có thắc mắc.\n","source":"_posts/2019-06-08-tan-cong-sql-injection-va-cach-phong-chong-trong-rails.md","raw":"---\ntitle: \"Tấn Công SQL Injection\"\ndate: 2019-06-08\ndraft: false\ntags: [\"SECURE\", \"RAILS\"]\ncategories: [\"RAILS\"]\n\n---\n\n# Đặt vấn đề\n\nTrong project của bạn, đã bao giờ bạn sử dụng câu lệnh có dạng như:\n\n```ruby\n  Product.where(\"product_name = 'Meo con di lon ton' \")\n```\n\nNếu có, thì bạn đã vô tình tạo một lỗ hổng về an toàn cho website của mình. Hãy cùng tìm hiểu vì sao lại như vậy.\n\n# Luận bàn\n\n# 1. Tìm hiểu về Sql Injection\n\nQuay lại ví dụ bên trên, nội dung câu lệnh này nhắm lấy ra sản phẩm có tên là `Meo con di lon ton`. Vậy có gì sai nhỉ?\n\nĐể nói rõ hơn, thì câu lệnh này là một câu lệnh được support bởi 1 thư viện ORM mặc định trong rails tên là ActiveRecord. Nó sẽ được phiên dịch thành mã sql như sau:\n\n```sql\n  SELECT  \"products\".* FROM \"products\" WHERE (product_name = 'Meo con di lon ton')\n```\n\nĐây vẫn là một câu lệnh quen thuộc, và nhìn qua thì không thấy gì sai trái cả.\n\nFlow hoạt động của website của tôi bình yên như vậy mà ta.\n\n1. Người dùng submit lên server product_name.\n\n2. Code xử lý ở server sẽ lấy product_name người dùng truyền lên và thực hiện truy vấn như trên.\n\n3. Trả về kết quả cho người dùng.\n\nVậy có gì mà không ổn?\n\nVới những người dùng thông thường thì. Đúng, mã nguồn của chúng ta hoàn toàn ổn. Nhưng nếu bạn là một ông chủ giàu có của một website nổi tiếng, và có nhiều kẻ ghét bạn vì bạn giàu hoặc nhìn mặt bạn thấy ghét và muốn tìm cách phá hoại website bạn thì sao?\n\n**Vậy là thay vì gửi một product_name thông thường như \"iphone x\", \"ghế tình yêu\"...Thì họ lại gửi một product_name có dạng như  `chinh' or '' = '`**\n\nLúc này truy vấn của chúng ta sẽ trở thành:\n\n```ruby\n  Product.where(\"product_name = 'chinh' OR ''=''\")\n```\n\nChuyển sang dạng Sql:\n\n```sql\n  SELECT  \"products\".* FROM \"products\" WHERE (product_name = 'chinh' or '' = '')\n```\n\nVì điều kiện trong where luôn trả về true bất kể product_name có bằng 'xxx' hay không (vì '' thì luôn luôn bằng '' :smile:). Nên câu truy vấn này sẽ trả về toàn bộ bảng products.\n\nVà như vậy dữ liệu website của bạn đã bị lộ trước những kẻ không lấy gì làm tốt đẹp.\n\nTrên đây chỉ là một ví dụ sơ sài, trong thực tế dữ liệu của bạn sẽ quan trọng hơn nhiều là cái products information như trên. Có thể là thông tin liên lạc, địa chỉ nhà, thông tin tài khoản ngân hàng...\n\n# 2. Cách phòng tránh Sql Injection trong rails.\n\nCó thể thấy khi để query dạng string như trên thì rất dễ bị khai thác, vì ActiveRecord sẽ không thể validate giá trị input mà người dùng nhập vào có hợp lệ hay không. Vậy cách tốt nhất để chống lại Sql injection chính là sử dụng query theo params thay vì sử dụng chuỗi như trên.\n\nThay vì viết:\n\n```ruby\n  Product.where(\"product_name  = 'Meo con di lon ton'\")\n```\n\nTa có thể viết dưới dạng params query như sau:\n\n```ruby\n  Product.where(product_name: 'Meo con di lon ton')\n  # hoặc\n  Product.where('product_name = ?', ['Meo con di lon ton'])\n  # hoặc\n  Product.where('product_name = :product_name', {:product_name => 'Meo con di lon ton'})\n```\n\nVới các cách thay thế, giá trị người dùng truyền vào sẽ được đảm bảo hợp lệ trước khi có dữ liệu trả về...\n\n\n# Kết luận.\n\nĐây là một bài sơ sài, ngắn gọn và khái quát cho người mới tìm hiểu về sql injection. Không phải bài viết chuyên sâu dành cho người có nhiều kinh nghiệm. Hãy để lại thảo luận nếu bạn có thắc mắc.\n","slug":"2019-06-08-tan-cong-sql-injection-va-cach-phong-chong-trong-rails","published":1,"updated":"2019-12-06T15:38:25.177Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7suga001z5rrsfwfnf1ww","content":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Trong project của bạn, đã bao giờ bạn sử dụng câu lệnh có dạng như:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Product.where(<span class=\"string\">\"product_name = 'Meo con di lon ton' \"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Nếu có, thì bạn đã vô tình tạo một lỗ hổng về an toàn cho website của mình. Hãy cùng tìm hiểu vì sao lại như vậy.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-Tim-hieu-ve-Sql-Injection\"><a href=\"#1-Tim-hieu-ve-Sql-Injection\" class=\"headerlink\" title=\"1. Tìm hiểu về Sql Injection\"></a>1. Tìm hiểu về Sql Injection</h1><p>Quay lại ví dụ bên trên, nội dung câu lệnh này nhắm lấy ra sản phẩm có tên là <code>Meo con di lon ton</code>. Vậy có gì sai nhỉ?</p>\n<p>Để nói rõ hơn, thì câu lệnh này là một câu lệnh được support bởi 1 thư viện ORM mặc định trong rails tên là ActiveRecord. Nó sẽ được phiên dịch thành mã sql như sau:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span>  <span class=\"string\">\"products\"</span>.* <span class=\"keyword\">FROM</span> <span class=\"string\">\"products\"</span> <span class=\"keyword\">WHERE</span> (product_name = <span class=\"string\">'Meo con di lon ton'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Đây vẫn là một câu lệnh quen thuộc, và nhìn qua thì không thấy gì sai trái cả.</p>\n<p>Flow hoạt động của website của tôi bình yên như vậy mà ta.</p>\n<ol>\n<li><p>Người dùng submit lên server product_name.</p>\n</li>\n<li><p>Code xử lý ở server sẽ lấy product_name người dùng truyền lên và thực hiện truy vấn như trên.</p>\n</li>\n<li><p>Trả về kết quả cho người dùng.</p>\n</li>\n</ol>\n<p>Vậy có gì mà không ổn?</p>\n<p>Với những người dùng thông thường thì. Đúng, mã nguồn của chúng ta hoàn toàn ổn. Nhưng nếu bạn là một ông chủ giàu có của một website nổi tiếng, và có nhiều kẻ ghét bạn vì bạn giàu hoặc nhìn mặt bạn thấy ghét và muốn tìm cách phá hoại website bạn thì sao?</p>\n<p><strong>Vậy là thay vì gửi một product_name thông thường như “iphone x”, “ghế tình yêu”…Thì họ lại gửi một product_name có dạng như  <code>chinh&#39; or &#39;&#39; = &#39;</code></strong></p>\n<p>Lúc này truy vấn của chúng ta sẽ trở thành:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Product.where(<span class=\"string\">\"product_name = 'chinh' OR ''=''\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Chuyển sang dạng Sql:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span>  <span class=\"string\">\"products\"</span>.* <span class=\"keyword\">FROM</span> <span class=\"string\">\"products\"</span> <span class=\"keyword\">WHERE</span> (product_name = <span class=\"string\">'chinh'</span> <span class=\"keyword\">or</span> <span class=\"string\">''</span> = <span class=\"string\">''</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Vì điều kiện trong where luôn trả về true bất kể product_name có bằng ‘xxx’ hay không (vì ‘’ thì luôn luôn bằng ‘’ :smile:). Nên câu truy vấn này sẽ trả về toàn bộ bảng products.</p>\n<p>Và như vậy dữ liệu website của bạn đã bị lộ trước những kẻ không lấy gì làm tốt đẹp.</p>\n<p>Trên đây chỉ là một ví dụ sơ sài, trong thực tế dữ liệu của bạn sẽ quan trọng hơn nhiều là cái products information như trên. Có thể là thông tin liên lạc, địa chỉ nhà, thông tin tài khoản ngân hàng…</p>\n<h1 id=\"2-Cach-phong-tranh-Sql-Injection-trong-rails\"><a href=\"#2-Cach-phong-tranh-Sql-Injection-trong-rails\" class=\"headerlink\" title=\"2. Cách phòng tránh Sql Injection trong rails.\"></a>2. Cách phòng tránh Sql Injection trong rails.</h1><p>Có thể thấy khi để query dạng string như trên thì rất dễ bị khai thác, vì ActiveRecord sẽ không thể validate giá trị input mà người dùng nhập vào có hợp lệ hay không. Vậy cách tốt nhất để chống lại Sql injection chính là sử dụng query theo params thay vì sử dụng chuỗi như trên.</p>\n<p>Thay vì viết:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Product.where(<span class=\"string\">\"product_name  = 'Meo con di lon ton'\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Ta có thể viết dưới dạng params query như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Product.where(<span class=\"symbol\">product_name:</span> <span class=\"string\">'Meo con di lon ton'</span>)</span><br><span class=\"line\"><span class=\"comment\"># hoặc</span></span><br><span class=\"line\">Product.where(<span class=\"string\">'product_name = ?'</span>, [<span class=\"string\">'Meo con di lon ton'</span>])</span><br><span class=\"line\"><span class=\"comment\"># hoặc</span></span><br><span class=\"line\">Product.where(<span class=\"string\">'product_name = :product_name'</span>, &#123;<span class=\"symbol\">:product_name</span> =&gt; <span class=\"string\">'Meo con di lon ton'</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Với các cách thay thế, giá trị người dùng truyền vào sẽ được đảm bảo hợp lệ trước khi có dữ liệu trả về…</p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận.\"></a>Kết luận.</h1><p>Đây là một bài sơ sài, ngắn gọn và khái quát cho người mới tìm hiểu về sql injection. Không phải bài viết chuyên sâu dành cho người có nhiều kinh nghiệm. Hãy để lại thảo luận nếu bạn có thắc mắc.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Trong project của bạn, đã bao giờ bạn sử dụng câu lệnh có dạng như:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Product.where(<span class=\"string\">\"product_name = 'Meo con di lon ton' \"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Nếu có, thì bạn đã vô tình tạo một lỗ hổng về an toàn cho website của mình. Hãy cùng tìm hiểu vì sao lại như vậy.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-Tim-hieu-ve-Sql-Injection\"><a href=\"#1-Tim-hieu-ve-Sql-Injection\" class=\"headerlink\" title=\"1. Tìm hiểu về Sql Injection\"></a>1. Tìm hiểu về Sql Injection</h1><p>Quay lại ví dụ bên trên, nội dung câu lệnh này nhắm lấy ra sản phẩm có tên là <code>Meo con di lon ton</code>. Vậy có gì sai nhỉ?</p>\n<p>Để nói rõ hơn, thì câu lệnh này là một câu lệnh được support bởi 1 thư viện ORM mặc định trong rails tên là ActiveRecord. Nó sẽ được phiên dịch thành mã sql như sau:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span>  <span class=\"string\">\"products\"</span>.* <span class=\"keyword\">FROM</span> <span class=\"string\">\"products\"</span> <span class=\"keyword\">WHERE</span> (product_name = <span class=\"string\">'Meo con di lon ton'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Đây vẫn là một câu lệnh quen thuộc, và nhìn qua thì không thấy gì sai trái cả.</p>\n<p>Flow hoạt động của website của tôi bình yên như vậy mà ta.</p>\n<ol>\n<li><p>Người dùng submit lên server product_name.</p>\n</li>\n<li><p>Code xử lý ở server sẽ lấy product_name người dùng truyền lên và thực hiện truy vấn như trên.</p>\n</li>\n<li><p>Trả về kết quả cho người dùng.</p>\n</li>\n</ol>\n<p>Vậy có gì mà không ổn?</p>\n<p>Với những người dùng thông thường thì. Đúng, mã nguồn của chúng ta hoàn toàn ổn. Nhưng nếu bạn là một ông chủ giàu có của một website nổi tiếng, và có nhiều kẻ ghét bạn vì bạn giàu hoặc nhìn mặt bạn thấy ghét và muốn tìm cách phá hoại website bạn thì sao?</p>\n<p><strong>Vậy là thay vì gửi một product_name thông thường như “iphone x”, “ghế tình yêu”…Thì họ lại gửi một product_name có dạng như  <code>chinh&#39; or &#39;&#39; = &#39;</code></strong></p>\n<p>Lúc này truy vấn của chúng ta sẽ trở thành:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Product.where(<span class=\"string\">\"product_name = 'chinh' OR ''=''\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Chuyển sang dạng Sql:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span>  <span class=\"string\">\"products\"</span>.* <span class=\"keyword\">FROM</span> <span class=\"string\">\"products\"</span> <span class=\"keyword\">WHERE</span> (product_name = <span class=\"string\">'chinh'</span> <span class=\"keyword\">or</span> <span class=\"string\">''</span> = <span class=\"string\">''</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Vì điều kiện trong where luôn trả về true bất kể product_name có bằng ‘xxx’ hay không (vì ‘’ thì luôn luôn bằng ‘’ :smile:). Nên câu truy vấn này sẽ trả về toàn bộ bảng products.</p>\n<p>Và như vậy dữ liệu website của bạn đã bị lộ trước những kẻ không lấy gì làm tốt đẹp.</p>\n<p>Trên đây chỉ là một ví dụ sơ sài, trong thực tế dữ liệu của bạn sẽ quan trọng hơn nhiều là cái products information như trên. Có thể là thông tin liên lạc, địa chỉ nhà, thông tin tài khoản ngân hàng…</p>\n<h1 id=\"2-Cach-phong-tranh-Sql-Injection-trong-rails\"><a href=\"#2-Cach-phong-tranh-Sql-Injection-trong-rails\" class=\"headerlink\" title=\"2. Cách phòng tránh Sql Injection trong rails.\"></a>2. Cách phòng tránh Sql Injection trong rails.</h1><p>Có thể thấy khi để query dạng string như trên thì rất dễ bị khai thác, vì ActiveRecord sẽ không thể validate giá trị input mà người dùng nhập vào có hợp lệ hay không. Vậy cách tốt nhất để chống lại Sql injection chính là sử dụng query theo params thay vì sử dụng chuỗi như trên.</p>\n<p>Thay vì viết:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Product.where(<span class=\"string\">\"product_name  = 'Meo con di lon ton'\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Ta có thể viết dưới dạng params query như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Product.where(<span class=\"symbol\">product_name:</span> <span class=\"string\">'Meo con di lon ton'</span>)</span><br><span class=\"line\"><span class=\"comment\"># hoặc</span></span><br><span class=\"line\">Product.where(<span class=\"string\">'product_name = ?'</span>, [<span class=\"string\">'Meo con di lon ton'</span>])</span><br><span class=\"line\"><span class=\"comment\"># hoặc</span></span><br><span class=\"line\">Product.where(<span class=\"string\">'product_name = :product_name'</span>, &#123;<span class=\"symbol\">:product_name</span> =&gt; <span class=\"string\">'Meo con di lon ton'</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Với các cách thay thế, giá trị người dùng truyền vào sẽ được đảm bảo hợp lệ trước khi có dữ liệu trả về…</p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận.\"></a>Kết luận.</h1><p>Đây là một bài sơ sài, ngắn gọn và khái quát cho người mới tìm hiểu về sql injection. Không phải bài viết chuyên sâu dành cho người có nhiều kinh nghiệm. Hãy để lại thảo luận nếu bạn có thắc mắc.</p>\n"},{"title":"Tổng Quan Nguyên Lý SOLID","date":"2019-05-16T17:00:00.000Z","draft":false,"_content":"## Đặt vấn đề\n\nCách đây một thời gian, tôi có làm một ứng dụng nhỏ với vỏn vẹn tổng cộng tầm 500 dòng code. Khi bắt đầu tôi đã mường tượng rằng đây chỉ là một chương trình đơn giản nên không cần phân chia gì cho tốn công sức màu mè. Vì vậy tôi chỉ code trên vài file nhất định.\n\nMột thời gian sau, tôi cần mở rộng thêm 1 vài chức năng nữa, rất tệ là lúc này tôi đã gần như quên luôn các logic mình đã làm trong đống code cũ, cắn răng đọc lại từng dòng, từng dòng, và tốn thời gian gấp 3 gấp 4 lần để hệ thống lại cho dễ hiểu hơn. Một bài học không phải cay đắng lắm cho tôi, nó chỉ tôi hiểu rằng việc cấu trúc và cách tiếp cận khi lập trình quan trọng đến thế nào.\n\nPhần lớn thời gian một ứng dụng trên tay dev là để maintain, vậy nên việc ngày hôm nay bạn làm nó ra sao ảnh hưởng rất lớn đến sau này. Đó là một phần lý do mà tôi phải tìm đường cách mạng qua SOLID và những mẫu design pattern, những thứ văn vở mà ngày xưa tôi rất ghét và thấy thừa thãi, nhưng giờ đây nó như một bầu trời chân lý sáng chói loé qua tim.\n\n## Luận bàn\n\n## 1. Định nghĩa và mục tiêu sử dụng\n\n![hoa](/images/solid.png)\n\nTrước tiên, hãy xem SOLID là viết tắt của những cụm từ gì.\n\n:one: **S**ingle Responsibility Principle\n\n:two: **O**pen/Closed Principle\n\n:three: **L**iskov Substitution Principle\n\n:four: **I**nterface Segregation Principle\n\n:five: **D**ependency Inversion Principle\n\nHàn lâm là vậy nhưng để dễ nhớ thì tôi gọi chúng ngắn gọn là: **S**ingle, **O**pen, **L**iskov, **I**nterface và **D**ependency.\n\nVề mục tiêu để cái nguyên lý này có mặt trên cõi đời, âu cũng là xuất phát từ nhu cầu làm ít hơn của con người, việc code không có hệ thống khiến các nhà phát triển tốn nhiều thời gian bảo trì và dễ phát sinh lỗi trong quá trình sử dụng.\nĐể giảm bớt gánh nặng này các nhà phát triển đã cô đọng lại một số khuôn khổ, cách thức lập trình mà dưới góc nhìn và kinh nghiệm của nhiều người, các khuôn khổ cách thức đó giúp cho việc bảo trì trở nên dễ dàng hơn, hệ thống ít phát sinh lỗi ngoài ý muốn hơn. Một trong số đó là hệ thống các nguyên tắc trong SOLID.\n\nGiả sử tôi phải xử lý một bài toán tính promotion cho một ứng dụng thương mại điện tử. Đây sẽ là ví dụ ta dùng đến trong các phần phía dưới. Giả sử cấu trúc dự án hiện tại như sau:\n\n```\n- app\n  - signin.rb\n  - signup.rb\n  - checkout.rb\n```\n\nTrong đó signin chứa mã nguồn thực hiện chức năng đăng nhập, signup chứa mã thực hiện chức năng đăng ký và checkout chứa mã thực hiện chức năng thanh toán.\n\n## 2. **S**ingle Responsibility Principle\n\n![hoa](/images/srp.jpg)\n\nNguyên lý này được phát biểu như sau:\n\n> Every class should have a single responsibility, and that responsibility should be entirely encapsulated by the class.\n\nĐiều cần quan tâm ở đây là single responsibility có thể hiểu là gì? Nghĩa của responsibility là 'trách nhiệm', vậy 'trách nhiệm' trong code là gì?\n\nTa có thể hiểu nó đồng nghĩa với 'chức năng' hay không? Cứ giả sử như ta có thể hiểu nó là 'chức năng' vậy khi đó thì nguyên lý này có thể phát biểu lại thành như sau:\n\n> Mỗi class nên chỉ mang một chức năng nhất định, và chức năng đó phải được đóng gói trong class này.\n\nBây giờ thì đã dễ hiểu hơn nhiều, quay trở về ví dụ, chúng ta cần viết một chức năng tính promotion. Ta có thể  viết chức năng này vào đâu?\n\nCâu trả lời đơn giản nhất là chúng ta viết chức năng này luôn vào file checkout.rb, khi thực hiện chức năng thanh toán thì sử dụng luôn các method tính promotion trong đó. Mọi chuyện thật đơn giản phải không? Điều này có vi phạm nguyên tắc SRP không?\n\nNếu tôi nói là không vi phạm? Diễn giải của tôi như sau: Trách nhiệm của cái module/class Checkout là thanh toán những mặt hàng bạn đã bỏ vào cart, vậy promotion cũng chỉ một step trong quá trình thanh toán, nên nếu tôi viết code promotion trong module/class Checkout thì tôi vi phạm nguyên tắc SRP chỗ nào?  Checkout vẫn đang làm đúng và duy nhất một 'trách nhiệm' đó là giúp thanh toán đơn hàng và promotion chỉ là phần phụ trợ cho quá trình đó hay nói cách khác promotion chỉ là một bước trong nhiều bước của quá trình thanh toán.\n\nVậy tôi có sai khi nói vậy không? Bạn có thể chứng minh là tôi sai nguyên lý SRP được hay không?\n\n1. Tôi nghe nhiều người nói đây là nguyên tắc dễ nhất trong SOLID, theo tôi nó chỉ là nguyên tắc mà định nghĩa dễ học thuộc nhất mà thôi.\n\n2. Responsibility thì hãy hiểu nó là responsibility (hay hiểu nó là đúng ngữ nghĩa là trách nhiệm). Không đánh đồng responsibility thành 'chức năng' như trên.\n\n3. Nội dung nguyên lý chỉ có tính tương đối, nó phụ thuộc hoàn toàn vào cái mà bạn xem là một responsibility.\n\nĐể đánh giá đâu, cái gì là một responsibility thì có lẽ điều kiện cần là phải có đủ kinh nghiệm. Trở lại ví dụ, tôi có thể coi promotion là một responsibility riêng rẽ với chức năng thanh toán. Khi đó tổ chức code của tôi như sau:\n\n```\n- app\n  - signin.rb\n  - signup.rb\n  - checkout.rb\n  - promotion.rb\n```\n\nNhư này đã phải là cách tốt nhất? Câu trả lời là tuỳ ngữ điệu hoàn cảnh, giả sử nếu chức năng promotion có nhiều rule khác nhau thì việc bỏ tất cả function tính promotion vào 1 file promotion.rb có vẻ không phải là một cách hay. Khi đó ta tổ chức lại như sau:\n\n```\n- app\n  - signin.rb\n  - signup.rb\n  - checkout.rb\n  - promotion\n    - promotion_type_a.rb\n    - promotion_type_b.rb\n    - promotion_type_c.rb\n```\n\nCách tổ chức này đã là tốt nhất hay chưa? câu trả lời là chưa chắc, mọi thứ lại phụ thuộc vào ngữ cảnh.\nNguyên lý SRP có thể sai hay đúng trong một số trường hợp là rất mập mờ, tuỳ theo cái mà nhà phát triển định nghĩa cho responsibility mà họ xây dựng.\n\nNote: Nhưng cuối cùng nguyên lý SRP cũng chỉ có một mục đích duy nhất để cấu trúc dự án dễ sửa đổi và bảo trì, vì vậy trong từng tình huống sẽ có những cách khác nhau để phân chia tổ chức mã nguồn, dựa vào chức năng, dựa vào yêu cầu khách hàng, dựa vào tiềm năng phát triển dự án...\n\n## 3. **O**pen/Closed Principle\n\n![hoa](/images/ocp.jpg)\n\nNguyên lý này được phát biểu như sau:\n\n> One software entity (class/module) must be open for extension but closed for modification.\n\nHiểu đơn giản:\n\n> Một class/module cần phải có thể mở rộng, nhưng không/không nên sửa đổi nó.\n\nVì sao nguyên lý này lại yêu cầu như vậy? việc tôi muốn mở rộng hay tôi sửa đổi một cái class thì có ảnh hưởng gì đâu mà căng nhỉ?\n\nĐúng là như vậy, trong phần lớn quá trình phát triển những ứng dụng cá nhân đơn giản thì việc chúng ta có thêm, xoá, sửa hay mở rộng một class/module đa phần đều không mang lại hậu quả gì ngoài ý muốn.\n\nNhưng ngữ cảnh mà nguyên lý này hướng tới là những ứng dụng thực sự trong cuộc sống, ở đó những ứng dụng này sẽ lớn, rối rắm và có business không hề đơn giản. Một điểm nữa là dự án đó khi tới tay bạn đã có thể trải qua 5, 7 lần đổi team phát triển và những gì bạn thấy là thành quả của cả một quá trình phát triển tính năng và maintain trong đơn vị tính bằng năm.\n\nLiệu bạn có nắm hết được flow hoạt động của từng đoạn mã, từng file từng class hay không? Nhất định là không rồi.\n\nĐó chính là lý do mà nguyên lý OCP ra đời, khi hệ thống phức tạp và bạn không nắm được hết tất cả những gì sẽ xảy ra sau khi bạn thay đổi mã nguồn tại một class/module. Hãy đừng thay đổi, để tránh làm ảnh hưởng đến một phần logic tiềm tàng nào đó. Thay vào đó hãy mở rộng class/module đó, mở rộng để bổ sung tính năng bạn cần mà còn giúp không ảnh hưởng đến những phần code cũ không sai lệch về logic luận lý (Vì nó có thể vẫn đang sử dụng chức năng cũ, liệu bạn có cover được hết để sửa đổi tất cả các trường hợp có thể xảy ra hay không?).\n\n> Vì vậy hãy ưu tiên mở rộng một class/module khi cần phát triển thêm hay thay đổi tính năng, hạn chế và hãy thật cẩn thận khi cần sửa đổi mã nguồn có sẵn (chính là sửa đổi class/module).\n\nMục tiêu của nguyên lý là vậy, rất dễ hiểu, hãy cùng thảo luận về một ví dụ trước khi sang phần tiếp theo:\n\nLại quay trở lại ví dụ về bài toán promotion, giả sử tôi lự chọn cấu trúc chương trình như sau:\n\n```\n- app\n  - signin.rb\n  - signup.rb\n  - checkout.rb\n  - promotion.rb\n```\n\nNhư đã trình bày ở trên, cấu trúc như này về lý thuyết thì cũng chả ai bảo là tôi vi phạm nguyên tắc số 1 SRP được. Giả sử nội dung của file promotion.rb như sau:\n\n```ruby\nclass Promotion\n  def promotion_type_a\n    # implement rule promotion type a\n  end\n\n  def promotion_type_b\n    # implement rule promotion type b\n  end\nend\n```\n\nVậy bây giờ khi tôi muốn thêm một rule tính promotion mới, thì tôi sẽ phải sửa đổi file promotion.rb này, về nguyên tắc nó đã vi phạm nguyên lý số 2 OCP (mở để mở rộng chứ không phải để sửa đổi).\n\nĐể khắc phục ta có thể cấu trúc lại mã nguồn như sau:\n\n```\n- app\n  - signin.rb\n  - signup.rb\n  - checkout.rb\n  - promotion\n    - promotion.rb\n    - promotion_type_a.rb\n    - promotion_type_b.rb\n    - promotion_type_c.rb\n```\n\nVà khi này, khi tôi cần thêm mới 1 rule promotion, tôi sẽ tạo một file mới trong thư mục promotion, với nội dung kế thừa từ class Promotion.\n\nVí dụ bổ sung thêm rule promotion_type_x.rb với nội dung:\n\n```ruby\nclass PromotionTypeX < Promotion\n  # do something\nend\n```\n\n## 4. **L**iskov Substitution Principle\n\n![hoa](/images/lsp.jpg)\n\nNguyên lý này được phát biểu như sau:\n\n> If S is a subtype of T, then objects of type T may be replaced with objects of type S (i.e., objects of type S may substitute objects of type T) without altering any of the desirable properties of that program (correctness, task performed, etc.).\n\nHiểu đơn giản là:\n\n> Bạn có class A là con của class B, thì instance của class A phải thay thế được cho instance của class B trong mã nguồn mà không gây ra sai xót nào (không lỗi và không sai ngữ nghĩa).\n\nMột ví dụ đơn giản như sau:\n\n```ruby\nclass Animal\n  def animal_hello\n    puts \"Animal say hello\"\n  end\nend\n\nclass Cat < Animal\n  def cat_hello\n    puts \"Cat say hello\"\n  end\nend\n```\n\nĐoạn mã trên là một đoạn mã hợp lệ với nguyên lý Liskov vì:\n\n```ruby\ntemp = Animal.new\ntemp.animal_hello\n# kết quả trả về là: \"Animal say hello\"\n\ntemp = Cat.new\ntemp.animal_hello\n# kết quả trả về vẫn là: \"Animal say hello\"\n```\n\nNhư bạn thấy, kết quả trả về không thay đổi khi ta dùng instance của class Cat thay cho instance class cha của nó là Animal, và vậy là nguyên lý Liskov được bảo toàn tính đúng đắn của nó.\n\nHãy thử một đoạn mã nguồn khác như sau:\n\n```ruby\nclass Animal\n  def animal_hello\n    puts \"Animal say hello\"\n  end\nend\n\nclass Cat < Animal\n  def animal_hello\n    puts \"Cat say hello\"\n  end\nend\n```\n\nĐây là đoạn mã vi phạm nguyên tắc của Liskov, khi này ta có:\n\n```ruby\ntemp = Animal.new\ntemp.animal_hello\n# kết quả trả về là: \"Animal say hello\"\n\ntemp = Cat.new\ntemp.animal_hello\n# kết quả trả về là: \"Cat say hello\"\n```\n\nTa có thể thấy, instance của class Cat khi gọi tới method animal_hello đã không còn trả về kết quả tương tự như một instance Animal nữa rồi, vì lý do ở class Cat, class này đã override lại phương thức animal_hello, và từ đó dẫn tới vi phạm nguyên tắc Liskov.\n\n## 5. **I**nterface Segregation Principle\n\n![hoa](/images/isp.png)\n\nNguyên lý này được phát biểu như sau:\n\n> No client should be forced to depend on methods it does not use.\n\nHiểu đơn giản là:\n\n> Nếu bạn là một đối tượng nào đó trong mã nguồn, hãy đảm bảo là bạn phải/chỉ làm những công việc mà bạn phải/có thể làm. Không trao cho bạn những khả năng mà bạn không cần.\n\nThử một ví dụ đơn giản, bạn là một học sinh được giao nhiệm vụ trực nhật lớp, cô giáo bạn phải đảm bảo rằng bạn chỉ được trao chìa khoá mở cửa phòng học của bạn, chứ không trao cho bạn những chìa khoá khác (như chìa khoá các lớp học khác, phòng tin học, phòng giáo viên...), đấy là những công việc của những cá nhân khác.\n\nNếu bạn được trao những công việc của người khác, có thể bạn sẽ tạo ra những sai lầm không thể sửa đổi được. Vì vậy hãy làm đúng công việc của mình.\n\nHãy bắt đầu với một ví dụ:\n\nTa có một class Animal.\n\n```ruby\nclass Animal\n  include AnimalHelper\n  # do something\nend\n```\n\nClass Animal bên trên include module dưới đây.\n\n```ruby\nmodule AnimalHelper\n  def animal_helper_a\n    # do something\n  end\n\n  def animal_helper_b\n    # do something\n  end\n\n  def animal_helper_c\n    # do something\n  end\nend\n```\n\nMọi chuyện ổn chứ? Rất ổn, 3 method hiện có trong module AnimalHelper là 3 method hỗ trợ cho class Animal.\n\nVậy bây giờ tôi có thêm một class nữa như sau:\n\n```ruby\nclass YellowCat\n  # do something\nend\n```\n\nClass này cần một phương thức support tên là `yellow_cat_helper`, tôi sẽ viết thêm method này vào module AnimalHelper và include module AnimalHelper vào class YellowCat vậy là đúng và đủ yêu cầu. Khi này module AnimalHelper và class YellowCat sẽ trở thành như sau:\n\nClass YellowCat\n\n```ruby\nclass YellowCat\n  include AnimalHelper\n  # do something\nend\n```\n\nModule AnimalHelper\n\n```ruby\nmodule AnimalHelper\n  def animal_helper_a\n    # do something\n  end\n\n  def animal_helper_b\n    # do something\n  end\n\n  def animal_helper_c\n    # do something\n  end\n\n  # add new method for YellowCat\n  def yellow_cat_helper\n    # do something\n  end\nend\n```\n\nMọi chuyện giờ vẫn ổn chứ? Không, bây giờ thì không ổn nữa rồi nó đã vi phạm nguyên tắc SOLID thứ 4, chữ \"I\" mà chúng ta đang xét.\n\nVì sao?\n\nVì class Animal đâu có cần method `yellow_cat_helper`, còn class YellowCat đâu có cần 3 method `animal_helper_a`, `animal_helper_b`, `animal_helper_c` này đâu?\n\nVậy mà chúng vẫn có thể sử dụng những method mà chúng vốn không cần, vì lý do ta viết chung tất cả method vào một module và include module vào từng class.\n\nY như ví dụ bên trên: Bạn cần trực nhật lớp 1A thôi mà, cô giáo bạn đưa cho bạn trùm chìa khoá của cả trường làm gì? Cầm thì nặng, mà nhỡ đâu bạn ~~tắt mắt~~ nghịch dại thì hậu quả khôn lường.\n\nVậy để không vi phạm nguyên tắc này ta có thể sửa lại mã nguồn như sau:\n\nClass Animal\n\n```ruby\nclass Animal\n  include AnimalHelper\n  # do something\nend\n```\n\nModule Animal\n\n```ruby\nmodule AnimalHelper\n  def animal_helper_a\n    # do something\n  end\n\n  def animal_helper_b\n    # do something\n  end\n\n  def animal_helper_c\n    # do something\n  end\nend\n```\n\nClass YellowCat\n\n```ruby\nclass YellowCat\n  include YellowCatHelper\n  # do something\nend\n```\n\nVà giờ ta tạo một module mới để YellowCat include\n\n```ruby\nmodule YellowCatHelper\n  def yellow_cat_helper\n    # do something\n  end\nend\n```\n\nOk, vậy là look good rồi :smile: Lúc này class Animal chỉ được include những method mà nó cần và class YellowCat cũng vậy.\n\n## 6. **D**ependency Inversion Principle\n\n![hoa](/images/dip.jpg)\n\nNguyên lý này được phát biểu như sau:\n\n> 1. High-level modules should not depend on low-level modules. Both should depend on abstractions.\n> 2. Abstractions should not depend upon details. Details should depend upon abstractions.\n\nDịch sát nghĩa sẽ là:\n\n> 1. Module cấp cao không nên phụ thuộc vào module cấp thấp hơn. Cả hai nên phụ thuộc vào abstractions.\n> 2. Abstractions không nên phụ thuộc vào details. Details nên phụ thuộc vào abstractions\n\nQuay trở lại ví dụ promotion ban đầu, giả sử ta viết mã nguồn như sau:\n\n```ruby\n# app/checkout.rb\nclass Checkout\n  def get_bill(cart)\n    PromotionTypeA.promotion_type_a(cart)\n  end\nend\n\n# app/promotion/promotion_type_a.rb\nclass PromotionTypeA\n  def self.promotion_type_a(cart)\n    # do something\n  end\nend\n```\n\nTrong đoạn mã nguồn trên đây, method get_bill trong class Checkout phụ thuộc vào class PromotionTypeA. Rõ ràng là như vậy, câu hỏi là nếu ta có PromotionTypeB, PromotionTypeC... Thì phải làm sao?\n\nChúng ta sẽ phải viết 3 method get_bill ứng với PromotionTypeA, PromotionTypeB và PromotionTypeC hay sao?\n\nĐó cũng là một cách, nhưng đó là cách đã vi phạm nguyên lý DIP, khi mà các module phụ thuộc lẫn nhau.\n\nĐể giải quyết vấn đề này ta có thể viết lại mã nguồn như sau:\n\n```ruby\n# app/checkout.rb\nclass Checkout\n  def get_bill(cart, PromotionType)\n    PromotionType.get_promotion(cart)\n  end\nend\n\n# app/promotion/promotion_type_a.rb\nclass PromotionTypeA\n  def self.get_promotion(cart)\n    # do something\n  end\nend\n\n# get_bill với PromotionTypeA\nCheckout.new.get_bill(cart, PromotionTypeA)\n\n# để viết thêm PromotionTypeB, ta viết thêm một class PromotionTypeB và truyền PromotionTypeB vào get_bill method.\n\n# app/promotion/promotion_type_a.rb\nclass PromotionTypeB\n  def self.get_promotion(cart)\n    # do something\n  end\nend\n\nCheckout.new.get_bill(cart, PromotionTypeB)\n```\n\n## Kết luận\n\nTrên đây là 1 cái nhìn tổng quan về hệ thống nguyên lý SOLID nổi tiếng, việc áp dụng nguyên lý này sẽ không chắc giúp mã nguồn bạn thành công, nhưng nó sẽ giảm thiểu rủi ro hơn là khi code bất chấp, lý thuyết chỉ là một phần nhỏ, nắm lý thuyết giúp chúng ta có cái nhìn tổng quát, trích rút lại thì thứ làm cho nguyên lý này có giá trị nằm ở kinh nghiệm sử dụng của nhà phát triển, không phải luôn luôn tuân thủ mọi quy tắc đã là tốt trong mọi trường hợp.\n\nNguồn tham khảo:\n\n[1] [https://en.wikipedia.org/wiki/SOLID](https://en.wikipedia.org/wiki/SOLID)\n","source":"_posts/2019-05-17-nguyen-ly-solid-trong-code-ruby.md","raw":"---\ntitle: \"Tổng Quan Nguyên Lý SOLID\"\ndate: 2019-05-17\ndraft: false\ntags: [\"SOLID\", \"RUBY\"]\ncategories: [\"RUBY\", \"PROGRAMMING\"]\n---\n## Đặt vấn đề\n\nCách đây một thời gian, tôi có làm một ứng dụng nhỏ với vỏn vẹn tổng cộng tầm 500 dòng code. Khi bắt đầu tôi đã mường tượng rằng đây chỉ là một chương trình đơn giản nên không cần phân chia gì cho tốn công sức màu mè. Vì vậy tôi chỉ code trên vài file nhất định.\n\nMột thời gian sau, tôi cần mở rộng thêm 1 vài chức năng nữa, rất tệ là lúc này tôi đã gần như quên luôn các logic mình đã làm trong đống code cũ, cắn răng đọc lại từng dòng, từng dòng, và tốn thời gian gấp 3 gấp 4 lần để hệ thống lại cho dễ hiểu hơn. Một bài học không phải cay đắng lắm cho tôi, nó chỉ tôi hiểu rằng việc cấu trúc và cách tiếp cận khi lập trình quan trọng đến thế nào.\n\nPhần lớn thời gian một ứng dụng trên tay dev là để maintain, vậy nên việc ngày hôm nay bạn làm nó ra sao ảnh hưởng rất lớn đến sau này. Đó là một phần lý do mà tôi phải tìm đường cách mạng qua SOLID và những mẫu design pattern, những thứ văn vở mà ngày xưa tôi rất ghét và thấy thừa thãi, nhưng giờ đây nó như một bầu trời chân lý sáng chói loé qua tim.\n\n## Luận bàn\n\n## 1. Định nghĩa và mục tiêu sử dụng\n\n![hoa](/images/solid.png)\n\nTrước tiên, hãy xem SOLID là viết tắt của những cụm từ gì.\n\n:one: **S**ingle Responsibility Principle\n\n:two: **O**pen/Closed Principle\n\n:three: **L**iskov Substitution Principle\n\n:four: **I**nterface Segregation Principle\n\n:five: **D**ependency Inversion Principle\n\nHàn lâm là vậy nhưng để dễ nhớ thì tôi gọi chúng ngắn gọn là: **S**ingle, **O**pen, **L**iskov, **I**nterface và **D**ependency.\n\nVề mục tiêu để cái nguyên lý này có mặt trên cõi đời, âu cũng là xuất phát từ nhu cầu làm ít hơn của con người, việc code không có hệ thống khiến các nhà phát triển tốn nhiều thời gian bảo trì và dễ phát sinh lỗi trong quá trình sử dụng.\nĐể giảm bớt gánh nặng này các nhà phát triển đã cô đọng lại một số khuôn khổ, cách thức lập trình mà dưới góc nhìn và kinh nghiệm của nhiều người, các khuôn khổ cách thức đó giúp cho việc bảo trì trở nên dễ dàng hơn, hệ thống ít phát sinh lỗi ngoài ý muốn hơn. Một trong số đó là hệ thống các nguyên tắc trong SOLID.\n\nGiả sử tôi phải xử lý một bài toán tính promotion cho một ứng dụng thương mại điện tử. Đây sẽ là ví dụ ta dùng đến trong các phần phía dưới. Giả sử cấu trúc dự án hiện tại như sau:\n\n```\n- app\n  - signin.rb\n  - signup.rb\n  - checkout.rb\n```\n\nTrong đó signin chứa mã nguồn thực hiện chức năng đăng nhập, signup chứa mã thực hiện chức năng đăng ký và checkout chứa mã thực hiện chức năng thanh toán.\n\n## 2. **S**ingle Responsibility Principle\n\n![hoa](/images/srp.jpg)\n\nNguyên lý này được phát biểu như sau:\n\n> Every class should have a single responsibility, and that responsibility should be entirely encapsulated by the class.\n\nĐiều cần quan tâm ở đây là single responsibility có thể hiểu là gì? Nghĩa của responsibility là 'trách nhiệm', vậy 'trách nhiệm' trong code là gì?\n\nTa có thể hiểu nó đồng nghĩa với 'chức năng' hay không? Cứ giả sử như ta có thể hiểu nó là 'chức năng' vậy khi đó thì nguyên lý này có thể phát biểu lại thành như sau:\n\n> Mỗi class nên chỉ mang một chức năng nhất định, và chức năng đó phải được đóng gói trong class này.\n\nBây giờ thì đã dễ hiểu hơn nhiều, quay trở về ví dụ, chúng ta cần viết một chức năng tính promotion. Ta có thể  viết chức năng này vào đâu?\n\nCâu trả lời đơn giản nhất là chúng ta viết chức năng này luôn vào file checkout.rb, khi thực hiện chức năng thanh toán thì sử dụng luôn các method tính promotion trong đó. Mọi chuyện thật đơn giản phải không? Điều này có vi phạm nguyên tắc SRP không?\n\nNếu tôi nói là không vi phạm? Diễn giải của tôi như sau: Trách nhiệm của cái module/class Checkout là thanh toán những mặt hàng bạn đã bỏ vào cart, vậy promotion cũng chỉ một step trong quá trình thanh toán, nên nếu tôi viết code promotion trong module/class Checkout thì tôi vi phạm nguyên tắc SRP chỗ nào?  Checkout vẫn đang làm đúng và duy nhất một 'trách nhiệm' đó là giúp thanh toán đơn hàng và promotion chỉ là phần phụ trợ cho quá trình đó hay nói cách khác promotion chỉ là một bước trong nhiều bước của quá trình thanh toán.\n\nVậy tôi có sai khi nói vậy không? Bạn có thể chứng minh là tôi sai nguyên lý SRP được hay không?\n\n1. Tôi nghe nhiều người nói đây là nguyên tắc dễ nhất trong SOLID, theo tôi nó chỉ là nguyên tắc mà định nghĩa dễ học thuộc nhất mà thôi.\n\n2. Responsibility thì hãy hiểu nó là responsibility (hay hiểu nó là đúng ngữ nghĩa là trách nhiệm). Không đánh đồng responsibility thành 'chức năng' như trên.\n\n3. Nội dung nguyên lý chỉ có tính tương đối, nó phụ thuộc hoàn toàn vào cái mà bạn xem là một responsibility.\n\nĐể đánh giá đâu, cái gì là một responsibility thì có lẽ điều kiện cần là phải có đủ kinh nghiệm. Trở lại ví dụ, tôi có thể coi promotion là một responsibility riêng rẽ với chức năng thanh toán. Khi đó tổ chức code của tôi như sau:\n\n```\n- app\n  - signin.rb\n  - signup.rb\n  - checkout.rb\n  - promotion.rb\n```\n\nNhư này đã phải là cách tốt nhất? Câu trả lời là tuỳ ngữ điệu hoàn cảnh, giả sử nếu chức năng promotion có nhiều rule khác nhau thì việc bỏ tất cả function tính promotion vào 1 file promotion.rb có vẻ không phải là một cách hay. Khi đó ta tổ chức lại như sau:\n\n```\n- app\n  - signin.rb\n  - signup.rb\n  - checkout.rb\n  - promotion\n    - promotion_type_a.rb\n    - promotion_type_b.rb\n    - promotion_type_c.rb\n```\n\nCách tổ chức này đã là tốt nhất hay chưa? câu trả lời là chưa chắc, mọi thứ lại phụ thuộc vào ngữ cảnh.\nNguyên lý SRP có thể sai hay đúng trong một số trường hợp là rất mập mờ, tuỳ theo cái mà nhà phát triển định nghĩa cho responsibility mà họ xây dựng.\n\nNote: Nhưng cuối cùng nguyên lý SRP cũng chỉ có một mục đích duy nhất để cấu trúc dự án dễ sửa đổi và bảo trì, vì vậy trong từng tình huống sẽ có những cách khác nhau để phân chia tổ chức mã nguồn, dựa vào chức năng, dựa vào yêu cầu khách hàng, dựa vào tiềm năng phát triển dự án...\n\n## 3. **O**pen/Closed Principle\n\n![hoa](/images/ocp.jpg)\n\nNguyên lý này được phát biểu như sau:\n\n> One software entity (class/module) must be open for extension but closed for modification.\n\nHiểu đơn giản:\n\n> Một class/module cần phải có thể mở rộng, nhưng không/không nên sửa đổi nó.\n\nVì sao nguyên lý này lại yêu cầu như vậy? việc tôi muốn mở rộng hay tôi sửa đổi một cái class thì có ảnh hưởng gì đâu mà căng nhỉ?\n\nĐúng là như vậy, trong phần lớn quá trình phát triển những ứng dụng cá nhân đơn giản thì việc chúng ta có thêm, xoá, sửa hay mở rộng một class/module đa phần đều không mang lại hậu quả gì ngoài ý muốn.\n\nNhưng ngữ cảnh mà nguyên lý này hướng tới là những ứng dụng thực sự trong cuộc sống, ở đó những ứng dụng này sẽ lớn, rối rắm và có business không hề đơn giản. Một điểm nữa là dự án đó khi tới tay bạn đã có thể trải qua 5, 7 lần đổi team phát triển và những gì bạn thấy là thành quả của cả một quá trình phát triển tính năng và maintain trong đơn vị tính bằng năm.\n\nLiệu bạn có nắm hết được flow hoạt động của từng đoạn mã, từng file từng class hay không? Nhất định là không rồi.\n\nĐó chính là lý do mà nguyên lý OCP ra đời, khi hệ thống phức tạp và bạn không nắm được hết tất cả những gì sẽ xảy ra sau khi bạn thay đổi mã nguồn tại một class/module. Hãy đừng thay đổi, để tránh làm ảnh hưởng đến một phần logic tiềm tàng nào đó. Thay vào đó hãy mở rộng class/module đó, mở rộng để bổ sung tính năng bạn cần mà còn giúp không ảnh hưởng đến những phần code cũ không sai lệch về logic luận lý (Vì nó có thể vẫn đang sử dụng chức năng cũ, liệu bạn có cover được hết để sửa đổi tất cả các trường hợp có thể xảy ra hay không?).\n\n> Vì vậy hãy ưu tiên mở rộng một class/module khi cần phát triển thêm hay thay đổi tính năng, hạn chế và hãy thật cẩn thận khi cần sửa đổi mã nguồn có sẵn (chính là sửa đổi class/module).\n\nMục tiêu của nguyên lý là vậy, rất dễ hiểu, hãy cùng thảo luận về một ví dụ trước khi sang phần tiếp theo:\n\nLại quay trở lại ví dụ về bài toán promotion, giả sử tôi lự chọn cấu trúc chương trình như sau:\n\n```\n- app\n  - signin.rb\n  - signup.rb\n  - checkout.rb\n  - promotion.rb\n```\n\nNhư đã trình bày ở trên, cấu trúc như này về lý thuyết thì cũng chả ai bảo là tôi vi phạm nguyên tắc số 1 SRP được. Giả sử nội dung của file promotion.rb như sau:\n\n```ruby\nclass Promotion\n  def promotion_type_a\n    # implement rule promotion type a\n  end\n\n  def promotion_type_b\n    # implement rule promotion type b\n  end\nend\n```\n\nVậy bây giờ khi tôi muốn thêm một rule tính promotion mới, thì tôi sẽ phải sửa đổi file promotion.rb này, về nguyên tắc nó đã vi phạm nguyên lý số 2 OCP (mở để mở rộng chứ không phải để sửa đổi).\n\nĐể khắc phục ta có thể cấu trúc lại mã nguồn như sau:\n\n```\n- app\n  - signin.rb\n  - signup.rb\n  - checkout.rb\n  - promotion\n    - promotion.rb\n    - promotion_type_a.rb\n    - promotion_type_b.rb\n    - promotion_type_c.rb\n```\n\nVà khi này, khi tôi cần thêm mới 1 rule promotion, tôi sẽ tạo một file mới trong thư mục promotion, với nội dung kế thừa từ class Promotion.\n\nVí dụ bổ sung thêm rule promotion_type_x.rb với nội dung:\n\n```ruby\nclass PromotionTypeX < Promotion\n  # do something\nend\n```\n\n## 4. **L**iskov Substitution Principle\n\n![hoa](/images/lsp.jpg)\n\nNguyên lý này được phát biểu như sau:\n\n> If S is a subtype of T, then objects of type T may be replaced with objects of type S (i.e., objects of type S may substitute objects of type T) without altering any of the desirable properties of that program (correctness, task performed, etc.).\n\nHiểu đơn giản là:\n\n> Bạn có class A là con của class B, thì instance của class A phải thay thế được cho instance của class B trong mã nguồn mà không gây ra sai xót nào (không lỗi và không sai ngữ nghĩa).\n\nMột ví dụ đơn giản như sau:\n\n```ruby\nclass Animal\n  def animal_hello\n    puts \"Animal say hello\"\n  end\nend\n\nclass Cat < Animal\n  def cat_hello\n    puts \"Cat say hello\"\n  end\nend\n```\n\nĐoạn mã trên là một đoạn mã hợp lệ với nguyên lý Liskov vì:\n\n```ruby\ntemp = Animal.new\ntemp.animal_hello\n# kết quả trả về là: \"Animal say hello\"\n\ntemp = Cat.new\ntemp.animal_hello\n# kết quả trả về vẫn là: \"Animal say hello\"\n```\n\nNhư bạn thấy, kết quả trả về không thay đổi khi ta dùng instance của class Cat thay cho instance class cha của nó là Animal, và vậy là nguyên lý Liskov được bảo toàn tính đúng đắn của nó.\n\nHãy thử một đoạn mã nguồn khác như sau:\n\n```ruby\nclass Animal\n  def animal_hello\n    puts \"Animal say hello\"\n  end\nend\n\nclass Cat < Animal\n  def animal_hello\n    puts \"Cat say hello\"\n  end\nend\n```\n\nĐây là đoạn mã vi phạm nguyên tắc của Liskov, khi này ta có:\n\n```ruby\ntemp = Animal.new\ntemp.animal_hello\n# kết quả trả về là: \"Animal say hello\"\n\ntemp = Cat.new\ntemp.animal_hello\n# kết quả trả về là: \"Cat say hello\"\n```\n\nTa có thể thấy, instance của class Cat khi gọi tới method animal_hello đã không còn trả về kết quả tương tự như một instance Animal nữa rồi, vì lý do ở class Cat, class này đã override lại phương thức animal_hello, và từ đó dẫn tới vi phạm nguyên tắc Liskov.\n\n## 5. **I**nterface Segregation Principle\n\n![hoa](/images/isp.png)\n\nNguyên lý này được phát biểu như sau:\n\n> No client should be forced to depend on methods it does not use.\n\nHiểu đơn giản là:\n\n> Nếu bạn là một đối tượng nào đó trong mã nguồn, hãy đảm bảo là bạn phải/chỉ làm những công việc mà bạn phải/có thể làm. Không trao cho bạn những khả năng mà bạn không cần.\n\nThử một ví dụ đơn giản, bạn là một học sinh được giao nhiệm vụ trực nhật lớp, cô giáo bạn phải đảm bảo rằng bạn chỉ được trao chìa khoá mở cửa phòng học của bạn, chứ không trao cho bạn những chìa khoá khác (như chìa khoá các lớp học khác, phòng tin học, phòng giáo viên...), đấy là những công việc của những cá nhân khác.\n\nNếu bạn được trao những công việc của người khác, có thể bạn sẽ tạo ra những sai lầm không thể sửa đổi được. Vì vậy hãy làm đúng công việc của mình.\n\nHãy bắt đầu với một ví dụ:\n\nTa có một class Animal.\n\n```ruby\nclass Animal\n  include AnimalHelper\n  # do something\nend\n```\n\nClass Animal bên trên include module dưới đây.\n\n```ruby\nmodule AnimalHelper\n  def animal_helper_a\n    # do something\n  end\n\n  def animal_helper_b\n    # do something\n  end\n\n  def animal_helper_c\n    # do something\n  end\nend\n```\n\nMọi chuyện ổn chứ? Rất ổn, 3 method hiện có trong module AnimalHelper là 3 method hỗ trợ cho class Animal.\n\nVậy bây giờ tôi có thêm một class nữa như sau:\n\n```ruby\nclass YellowCat\n  # do something\nend\n```\n\nClass này cần một phương thức support tên là `yellow_cat_helper`, tôi sẽ viết thêm method này vào module AnimalHelper và include module AnimalHelper vào class YellowCat vậy là đúng và đủ yêu cầu. Khi này module AnimalHelper và class YellowCat sẽ trở thành như sau:\n\nClass YellowCat\n\n```ruby\nclass YellowCat\n  include AnimalHelper\n  # do something\nend\n```\n\nModule AnimalHelper\n\n```ruby\nmodule AnimalHelper\n  def animal_helper_a\n    # do something\n  end\n\n  def animal_helper_b\n    # do something\n  end\n\n  def animal_helper_c\n    # do something\n  end\n\n  # add new method for YellowCat\n  def yellow_cat_helper\n    # do something\n  end\nend\n```\n\nMọi chuyện giờ vẫn ổn chứ? Không, bây giờ thì không ổn nữa rồi nó đã vi phạm nguyên tắc SOLID thứ 4, chữ \"I\" mà chúng ta đang xét.\n\nVì sao?\n\nVì class Animal đâu có cần method `yellow_cat_helper`, còn class YellowCat đâu có cần 3 method `animal_helper_a`, `animal_helper_b`, `animal_helper_c` này đâu?\n\nVậy mà chúng vẫn có thể sử dụng những method mà chúng vốn không cần, vì lý do ta viết chung tất cả method vào một module và include module vào từng class.\n\nY như ví dụ bên trên: Bạn cần trực nhật lớp 1A thôi mà, cô giáo bạn đưa cho bạn trùm chìa khoá của cả trường làm gì? Cầm thì nặng, mà nhỡ đâu bạn ~~tắt mắt~~ nghịch dại thì hậu quả khôn lường.\n\nVậy để không vi phạm nguyên tắc này ta có thể sửa lại mã nguồn như sau:\n\nClass Animal\n\n```ruby\nclass Animal\n  include AnimalHelper\n  # do something\nend\n```\n\nModule Animal\n\n```ruby\nmodule AnimalHelper\n  def animal_helper_a\n    # do something\n  end\n\n  def animal_helper_b\n    # do something\n  end\n\n  def animal_helper_c\n    # do something\n  end\nend\n```\n\nClass YellowCat\n\n```ruby\nclass YellowCat\n  include YellowCatHelper\n  # do something\nend\n```\n\nVà giờ ta tạo một module mới để YellowCat include\n\n```ruby\nmodule YellowCatHelper\n  def yellow_cat_helper\n    # do something\n  end\nend\n```\n\nOk, vậy là look good rồi :smile: Lúc này class Animal chỉ được include những method mà nó cần và class YellowCat cũng vậy.\n\n## 6. **D**ependency Inversion Principle\n\n![hoa](/images/dip.jpg)\n\nNguyên lý này được phát biểu như sau:\n\n> 1. High-level modules should not depend on low-level modules. Both should depend on abstractions.\n> 2. Abstractions should not depend upon details. Details should depend upon abstractions.\n\nDịch sát nghĩa sẽ là:\n\n> 1. Module cấp cao không nên phụ thuộc vào module cấp thấp hơn. Cả hai nên phụ thuộc vào abstractions.\n> 2. Abstractions không nên phụ thuộc vào details. Details nên phụ thuộc vào abstractions\n\nQuay trở lại ví dụ promotion ban đầu, giả sử ta viết mã nguồn như sau:\n\n```ruby\n# app/checkout.rb\nclass Checkout\n  def get_bill(cart)\n    PromotionTypeA.promotion_type_a(cart)\n  end\nend\n\n# app/promotion/promotion_type_a.rb\nclass PromotionTypeA\n  def self.promotion_type_a(cart)\n    # do something\n  end\nend\n```\n\nTrong đoạn mã nguồn trên đây, method get_bill trong class Checkout phụ thuộc vào class PromotionTypeA. Rõ ràng là như vậy, câu hỏi là nếu ta có PromotionTypeB, PromotionTypeC... Thì phải làm sao?\n\nChúng ta sẽ phải viết 3 method get_bill ứng với PromotionTypeA, PromotionTypeB và PromotionTypeC hay sao?\n\nĐó cũng là một cách, nhưng đó là cách đã vi phạm nguyên lý DIP, khi mà các module phụ thuộc lẫn nhau.\n\nĐể giải quyết vấn đề này ta có thể viết lại mã nguồn như sau:\n\n```ruby\n# app/checkout.rb\nclass Checkout\n  def get_bill(cart, PromotionType)\n    PromotionType.get_promotion(cart)\n  end\nend\n\n# app/promotion/promotion_type_a.rb\nclass PromotionTypeA\n  def self.get_promotion(cart)\n    # do something\n  end\nend\n\n# get_bill với PromotionTypeA\nCheckout.new.get_bill(cart, PromotionTypeA)\n\n# để viết thêm PromotionTypeB, ta viết thêm một class PromotionTypeB và truyền PromotionTypeB vào get_bill method.\n\n# app/promotion/promotion_type_a.rb\nclass PromotionTypeB\n  def self.get_promotion(cart)\n    # do something\n  end\nend\n\nCheckout.new.get_bill(cart, PromotionTypeB)\n```\n\n## Kết luận\n\nTrên đây là 1 cái nhìn tổng quan về hệ thống nguyên lý SOLID nổi tiếng, việc áp dụng nguyên lý này sẽ không chắc giúp mã nguồn bạn thành công, nhưng nó sẽ giảm thiểu rủi ro hơn là khi code bất chấp, lý thuyết chỉ là một phần nhỏ, nắm lý thuyết giúp chúng ta có cái nhìn tổng quát, trích rút lại thì thứ làm cho nguyên lý này có giá trị nằm ở kinh nghiệm sử dụng của nhà phát triển, không phải luôn luôn tuân thủ mọi quy tắc đã là tốt trong mọi trường hợp.\n\nNguồn tham khảo:\n\n[1] [https://en.wikipedia.org/wiki/SOLID](https://en.wikipedia.org/wiki/SOLID)\n","slug":"2019-05-17-nguyen-ly-solid-trong-code-ruby","published":1,"updated":"2019-12-06T15:39:12.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7sugc00215rrs5iab9mlp","content":"<h2 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h2><p>Cách đây một thời gian, tôi có làm một ứng dụng nhỏ với vỏn vẹn tổng cộng tầm 500 dòng code. Khi bắt đầu tôi đã mường tượng rằng đây chỉ là một chương trình đơn giản nên không cần phân chia gì cho tốn công sức màu mè. Vì vậy tôi chỉ code trên vài file nhất định.</p>\n<p>Một thời gian sau, tôi cần mở rộng thêm 1 vài chức năng nữa, rất tệ là lúc này tôi đã gần như quên luôn các logic mình đã làm trong đống code cũ, cắn răng đọc lại từng dòng, từng dòng, và tốn thời gian gấp 3 gấp 4 lần để hệ thống lại cho dễ hiểu hơn. Một bài học không phải cay đắng lắm cho tôi, nó chỉ tôi hiểu rằng việc cấu trúc và cách tiếp cận khi lập trình quan trọng đến thế nào.</p>\n<p>Phần lớn thời gian một ứng dụng trên tay dev là để maintain, vậy nên việc ngày hôm nay bạn làm nó ra sao ảnh hưởng rất lớn đến sau này. Đó là một phần lý do mà tôi phải tìm đường cách mạng qua SOLID và những mẫu design pattern, những thứ văn vở mà ngày xưa tôi rất ghét và thấy thừa thãi, nhưng giờ đây nó như một bầu trời chân lý sáng chói loé qua tim.</p>\n<h2 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h2><h2 id=\"1-Dinh-nghia-va-muc-tieu-su-dung\"><a href=\"#1-Dinh-nghia-va-muc-tieu-su-dung\" class=\"headerlink\" title=\"1. Định nghĩa và mục tiêu sử dụng\"></a>1. Định nghĩa và mục tiêu sử dụng</h2><p><img src=\"/images/solid.png\" alt=\"hoa\"></p>\n<p>Trước tiên, hãy xem SOLID là viết tắt của những cụm từ gì.</p>\n<p>:one: <strong>S</strong>ingle Responsibility Principle</p>\n<p>:two: <strong>O</strong>pen/Closed Principle</p>\n<p>:three: <strong>L</strong>iskov Substitution Principle</p>\n<p>:four: <strong>I</strong>nterface Segregation Principle</p>\n<p>:five: <strong>D</strong>ependency Inversion Principle</p>\n<p>Hàn lâm là vậy nhưng để dễ nhớ thì tôi gọi chúng ngắn gọn là: <strong>S</strong>ingle, <strong>O</strong>pen, <strong>L</strong>iskov, <strong>I</strong>nterface và <strong>D</strong>ependency.</p>\n<p>Về mục tiêu để cái nguyên lý này có mặt trên cõi đời, âu cũng là xuất phát từ nhu cầu làm ít hơn của con người, việc code không có hệ thống khiến các nhà phát triển tốn nhiều thời gian bảo trì và dễ phát sinh lỗi trong quá trình sử dụng.<br>Để giảm bớt gánh nặng này các nhà phát triển đã cô đọng lại một số khuôn khổ, cách thức lập trình mà dưới góc nhìn và kinh nghiệm của nhiều người, các khuôn khổ cách thức đó giúp cho việc bảo trì trở nên dễ dàng hơn, hệ thống ít phát sinh lỗi ngoài ý muốn hơn. Một trong số đó là hệ thống các nguyên tắc trong SOLID.</p>\n<p>Giả sử tôi phải xử lý một bài toán tính promotion cho một ứng dụng thương mại điện tử. Đây sẽ là ví dụ ta dùng đến trong các phần phía dưới. Giả sử cấu trúc dự án hiện tại như sau:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- app</span><br><span class=\"line\">  - signin.rb</span><br><span class=\"line\">  - signup.rb</span><br><span class=\"line\">  - checkout.rb</span><br></pre></td></tr></table></figure>\n\n<p>Trong đó signin chứa mã nguồn thực hiện chức năng đăng nhập, signup chứa mã thực hiện chức năng đăng ký và checkout chứa mã thực hiện chức năng thanh toán.</p>\n<h2 id=\"2-Single-Responsibility-Principle\"><a href=\"#2-Single-Responsibility-Principle\" class=\"headerlink\" title=\"2. Single Responsibility Principle\"></a>2. <strong>S</strong>ingle Responsibility Principle</h2><p><img src=\"/images/srp.jpg\" alt=\"hoa\"></p>\n<p>Nguyên lý này được phát biểu như sau:</p>\n<blockquote>\n<p>Every class should have a single responsibility, and that responsibility should be entirely encapsulated by the class.</p>\n</blockquote>\n<p>Điều cần quan tâm ở đây là single responsibility có thể hiểu là gì? Nghĩa của responsibility là ‘trách nhiệm’, vậy ‘trách nhiệm’ trong code là gì?</p>\n<p>Ta có thể hiểu nó đồng nghĩa với ‘chức năng’ hay không? Cứ giả sử như ta có thể hiểu nó là ‘chức năng’ vậy khi đó thì nguyên lý này có thể phát biểu lại thành như sau:</p>\n<blockquote>\n<p>Mỗi class nên chỉ mang một chức năng nhất định, và chức năng đó phải được đóng gói trong class này.</p>\n</blockquote>\n<p>Bây giờ thì đã dễ hiểu hơn nhiều, quay trở về ví dụ, chúng ta cần viết một chức năng tính promotion. Ta có thể  viết chức năng này vào đâu?</p>\n<p>Câu trả lời đơn giản nhất là chúng ta viết chức năng này luôn vào file checkout.rb, khi thực hiện chức năng thanh toán thì sử dụng luôn các method tính promotion trong đó. Mọi chuyện thật đơn giản phải không? Điều này có vi phạm nguyên tắc SRP không?</p>\n<p>Nếu tôi nói là không vi phạm? Diễn giải của tôi như sau: Trách nhiệm của cái module/class Checkout là thanh toán những mặt hàng bạn đã bỏ vào cart, vậy promotion cũng chỉ một step trong quá trình thanh toán, nên nếu tôi viết code promotion trong module/class Checkout thì tôi vi phạm nguyên tắc SRP chỗ nào?  Checkout vẫn đang làm đúng và duy nhất một ‘trách nhiệm’ đó là giúp thanh toán đơn hàng và promotion chỉ là phần phụ trợ cho quá trình đó hay nói cách khác promotion chỉ là một bước trong nhiều bước của quá trình thanh toán.</p>\n<p>Vậy tôi có sai khi nói vậy không? Bạn có thể chứng minh là tôi sai nguyên lý SRP được hay không?</p>\n<ol>\n<li><p>Tôi nghe nhiều người nói đây là nguyên tắc dễ nhất trong SOLID, theo tôi nó chỉ là nguyên tắc mà định nghĩa dễ học thuộc nhất mà thôi.</p>\n</li>\n<li><p>Responsibility thì hãy hiểu nó là responsibility (hay hiểu nó là đúng ngữ nghĩa là trách nhiệm). Không đánh đồng responsibility thành ‘chức năng’ như trên.</p>\n</li>\n<li><p>Nội dung nguyên lý chỉ có tính tương đối, nó phụ thuộc hoàn toàn vào cái mà bạn xem là một responsibility.</p>\n</li>\n</ol>\n<p>Để đánh giá đâu, cái gì là một responsibility thì có lẽ điều kiện cần là phải có đủ kinh nghiệm. Trở lại ví dụ, tôi có thể coi promotion là một responsibility riêng rẽ với chức năng thanh toán. Khi đó tổ chức code của tôi như sau:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- app</span><br><span class=\"line\">  - signin.rb</span><br><span class=\"line\">  - signup.rb</span><br><span class=\"line\">  - checkout.rb</span><br><span class=\"line\">  - promotion.rb</span><br></pre></td></tr></table></figure>\n\n<p>Như này đã phải là cách tốt nhất? Câu trả lời là tuỳ ngữ điệu hoàn cảnh, giả sử nếu chức năng promotion có nhiều rule khác nhau thì việc bỏ tất cả function tính promotion vào 1 file promotion.rb có vẻ không phải là một cách hay. Khi đó ta tổ chức lại như sau:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- app</span><br><span class=\"line\">  - signin.rb</span><br><span class=\"line\">  - signup.rb</span><br><span class=\"line\">  - checkout.rb</span><br><span class=\"line\">  - promotion</span><br><span class=\"line\">    - promotion_type_a.rb</span><br><span class=\"line\">    - promotion_type_b.rb</span><br><span class=\"line\">    - promotion_type_c.rb</span><br></pre></td></tr></table></figure>\n\n<p>Cách tổ chức này đã là tốt nhất hay chưa? câu trả lời là chưa chắc, mọi thứ lại phụ thuộc vào ngữ cảnh.<br>Nguyên lý SRP có thể sai hay đúng trong một số trường hợp là rất mập mờ, tuỳ theo cái mà nhà phát triển định nghĩa cho responsibility mà họ xây dựng.</p>\n<p>Note: Nhưng cuối cùng nguyên lý SRP cũng chỉ có một mục đích duy nhất để cấu trúc dự án dễ sửa đổi và bảo trì, vì vậy trong từng tình huống sẽ có những cách khác nhau để phân chia tổ chức mã nguồn, dựa vào chức năng, dựa vào yêu cầu khách hàng, dựa vào tiềm năng phát triển dự án…</p>\n<h2 id=\"3-Open-Closed-Principle\"><a href=\"#3-Open-Closed-Principle\" class=\"headerlink\" title=\"3. Open/Closed Principle\"></a>3. <strong>O</strong>pen/Closed Principle</h2><p><img src=\"/images/ocp.jpg\" alt=\"hoa\"></p>\n<p>Nguyên lý này được phát biểu như sau:</p>\n<blockquote>\n<p>One software entity (class/module) must be open for extension but closed for modification.</p>\n</blockquote>\n<p>Hiểu đơn giản:</p>\n<blockquote>\n<p>Một class/module cần phải có thể mở rộng, nhưng không/không nên sửa đổi nó.</p>\n</blockquote>\n<p>Vì sao nguyên lý này lại yêu cầu như vậy? việc tôi muốn mở rộng hay tôi sửa đổi một cái class thì có ảnh hưởng gì đâu mà căng nhỉ?</p>\n<p>Đúng là như vậy, trong phần lớn quá trình phát triển những ứng dụng cá nhân đơn giản thì việc chúng ta có thêm, xoá, sửa hay mở rộng một class/module đa phần đều không mang lại hậu quả gì ngoài ý muốn.</p>\n<p>Nhưng ngữ cảnh mà nguyên lý này hướng tới là những ứng dụng thực sự trong cuộc sống, ở đó những ứng dụng này sẽ lớn, rối rắm và có business không hề đơn giản. Một điểm nữa là dự án đó khi tới tay bạn đã có thể trải qua 5, 7 lần đổi team phát triển và những gì bạn thấy là thành quả của cả một quá trình phát triển tính năng và maintain trong đơn vị tính bằng năm.</p>\n<p>Liệu bạn có nắm hết được flow hoạt động của từng đoạn mã, từng file từng class hay không? Nhất định là không rồi.</p>\n<p>Đó chính là lý do mà nguyên lý OCP ra đời, khi hệ thống phức tạp và bạn không nắm được hết tất cả những gì sẽ xảy ra sau khi bạn thay đổi mã nguồn tại một class/module. Hãy đừng thay đổi, để tránh làm ảnh hưởng đến một phần logic tiềm tàng nào đó. Thay vào đó hãy mở rộng class/module đó, mở rộng để bổ sung tính năng bạn cần mà còn giúp không ảnh hưởng đến những phần code cũ không sai lệch về logic luận lý (Vì nó có thể vẫn đang sử dụng chức năng cũ, liệu bạn có cover được hết để sửa đổi tất cả các trường hợp có thể xảy ra hay không?).</p>\n<blockquote>\n<p>Vì vậy hãy ưu tiên mở rộng một class/module khi cần phát triển thêm hay thay đổi tính năng, hạn chế và hãy thật cẩn thận khi cần sửa đổi mã nguồn có sẵn (chính là sửa đổi class/module).</p>\n</blockquote>\n<p>Mục tiêu của nguyên lý là vậy, rất dễ hiểu, hãy cùng thảo luận về một ví dụ trước khi sang phần tiếp theo:</p>\n<p>Lại quay trở lại ví dụ về bài toán promotion, giả sử tôi lự chọn cấu trúc chương trình như sau:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- app</span><br><span class=\"line\">  - signin.rb</span><br><span class=\"line\">  - signup.rb</span><br><span class=\"line\">  - checkout.rb</span><br><span class=\"line\">  - promotion.rb</span><br></pre></td></tr></table></figure>\n\n<p>Như đã trình bày ở trên, cấu trúc như này về lý thuyết thì cũng chả ai bảo là tôi vi phạm nguyên tắc số 1 SRP được. Giả sử nội dung của file promotion.rb như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promotion</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">promotion_type_a</span></span></span><br><span class=\"line\">    <span class=\"comment\"># implement rule promotion type a</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">promotion_type_b</span></span></span><br><span class=\"line\">    <span class=\"comment\"># implement rule promotion type b</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Vậy bây giờ khi tôi muốn thêm một rule tính promotion mới, thì tôi sẽ phải sửa đổi file promotion.rb này, về nguyên tắc nó đã vi phạm nguyên lý số 2 OCP (mở để mở rộng chứ không phải để sửa đổi).</p>\n<p>Để khắc phục ta có thể cấu trúc lại mã nguồn như sau:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- app</span><br><span class=\"line\">  - signin.rb</span><br><span class=\"line\">  - signup.rb</span><br><span class=\"line\">  - checkout.rb</span><br><span class=\"line\">  - promotion</span><br><span class=\"line\">    - promotion.rb</span><br><span class=\"line\">    - promotion_type_a.rb</span><br><span class=\"line\">    - promotion_type_b.rb</span><br><span class=\"line\">    - promotion_type_c.rb</span><br></pre></td></tr></table></figure>\n\n<p>Và khi này, khi tôi cần thêm mới 1 rule promotion, tôi sẽ tạo một file mới trong thư mục promotion, với nội dung kế thừa từ class Promotion.</p>\n<p>Ví dụ bổ sung thêm rule promotion_type_x.rb với nội dung:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PromotionTypeX</span> &lt; Promotion</span></span><br><span class=\"line\">  <span class=\"comment\"># do something</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-Liskov-Substitution-Principle\"><a href=\"#4-Liskov-Substitution-Principle\" class=\"headerlink\" title=\"4. Liskov Substitution Principle\"></a>4. <strong>L</strong>iskov Substitution Principle</h2><p><img src=\"/images/lsp.jpg\" alt=\"hoa\"></p>\n<p>Nguyên lý này được phát biểu như sau:</p>\n<blockquote>\n<p>If S is a subtype of T, then objects of type T may be replaced with objects of type S (i.e., objects of type S may substitute objects of type T) without altering any of the desirable properties of that program (correctness, task performed, etc.).</p>\n</blockquote>\n<p>Hiểu đơn giản là:</p>\n<blockquote>\n<p>Bạn có class A là con của class B, thì instance của class A phải thay thế được cho instance của class B trong mã nguồn mà không gây ra sai xót nào (không lỗi và không sai ngữ nghĩa).</p>\n</blockquote>\n<p>Một ví dụ đơn giản như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">animal_hello</span></span></span><br><span class=\"line\">    puts <span class=\"string\">\"Animal say hello\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> &lt; Animal</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cat_hello</span></span></span><br><span class=\"line\">    puts <span class=\"string\">\"Cat say hello\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Đoạn mã trên là một đoạn mã hợp lệ với nguyên lý Liskov vì:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp = Animal.new</span><br><span class=\"line\">temp.animal_hello</span><br><span class=\"line\"><span class=\"comment\"># kết quả trả về là: \"Animal say hello\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">temp = Cat.new</span><br><span class=\"line\">temp.animal_hello</span><br><span class=\"line\"><span class=\"comment\"># kết quả trả về vẫn là: \"Animal say hello\"</span></span><br></pre></td></tr></table></figure>\n\n<p>Như bạn thấy, kết quả trả về không thay đổi khi ta dùng instance của class Cat thay cho instance class cha của nó là Animal, và vậy là nguyên lý Liskov được bảo toàn tính đúng đắn của nó.</p>\n<p>Hãy thử một đoạn mã nguồn khác như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">animal_hello</span></span></span><br><span class=\"line\">    puts <span class=\"string\">\"Animal say hello\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> &lt; Animal</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">animal_hello</span></span></span><br><span class=\"line\">    puts <span class=\"string\">\"Cat say hello\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Đây là đoạn mã vi phạm nguyên tắc của Liskov, khi này ta có:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp = Animal.new</span><br><span class=\"line\">temp.animal_hello</span><br><span class=\"line\"><span class=\"comment\"># kết quả trả về là: \"Animal say hello\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">temp = Cat.new</span><br><span class=\"line\">temp.animal_hello</span><br><span class=\"line\"><span class=\"comment\"># kết quả trả về là: \"Cat say hello\"</span></span><br></pre></td></tr></table></figure>\n\n<p>Ta có thể thấy, instance của class Cat khi gọi tới method animal_hello đã không còn trả về kết quả tương tự như một instance Animal nữa rồi, vì lý do ở class Cat, class này đã override lại phương thức animal_hello, và từ đó dẫn tới vi phạm nguyên tắc Liskov.</p>\n<h2 id=\"5-Interface-Segregation-Principle\"><a href=\"#5-Interface-Segregation-Principle\" class=\"headerlink\" title=\"5. Interface Segregation Principle\"></a>5. <strong>I</strong>nterface Segregation Principle</h2><p><img src=\"/images/isp.png\" alt=\"hoa\"></p>\n<p>Nguyên lý này được phát biểu như sau:</p>\n<blockquote>\n<p>No client should be forced to depend on methods it does not use.</p>\n</blockquote>\n<p>Hiểu đơn giản là:</p>\n<blockquote>\n<p>Nếu bạn là một đối tượng nào đó trong mã nguồn, hãy đảm bảo là bạn phải/chỉ làm những công việc mà bạn phải/có thể làm. Không trao cho bạn những khả năng mà bạn không cần.</p>\n</blockquote>\n<p>Thử một ví dụ đơn giản, bạn là một học sinh được giao nhiệm vụ trực nhật lớp, cô giáo bạn phải đảm bảo rằng bạn chỉ được trao chìa khoá mở cửa phòng học của bạn, chứ không trao cho bạn những chìa khoá khác (như chìa khoá các lớp học khác, phòng tin học, phòng giáo viên…), đấy là những công việc của những cá nhân khác.</p>\n<p>Nếu bạn được trao những công việc của người khác, có thể bạn sẽ tạo ra những sai lầm không thể sửa đổi được. Vì vậy hãy làm đúng công việc của mình.</p>\n<p>Hãy bắt đầu với một ví dụ:</p>\n<p>Ta có một class Animal.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span></span><br><span class=\"line\">  <span class=\"keyword\">include</span> AnimalHelper</span><br><span class=\"line\">  <span class=\"comment\"># do something</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Class Animal bên trên include module dưới đây.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">AnimalHelper</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">animal_helper_a</span></span></span><br><span class=\"line\">    <span class=\"comment\"># do something</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">animal_helper_b</span></span></span><br><span class=\"line\">    <span class=\"comment\"># do something</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">animal_helper_c</span></span></span><br><span class=\"line\">    <span class=\"comment\"># do something</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Mọi chuyện ổn chứ? Rất ổn, 3 method hiện có trong module AnimalHelper là 3 method hỗ trợ cho class Animal.</p>\n<p>Vậy bây giờ tôi có thêm một class nữa như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowCat</span></span></span><br><span class=\"line\">  <span class=\"comment\"># do something</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Class này cần một phương thức support tên là <code>yellow_cat_helper</code>, tôi sẽ viết thêm method này vào module AnimalHelper và include module AnimalHelper vào class YellowCat vậy là đúng và đủ yêu cầu. Khi này module AnimalHelper và class YellowCat sẽ trở thành như sau:</p>\n<p>Class YellowCat</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowCat</span></span></span><br><span class=\"line\">  <span class=\"keyword\">include</span> AnimalHelper</span><br><span class=\"line\">  <span class=\"comment\"># do something</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Module AnimalHelper</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">AnimalHelper</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">animal_helper_a</span></span></span><br><span class=\"line\">    <span class=\"comment\"># do something</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">animal_helper_b</span></span></span><br><span class=\"line\">    <span class=\"comment\"># do something</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">animal_helper_c</span></span></span><br><span class=\"line\">    <span class=\"comment\"># do something</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># add new method for YellowCat</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">yellow_cat_helper</span></span></span><br><span class=\"line\">    <span class=\"comment\"># do something</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Mọi chuyện giờ vẫn ổn chứ? Không, bây giờ thì không ổn nữa rồi nó đã vi phạm nguyên tắc SOLID thứ 4, chữ “I” mà chúng ta đang xét.</p>\n<p>Vì sao?</p>\n<p>Vì class Animal đâu có cần method <code>yellow_cat_helper</code>, còn class YellowCat đâu có cần 3 method <code>animal_helper_a</code>, <code>animal_helper_b</code>, <code>animal_helper_c</code> này đâu?</p>\n<p>Vậy mà chúng vẫn có thể sử dụng những method mà chúng vốn không cần, vì lý do ta viết chung tất cả method vào một module và include module vào từng class.</p>\n<p>Y như ví dụ bên trên: Bạn cần trực nhật lớp 1A thôi mà, cô giáo bạn đưa cho bạn trùm chìa khoá của cả trường làm gì? Cầm thì nặng, mà nhỡ đâu bạn <del>tắt mắt</del> nghịch dại thì hậu quả khôn lường.</p>\n<p>Vậy để không vi phạm nguyên tắc này ta có thể sửa lại mã nguồn như sau:</p>\n<p>Class Animal</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span></span><br><span class=\"line\">  <span class=\"keyword\">include</span> AnimalHelper</span><br><span class=\"line\">  <span class=\"comment\"># do something</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Module Animal</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">AnimalHelper</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">animal_helper_a</span></span></span><br><span class=\"line\">    <span class=\"comment\"># do something</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">animal_helper_b</span></span></span><br><span class=\"line\">    <span class=\"comment\"># do something</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">animal_helper_c</span></span></span><br><span class=\"line\">    <span class=\"comment\"># do something</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Class YellowCat</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowCat</span></span></span><br><span class=\"line\">  <span class=\"keyword\">include</span> YellowCatHelper</span><br><span class=\"line\">  <span class=\"comment\"># do something</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Và giờ ta tạo một module mới để YellowCat include</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">YellowCatHelper</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">yellow_cat_helper</span></span></span><br><span class=\"line\">    <span class=\"comment\"># do something</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Ok, vậy là look good rồi :smile: Lúc này class Animal chỉ được include những method mà nó cần và class YellowCat cũng vậy.</p>\n<h2 id=\"6-Dependency-Inversion-Principle\"><a href=\"#6-Dependency-Inversion-Principle\" class=\"headerlink\" title=\"6. Dependency Inversion Principle\"></a>6. <strong>D</strong>ependency Inversion Principle</h2><p><img src=\"/images/dip.jpg\" alt=\"hoa\"></p>\n<p>Nguyên lý này được phát biểu như sau:</p>\n<blockquote>\n<ol>\n<li>High-level modules should not depend on low-level modules. Both should depend on abstractions.</li>\n<li>Abstractions should not depend upon details. Details should depend upon abstractions.</li>\n</ol>\n</blockquote>\n<p>Dịch sát nghĩa sẽ là:</p>\n<blockquote>\n<ol>\n<li>Module cấp cao không nên phụ thuộc vào module cấp thấp hơn. Cả hai nên phụ thuộc vào abstractions.</li>\n<li>Abstractions không nên phụ thuộc vào details. Details nên phụ thuộc vào abstractions</li>\n</ol>\n</blockquote>\n<p>Quay trở lại ví dụ promotion ban đầu, giả sử ta viết mã nguồn như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># app/checkout.rb</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Checkout</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_bill</span><span class=\"params\">(cart)</span></span></span><br><span class=\"line\">    PromotionTypeA.promotion_type_a(cart)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># app/promotion/promotion_type_a.rb</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PromotionTypeA</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">promotion_type_a</span><span class=\"params\">(cart)</span></span></span><br><span class=\"line\">    <span class=\"comment\"># do something</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Trong đoạn mã nguồn trên đây, method get_bill trong class Checkout phụ thuộc vào class PromotionTypeA. Rõ ràng là như vậy, câu hỏi là nếu ta có PromotionTypeB, PromotionTypeC… Thì phải làm sao?</p>\n<p>Chúng ta sẽ phải viết 3 method get_bill ứng với PromotionTypeA, PromotionTypeB và PromotionTypeC hay sao?</p>\n<p>Đó cũng là một cách, nhưng đó là cách đã vi phạm nguyên lý DIP, khi mà các module phụ thuộc lẫn nhau.</p>\n<p>Để giải quyết vấn đề này ta có thể viết lại mã nguồn như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># app/checkout.rb</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Checkout</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_bill</span><span class=\"params\">(cart, PromotionType)</span></span></span><br><span class=\"line\">    PromotionType.get_promotion(cart)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># app/promotion/promotion_type_a.rb</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PromotionTypeA</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">get_promotion</span><span class=\"params\">(cart)</span></span></span><br><span class=\"line\">    <span class=\"comment\"># do something</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># get_bill với PromotionTypeA</span></span><br><span class=\"line\">Checkout.new.get_bill(cart, PromotionTypeA)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># để viết thêm PromotionTypeB, ta viết thêm một class PromotionTypeB và truyền PromotionTypeB vào get_bill method.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># app/promotion/promotion_type_a.rb</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PromotionTypeB</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">get_promotion</span><span class=\"params\">(cart)</span></span></span><br><span class=\"line\">    <span class=\"comment\"># do something</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">Checkout.new.get_bill(cart, PromotionTypeB)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h2><p>Trên đây là 1 cái nhìn tổng quan về hệ thống nguyên lý SOLID nổi tiếng, việc áp dụng nguyên lý này sẽ không chắc giúp mã nguồn bạn thành công, nhưng nó sẽ giảm thiểu rủi ro hơn là khi code bất chấp, lý thuyết chỉ là một phần nhỏ, nắm lý thuyết giúp chúng ta có cái nhìn tổng quát, trích rút lại thì thứ làm cho nguyên lý này có giá trị nằm ở kinh nghiệm sử dụng của nhà phát triển, không phải luôn luôn tuân thủ mọi quy tắc đã là tốt trong mọi trường hợp.</p>\n<p>Nguồn tham khảo:</p>\n<p>[1] <a href=\"https://en.wikipedia.org/wiki/SOLID\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/SOLID</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h2><p>Cách đây một thời gian, tôi có làm một ứng dụng nhỏ với vỏn vẹn tổng cộng tầm 500 dòng code. Khi bắt đầu tôi đã mường tượng rằng đây chỉ là một chương trình đơn giản nên không cần phân chia gì cho tốn công sức màu mè. Vì vậy tôi chỉ code trên vài file nhất định.</p>\n<p>Một thời gian sau, tôi cần mở rộng thêm 1 vài chức năng nữa, rất tệ là lúc này tôi đã gần như quên luôn các logic mình đã làm trong đống code cũ, cắn răng đọc lại từng dòng, từng dòng, và tốn thời gian gấp 3 gấp 4 lần để hệ thống lại cho dễ hiểu hơn. Một bài học không phải cay đắng lắm cho tôi, nó chỉ tôi hiểu rằng việc cấu trúc và cách tiếp cận khi lập trình quan trọng đến thế nào.</p>\n<p>Phần lớn thời gian một ứng dụng trên tay dev là để maintain, vậy nên việc ngày hôm nay bạn làm nó ra sao ảnh hưởng rất lớn đến sau này. Đó là một phần lý do mà tôi phải tìm đường cách mạng qua SOLID và những mẫu design pattern, những thứ văn vở mà ngày xưa tôi rất ghét và thấy thừa thãi, nhưng giờ đây nó như một bầu trời chân lý sáng chói loé qua tim.</p>\n<h2 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h2><h2 id=\"1-Dinh-nghia-va-muc-tieu-su-dung\"><a href=\"#1-Dinh-nghia-va-muc-tieu-su-dung\" class=\"headerlink\" title=\"1. Định nghĩa và mục tiêu sử dụng\"></a>1. Định nghĩa và mục tiêu sử dụng</h2><p><img src=\"/images/solid.png\" alt=\"hoa\"></p>\n<p>Trước tiên, hãy xem SOLID là viết tắt của những cụm từ gì.</p>\n<p>:one: <strong>S</strong>ingle Responsibility Principle</p>\n<p>:two: <strong>O</strong>pen/Closed Principle</p>\n<p>:three: <strong>L</strong>iskov Substitution Principle</p>\n<p>:four: <strong>I</strong>nterface Segregation Principle</p>\n<p>:five: <strong>D</strong>ependency Inversion Principle</p>\n<p>Hàn lâm là vậy nhưng để dễ nhớ thì tôi gọi chúng ngắn gọn là: <strong>S</strong>ingle, <strong>O</strong>pen, <strong>L</strong>iskov, <strong>I</strong>nterface và <strong>D</strong>ependency.</p>\n<p>Về mục tiêu để cái nguyên lý này có mặt trên cõi đời, âu cũng là xuất phát từ nhu cầu làm ít hơn của con người, việc code không có hệ thống khiến các nhà phát triển tốn nhiều thời gian bảo trì và dễ phát sinh lỗi trong quá trình sử dụng.<br>Để giảm bớt gánh nặng này các nhà phát triển đã cô đọng lại một số khuôn khổ, cách thức lập trình mà dưới góc nhìn và kinh nghiệm của nhiều người, các khuôn khổ cách thức đó giúp cho việc bảo trì trở nên dễ dàng hơn, hệ thống ít phát sinh lỗi ngoài ý muốn hơn. Một trong số đó là hệ thống các nguyên tắc trong SOLID.</p>\n<p>Giả sử tôi phải xử lý một bài toán tính promotion cho một ứng dụng thương mại điện tử. Đây sẽ là ví dụ ta dùng đến trong các phần phía dưới. Giả sử cấu trúc dự án hiện tại như sau:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- app</span><br><span class=\"line\">  - signin.rb</span><br><span class=\"line\">  - signup.rb</span><br><span class=\"line\">  - checkout.rb</span><br></pre></td></tr></table></figure>\n\n<p>Trong đó signin chứa mã nguồn thực hiện chức năng đăng nhập, signup chứa mã thực hiện chức năng đăng ký và checkout chứa mã thực hiện chức năng thanh toán.</p>\n<h2 id=\"2-Single-Responsibility-Principle\"><a href=\"#2-Single-Responsibility-Principle\" class=\"headerlink\" title=\"2. Single Responsibility Principle\"></a>2. <strong>S</strong>ingle Responsibility Principle</h2><p><img src=\"/images/srp.jpg\" alt=\"hoa\"></p>\n<p>Nguyên lý này được phát biểu như sau:</p>\n<blockquote>\n<p>Every class should have a single responsibility, and that responsibility should be entirely encapsulated by the class.</p>\n</blockquote>\n<p>Điều cần quan tâm ở đây là single responsibility có thể hiểu là gì? Nghĩa của responsibility là ‘trách nhiệm’, vậy ‘trách nhiệm’ trong code là gì?</p>\n<p>Ta có thể hiểu nó đồng nghĩa với ‘chức năng’ hay không? Cứ giả sử như ta có thể hiểu nó là ‘chức năng’ vậy khi đó thì nguyên lý này có thể phát biểu lại thành như sau:</p>\n<blockquote>\n<p>Mỗi class nên chỉ mang một chức năng nhất định, và chức năng đó phải được đóng gói trong class này.</p>\n</blockquote>\n<p>Bây giờ thì đã dễ hiểu hơn nhiều, quay trở về ví dụ, chúng ta cần viết một chức năng tính promotion. Ta có thể  viết chức năng này vào đâu?</p>\n<p>Câu trả lời đơn giản nhất là chúng ta viết chức năng này luôn vào file checkout.rb, khi thực hiện chức năng thanh toán thì sử dụng luôn các method tính promotion trong đó. Mọi chuyện thật đơn giản phải không? Điều này có vi phạm nguyên tắc SRP không?</p>\n<p>Nếu tôi nói là không vi phạm? Diễn giải của tôi như sau: Trách nhiệm của cái module/class Checkout là thanh toán những mặt hàng bạn đã bỏ vào cart, vậy promotion cũng chỉ một step trong quá trình thanh toán, nên nếu tôi viết code promotion trong module/class Checkout thì tôi vi phạm nguyên tắc SRP chỗ nào?  Checkout vẫn đang làm đúng và duy nhất một ‘trách nhiệm’ đó là giúp thanh toán đơn hàng và promotion chỉ là phần phụ trợ cho quá trình đó hay nói cách khác promotion chỉ là một bước trong nhiều bước của quá trình thanh toán.</p>\n<p>Vậy tôi có sai khi nói vậy không? Bạn có thể chứng minh là tôi sai nguyên lý SRP được hay không?</p>\n<ol>\n<li><p>Tôi nghe nhiều người nói đây là nguyên tắc dễ nhất trong SOLID, theo tôi nó chỉ là nguyên tắc mà định nghĩa dễ học thuộc nhất mà thôi.</p>\n</li>\n<li><p>Responsibility thì hãy hiểu nó là responsibility (hay hiểu nó là đúng ngữ nghĩa là trách nhiệm). Không đánh đồng responsibility thành ‘chức năng’ như trên.</p>\n</li>\n<li><p>Nội dung nguyên lý chỉ có tính tương đối, nó phụ thuộc hoàn toàn vào cái mà bạn xem là một responsibility.</p>\n</li>\n</ol>\n<p>Để đánh giá đâu, cái gì là một responsibility thì có lẽ điều kiện cần là phải có đủ kinh nghiệm. Trở lại ví dụ, tôi có thể coi promotion là một responsibility riêng rẽ với chức năng thanh toán. Khi đó tổ chức code của tôi như sau:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- app</span><br><span class=\"line\">  - signin.rb</span><br><span class=\"line\">  - signup.rb</span><br><span class=\"line\">  - checkout.rb</span><br><span class=\"line\">  - promotion.rb</span><br></pre></td></tr></table></figure>\n\n<p>Như này đã phải là cách tốt nhất? Câu trả lời là tuỳ ngữ điệu hoàn cảnh, giả sử nếu chức năng promotion có nhiều rule khác nhau thì việc bỏ tất cả function tính promotion vào 1 file promotion.rb có vẻ không phải là một cách hay. Khi đó ta tổ chức lại như sau:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- app</span><br><span class=\"line\">  - signin.rb</span><br><span class=\"line\">  - signup.rb</span><br><span class=\"line\">  - checkout.rb</span><br><span class=\"line\">  - promotion</span><br><span class=\"line\">    - promotion_type_a.rb</span><br><span class=\"line\">    - promotion_type_b.rb</span><br><span class=\"line\">    - promotion_type_c.rb</span><br></pre></td></tr></table></figure>\n\n<p>Cách tổ chức này đã là tốt nhất hay chưa? câu trả lời là chưa chắc, mọi thứ lại phụ thuộc vào ngữ cảnh.<br>Nguyên lý SRP có thể sai hay đúng trong một số trường hợp là rất mập mờ, tuỳ theo cái mà nhà phát triển định nghĩa cho responsibility mà họ xây dựng.</p>\n<p>Note: Nhưng cuối cùng nguyên lý SRP cũng chỉ có một mục đích duy nhất để cấu trúc dự án dễ sửa đổi và bảo trì, vì vậy trong từng tình huống sẽ có những cách khác nhau để phân chia tổ chức mã nguồn, dựa vào chức năng, dựa vào yêu cầu khách hàng, dựa vào tiềm năng phát triển dự án…</p>\n<h2 id=\"3-Open-Closed-Principle\"><a href=\"#3-Open-Closed-Principle\" class=\"headerlink\" title=\"3. Open/Closed Principle\"></a>3. <strong>O</strong>pen/Closed Principle</h2><p><img src=\"/images/ocp.jpg\" alt=\"hoa\"></p>\n<p>Nguyên lý này được phát biểu như sau:</p>\n<blockquote>\n<p>One software entity (class/module) must be open for extension but closed for modification.</p>\n</blockquote>\n<p>Hiểu đơn giản:</p>\n<blockquote>\n<p>Một class/module cần phải có thể mở rộng, nhưng không/không nên sửa đổi nó.</p>\n</blockquote>\n<p>Vì sao nguyên lý này lại yêu cầu như vậy? việc tôi muốn mở rộng hay tôi sửa đổi một cái class thì có ảnh hưởng gì đâu mà căng nhỉ?</p>\n<p>Đúng là như vậy, trong phần lớn quá trình phát triển những ứng dụng cá nhân đơn giản thì việc chúng ta có thêm, xoá, sửa hay mở rộng một class/module đa phần đều không mang lại hậu quả gì ngoài ý muốn.</p>\n<p>Nhưng ngữ cảnh mà nguyên lý này hướng tới là những ứng dụng thực sự trong cuộc sống, ở đó những ứng dụng này sẽ lớn, rối rắm và có business không hề đơn giản. Một điểm nữa là dự án đó khi tới tay bạn đã có thể trải qua 5, 7 lần đổi team phát triển và những gì bạn thấy là thành quả của cả một quá trình phát triển tính năng và maintain trong đơn vị tính bằng năm.</p>\n<p>Liệu bạn có nắm hết được flow hoạt động của từng đoạn mã, từng file từng class hay không? Nhất định là không rồi.</p>\n<p>Đó chính là lý do mà nguyên lý OCP ra đời, khi hệ thống phức tạp và bạn không nắm được hết tất cả những gì sẽ xảy ra sau khi bạn thay đổi mã nguồn tại một class/module. Hãy đừng thay đổi, để tránh làm ảnh hưởng đến một phần logic tiềm tàng nào đó. Thay vào đó hãy mở rộng class/module đó, mở rộng để bổ sung tính năng bạn cần mà còn giúp không ảnh hưởng đến những phần code cũ không sai lệch về logic luận lý (Vì nó có thể vẫn đang sử dụng chức năng cũ, liệu bạn có cover được hết để sửa đổi tất cả các trường hợp có thể xảy ra hay không?).</p>\n<blockquote>\n<p>Vì vậy hãy ưu tiên mở rộng một class/module khi cần phát triển thêm hay thay đổi tính năng, hạn chế và hãy thật cẩn thận khi cần sửa đổi mã nguồn có sẵn (chính là sửa đổi class/module).</p>\n</blockquote>\n<p>Mục tiêu của nguyên lý là vậy, rất dễ hiểu, hãy cùng thảo luận về một ví dụ trước khi sang phần tiếp theo:</p>\n<p>Lại quay trở lại ví dụ về bài toán promotion, giả sử tôi lự chọn cấu trúc chương trình như sau:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- app</span><br><span class=\"line\">  - signin.rb</span><br><span class=\"line\">  - signup.rb</span><br><span class=\"line\">  - checkout.rb</span><br><span class=\"line\">  - promotion.rb</span><br></pre></td></tr></table></figure>\n\n<p>Như đã trình bày ở trên, cấu trúc như này về lý thuyết thì cũng chả ai bảo là tôi vi phạm nguyên tắc số 1 SRP được. Giả sử nội dung của file promotion.rb như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promotion</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">promotion_type_a</span></span></span><br><span class=\"line\">    <span class=\"comment\"># implement rule promotion type a</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">promotion_type_b</span></span></span><br><span class=\"line\">    <span class=\"comment\"># implement rule promotion type b</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Vậy bây giờ khi tôi muốn thêm một rule tính promotion mới, thì tôi sẽ phải sửa đổi file promotion.rb này, về nguyên tắc nó đã vi phạm nguyên lý số 2 OCP (mở để mở rộng chứ không phải để sửa đổi).</p>\n<p>Để khắc phục ta có thể cấu trúc lại mã nguồn như sau:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- app</span><br><span class=\"line\">  - signin.rb</span><br><span class=\"line\">  - signup.rb</span><br><span class=\"line\">  - checkout.rb</span><br><span class=\"line\">  - promotion</span><br><span class=\"line\">    - promotion.rb</span><br><span class=\"line\">    - promotion_type_a.rb</span><br><span class=\"line\">    - promotion_type_b.rb</span><br><span class=\"line\">    - promotion_type_c.rb</span><br></pre></td></tr></table></figure>\n\n<p>Và khi này, khi tôi cần thêm mới 1 rule promotion, tôi sẽ tạo một file mới trong thư mục promotion, với nội dung kế thừa từ class Promotion.</p>\n<p>Ví dụ bổ sung thêm rule promotion_type_x.rb với nội dung:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PromotionTypeX</span> &lt; Promotion</span></span><br><span class=\"line\">  <span class=\"comment\"># do something</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-Liskov-Substitution-Principle\"><a href=\"#4-Liskov-Substitution-Principle\" class=\"headerlink\" title=\"4. Liskov Substitution Principle\"></a>4. <strong>L</strong>iskov Substitution Principle</h2><p><img src=\"/images/lsp.jpg\" alt=\"hoa\"></p>\n<p>Nguyên lý này được phát biểu như sau:</p>\n<blockquote>\n<p>If S is a subtype of T, then objects of type T may be replaced with objects of type S (i.e., objects of type S may substitute objects of type T) without altering any of the desirable properties of that program (correctness, task performed, etc.).</p>\n</blockquote>\n<p>Hiểu đơn giản là:</p>\n<blockquote>\n<p>Bạn có class A là con của class B, thì instance của class A phải thay thế được cho instance của class B trong mã nguồn mà không gây ra sai xót nào (không lỗi và không sai ngữ nghĩa).</p>\n</blockquote>\n<p>Một ví dụ đơn giản như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">animal_hello</span></span></span><br><span class=\"line\">    puts <span class=\"string\">\"Animal say hello\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> &lt; Animal</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cat_hello</span></span></span><br><span class=\"line\">    puts <span class=\"string\">\"Cat say hello\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Đoạn mã trên là một đoạn mã hợp lệ với nguyên lý Liskov vì:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp = Animal.new</span><br><span class=\"line\">temp.animal_hello</span><br><span class=\"line\"><span class=\"comment\"># kết quả trả về là: \"Animal say hello\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">temp = Cat.new</span><br><span class=\"line\">temp.animal_hello</span><br><span class=\"line\"><span class=\"comment\"># kết quả trả về vẫn là: \"Animal say hello\"</span></span><br></pre></td></tr></table></figure>\n\n<p>Như bạn thấy, kết quả trả về không thay đổi khi ta dùng instance của class Cat thay cho instance class cha của nó là Animal, và vậy là nguyên lý Liskov được bảo toàn tính đúng đắn của nó.</p>\n<p>Hãy thử một đoạn mã nguồn khác như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">animal_hello</span></span></span><br><span class=\"line\">    puts <span class=\"string\">\"Animal say hello\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> &lt; Animal</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">animal_hello</span></span></span><br><span class=\"line\">    puts <span class=\"string\">\"Cat say hello\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Đây là đoạn mã vi phạm nguyên tắc của Liskov, khi này ta có:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp = Animal.new</span><br><span class=\"line\">temp.animal_hello</span><br><span class=\"line\"><span class=\"comment\"># kết quả trả về là: \"Animal say hello\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">temp = Cat.new</span><br><span class=\"line\">temp.animal_hello</span><br><span class=\"line\"><span class=\"comment\"># kết quả trả về là: \"Cat say hello\"</span></span><br></pre></td></tr></table></figure>\n\n<p>Ta có thể thấy, instance của class Cat khi gọi tới method animal_hello đã không còn trả về kết quả tương tự như một instance Animal nữa rồi, vì lý do ở class Cat, class này đã override lại phương thức animal_hello, và từ đó dẫn tới vi phạm nguyên tắc Liskov.</p>\n<h2 id=\"5-Interface-Segregation-Principle\"><a href=\"#5-Interface-Segregation-Principle\" class=\"headerlink\" title=\"5. Interface Segregation Principle\"></a>5. <strong>I</strong>nterface Segregation Principle</h2><p><img src=\"/images/isp.png\" alt=\"hoa\"></p>\n<p>Nguyên lý này được phát biểu như sau:</p>\n<blockquote>\n<p>No client should be forced to depend on methods it does not use.</p>\n</blockquote>\n<p>Hiểu đơn giản là:</p>\n<blockquote>\n<p>Nếu bạn là một đối tượng nào đó trong mã nguồn, hãy đảm bảo là bạn phải/chỉ làm những công việc mà bạn phải/có thể làm. Không trao cho bạn những khả năng mà bạn không cần.</p>\n</blockquote>\n<p>Thử một ví dụ đơn giản, bạn là một học sinh được giao nhiệm vụ trực nhật lớp, cô giáo bạn phải đảm bảo rằng bạn chỉ được trao chìa khoá mở cửa phòng học của bạn, chứ không trao cho bạn những chìa khoá khác (như chìa khoá các lớp học khác, phòng tin học, phòng giáo viên…), đấy là những công việc của những cá nhân khác.</p>\n<p>Nếu bạn được trao những công việc của người khác, có thể bạn sẽ tạo ra những sai lầm không thể sửa đổi được. Vì vậy hãy làm đúng công việc của mình.</p>\n<p>Hãy bắt đầu với một ví dụ:</p>\n<p>Ta có một class Animal.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span></span><br><span class=\"line\">  <span class=\"keyword\">include</span> AnimalHelper</span><br><span class=\"line\">  <span class=\"comment\"># do something</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Class Animal bên trên include module dưới đây.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">AnimalHelper</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">animal_helper_a</span></span></span><br><span class=\"line\">    <span class=\"comment\"># do something</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">animal_helper_b</span></span></span><br><span class=\"line\">    <span class=\"comment\"># do something</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">animal_helper_c</span></span></span><br><span class=\"line\">    <span class=\"comment\"># do something</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Mọi chuyện ổn chứ? Rất ổn, 3 method hiện có trong module AnimalHelper là 3 method hỗ trợ cho class Animal.</p>\n<p>Vậy bây giờ tôi có thêm một class nữa như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowCat</span></span></span><br><span class=\"line\">  <span class=\"comment\"># do something</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Class này cần một phương thức support tên là <code>yellow_cat_helper</code>, tôi sẽ viết thêm method này vào module AnimalHelper và include module AnimalHelper vào class YellowCat vậy là đúng và đủ yêu cầu. Khi này module AnimalHelper và class YellowCat sẽ trở thành như sau:</p>\n<p>Class YellowCat</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowCat</span></span></span><br><span class=\"line\">  <span class=\"keyword\">include</span> AnimalHelper</span><br><span class=\"line\">  <span class=\"comment\"># do something</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Module AnimalHelper</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">AnimalHelper</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">animal_helper_a</span></span></span><br><span class=\"line\">    <span class=\"comment\"># do something</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">animal_helper_b</span></span></span><br><span class=\"line\">    <span class=\"comment\"># do something</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">animal_helper_c</span></span></span><br><span class=\"line\">    <span class=\"comment\"># do something</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># add new method for YellowCat</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">yellow_cat_helper</span></span></span><br><span class=\"line\">    <span class=\"comment\"># do something</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Mọi chuyện giờ vẫn ổn chứ? Không, bây giờ thì không ổn nữa rồi nó đã vi phạm nguyên tắc SOLID thứ 4, chữ “I” mà chúng ta đang xét.</p>\n<p>Vì sao?</p>\n<p>Vì class Animal đâu có cần method <code>yellow_cat_helper</code>, còn class YellowCat đâu có cần 3 method <code>animal_helper_a</code>, <code>animal_helper_b</code>, <code>animal_helper_c</code> này đâu?</p>\n<p>Vậy mà chúng vẫn có thể sử dụng những method mà chúng vốn không cần, vì lý do ta viết chung tất cả method vào một module và include module vào từng class.</p>\n<p>Y như ví dụ bên trên: Bạn cần trực nhật lớp 1A thôi mà, cô giáo bạn đưa cho bạn trùm chìa khoá của cả trường làm gì? Cầm thì nặng, mà nhỡ đâu bạn <del>tắt mắt</del> nghịch dại thì hậu quả khôn lường.</p>\n<p>Vậy để không vi phạm nguyên tắc này ta có thể sửa lại mã nguồn như sau:</p>\n<p>Class Animal</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span></span><br><span class=\"line\">  <span class=\"keyword\">include</span> AnimalHelper</span><br><span class=\"line\">  <span class=\"comment\"># do something</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Module Animal</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">AnimalHelper</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">animal_helper_a</span></span></span><br><span class=\"line\">    <span class=\"comment\"># do something</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">animal_helper_b</span></span></span><br><span class=\"line\">    <span class=\"comment\"># do something</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">animal_helper_c</span></span></span><br><span class=\"line\">    <span class=\"comment\"># do something</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Class YellowCat</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowCat</span></span></span><br><span class=\"line\">  <span class=\"keyword\">include</span> YellowCatHelper</span><br><span class=\"line\">  <span class=\"comment\"># do something</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Và giờ ta tạo một module mới để YellowCat include</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">YellowCatHelper</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">yellow_cat_helper</span></span></span><br><span class=\"line\">    <span class=\"comment\"># do something</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Ok, vậy là look good rồi :smile: Lúc này class Animal chỉ được include những method mà nó cần và class YellowCat cũng vậy.</p>\n<h2 id=\"6-Dependency-Inversion-Principle\"><a href=\"#6-Dependency-Inversion-Principle\" class=\"headerlink\" title=\"6. Dependency Inversion Principle\"></a>6. <strong>D</strong>ependency Inversion Principle</h2><p><img src=\"/images/dip.jpg\" alt=\"hoa\"></p>\n<p>Nguyên lý này được phát biểu như sau:</p>\n<blockquote>\n<ol>\n<li>High-level modules should not depend on low-level modules. Both should depend on abstractions.</li>\n<li>Abstractions should not depend upon details. Details should depend upon abstractions.</li>\n</ol>\n</blockquote>\n<p>Dịch sát nghĩa sẽ là:</p>\n<blockquote>\n<ol>\n<li>Module cấp cao không nên phụ thuộc vào module cấp thấp hơn. Cả hai nên phụ thuộc vào abstractions.</li>\n<li>Abstractions không nên phụ thuộc vào details. Details nên phụ thuộc vào abstractions</li>\n</ol>\n</blockquote>\n<p>Quay trở lại ví dụ promotion ban đầu, giả sử ta viết mã nguồn như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># app/checkout.rb</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Checkout</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_bill</span><span class=\"params\">(cart)</span></span></span><br><span class=\"line\">    PromotionTypeA.promotion_type_a(cart)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># app/promotion/promotion_type_a.rb</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PromotionTypeA</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">promotion_type_a</span><span class=\"params\">(cart)</span></span></span><br><span class=\"line\">    <span class=\"comment\"># do something</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Trong đoạn mã nguồn trên đây, method get_bill trong class Checkout phụ thuộc vào class PromotionTypeA. Rõ ràng là như vậy, câu hỏi là nếu ta có PromotionTypeB, PromotionTypeC… Thì phải làm sao?</p>\n<p>Chúng ta sẽ phải viết 3 method get_bill ứng với PromotionTypeA, PromotionTypeB và PromotionTypeC hay sao?</p>\n<p>Đó cũng là một cách, nhưng đó là cách đã vi phạm nguyên lý DIP, khi mà các module phụ thuộc lẫn nhau.</p>\n<p>Để giải quyết vấn đề này ta có thể viết lại mã nguồn như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># app/checkout.rb</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Checkout</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_bill</span><span class=\"params\">(cart, PromotionType)</span></span></span><br><span class=\"line\">    PromotionType.get_promotion(cart)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># app/promotion/promotion_type_a.rb</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PromotionTypeA</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">get_promotion</span><span class=\"params\">(cart)</span></span></span><br><span class=\"line\">    <span class=\"comment\"># do something</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># get_bill với PromotionTypeA</span></span><br><span class=\"line\">Checkout.new.get_bill(cart, PromotionTypeA)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># để viết thêm PromotionTypeB, ta viết thêm một class PromotionTypeB và truyền PromotionTypeB vào get_bill method.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># app/promotion/promotion_type_a.rb</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PromotionTypeB</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">get_promotion</span><span class=\"params\">(cart)</span></span></span><br><span class=\"line\">    <span class=\"comment\"># do something</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">Checkout.new.get_bill(cart, PromotionTypeB)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h2><p>Trên đây là 1 cái nhìn tổng quan về hệ thống nguyên lý SOLID nổi tiếng, việc áp dụng nguyên lý này sẽ không chắc giúp mã nguồn bạn thành công, nhưng nó sẽ giảm thiểu rủi ro hơn là khi code bất chấp, lý thuyết chỉ là một phần nhỏ, nắm lý thuyết giúp chúng ta có cái nhìn tổng quát, trích rút lại thì thứ làm cho nguyên lý này có giá trị nằm ở kinh nghiệm sử dụng của nhà phát triển, không phải luôn luôn tuân thủ mọi quy tắc đã là tốt trong mọi trường hợp.</p>\n<p>Nguồn tham khảo:</p>\n<p>[1] <a href=\"https://en.wikipedia.org/wiki/SOLID\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/SOLID</a></p>\n"},{"title":"Exception Trong Rails","date":"2019-06-09T17:00:00.000Z","draft":false,"_content":"\n# Đặt vấn đề\n\nTôi có một số tình huống diễn ra hàng ngày về con mèo của tôi. Nếu nó đói tôi cho nó ăn, nếu nó đi vs lung tung tôi sẽ dọn dẹp chúng.\n\nNhưng bỗng một ngày con mèo stupid của tôi bị \"người ngoài hành tinh bắt cóc\", wtf?. Đây là một tình huống không bình thường và tôi không có một `HÀNH ĐỘNG THỐNG NHẤT` nào để đối phó với 1 tình huống như vậy, tôi có thể khóc, có thể báo công an, nhưng chắc chắn không thể có một cách giải quyết triệt để. Trong lập trình ta gọi những tình huống mà logic luận lý sai lệch không còn đi theo logic bình thường như này là một exception.\n\nVí dụ như máy tính của bạn không được thiết kế để thực hiện phép chia cho số 0. Vậy khi bạn bắt nó thực hiện phép chia cho số 0, nó sẽ nghĩ \"wtf is going on?\" và đành quăng ra cho bạn một thông báo về việc bạn đã bắt nó làm một việc mà nó không được thiết kế để làm.\n\nTrong bài viết này chúng ta sẽ tìm hiểu về exception trong ruby.\n\n# Luận bàn\n\n# 1. Tìm hiểu về Exception\n\nĐầu tiên chúng ta phải ghi nhớ rằng khi một exception được gọi, chương trình của bạn sẽ ngừng và đoạn code phía sau không thể chạy được nữa.\n\n1. Tôi đến trường đón con mèo.\n\n2. Tôi đem con mèo đi bán vào quán tiểu hổ.\n\nNếu ở `bước 1`, thay vì đón thành công con mèo, tôi lại dính một exception \"MeoMissing\" vì lý do nó bị người ngoài hành tinh bắt cóc.\n\nKhi này dĩ nhiên chương trình sẽ dừng lại, vì tôi làm gì còn con mèo để mà đem nó đi bán ở  `bước 2`.\n\nQuay về với ví dụ đơn giản là chia cho số 0:\n\n```ruby\n10/0\n# => ZeroDivisionError (divided by 0)\n```\n\n`ZeroDivisionError` là một exception được ruby tạo ra để trả về khi bạn cố chia một số cho số 0.\n\n```\n  if (chia đàng hoàng)\n    thực hiện phép tính.\n  else\n    if (chia cho số 0)\n      trả về exception ZeroDivisionError\n    end\n  end\n```\n\nFlow logic đơn giản về exception như trên.\n\n# 2. Làm sao để lấy về đối tượng Exception\n\nNhư chúng ta đã biết, gần như mọi thứ trong ruby đều là object(Ngoại trừ method và block). Vậy nên Exception cũng là một đối tượng.\n\nZeroDivisionError ở trên là một Class, vậy khi bạn thực hiện một phép chia cho số 0, bạn đã rơi vào trường hợp mà ZeroDivisionError quản lý và nó sẽ trả về một đối tượng ZeroDivisionError.\n\nVậy tức là ở 2 lần chia cho số 0 khác nhau, nó sẽ trả về cho bạn 2 object exception khác nhau chỉ là cùng một class ZeroDivisionError.\n\nVậy cách nào để bắt được đối tượng này? Cú pháp để thực hiện việc này sẽ như sau:\n\n```ruby\nbegin\n  meo = 10\n  meo/0\nrescue ZeroDivisionError => e\n  puts \"Exception Class: #{ e.class.name }\"\n  puts \"Exception Message: #{ e.message }\"\nend\n```\n\n`rescue` là từ khoá sẽ giúp bạn lấy được đối tượng exception trả về. Như ví dụ trên tôi lấy đối tượng exeption trả về (nếu exception đó là dạng ZeroDivisionError) và truyền nó vào biến `e`. Từ đây `e` chính là object exception nếu exception đó xảy ra.\n\nTôi có thể dùng e để xuất ra các thông tin mà tôi cần như class name hay message thông báo lỗi.\n\n# 3. Xây dựng một class Exception\n\nMột sự thật hiển nhiên là những thiết kế có sẵn không bao giờ có thể cover cho tất cả các trường hợp có thể xảy ra trong thực tiễn. Đôi lúc bạn muốn thêm một exception để cover cho trường hợp của riêng dự án của bạn thì sao?\n\nCâu trả lời mà tôi mới tìm được khá thú vị và cũng rất quen thuộc. Đó là Exception cũng có thể được tạo ra như một class bình thường. Hãy để nó kế thừa lớp `StandardError` là được.\n\n```ruby\nclass MeoException < StandardError; end\n\n```\n\nVậy là ta đã có một class exception của riêng mình. Khi cần gọi đến exception này thì ta sẽ gọi sử dụng phương thức `raise` để gọi một đối tượng.\n\n```ruby\nraise MeoException.new(params_gi_do_ma_ban_muon)\n```\n\nVậy trong class class `MeoException` ta sẽ thiết kế những gì? :smile: Tôi cũng chưa tìm hiểu.\n\n# 4. Các lớp Exception có sẵn trong Ruby\n\n![hoa](/images/ruby-exception.jpg)\n\nĐây là sơ đồ về các lớp exception trong ruby, nếu ta rescue một exception X, X lại có dăm 3 exception con, thì chỉ cần chương trình của bạn phát sinh vấn đề và trả ra một exception con nào đó thì X được gọi.\n\n# 5. Cách bắt Exception hợp lý\n\n**Cách 1:**\n\n```ruby\nbegin\n  di_don_con_meo_truong()\nrescue Exception => e\n  # do something\nend\n```\n\nĐây là một cách tệ vì khi rescue với Exception, lớp cha của tất cả các Exception khác thì nó cover quá nhiều trường hợp cũng trả ra exception, hãy nhớ lại ở trên chúng ta đã nói một khi Exception được trả về thì chương trình của bạn sẽ dừng lại. Vậy nên không sử dụng cách này.\n\n**Cách 2:**\n\n```ruby\nbegin\n  di_don_con_meo_truong()\nrescue StandardError => e\n  # do something\nend\n```\n\nĐây là cách làm tốt hơn, vì ta chỉ cover các lỗi standard, ít ra chương trình của bạn sẽ không thi thoảng bị shutdown mà không biết vì sao như cách đầu tiên.\n\n**Cách 3:**\n\n```ruby\nbegin\n  di_don_con_meo_truong()\nrescue MeoBiBatCoc, MeoBiDauChan => e\n  # do something\nend\n```\n\nĐây là cách tốt nhất, ta goi trực tiếp đến trường hợp ngoại lệ mà ta cần bắt lấy và xử lý.\n\n# Kết luận\n\nNếu có phản hồi hãy để lại bình luận bên dưới bài viết.\n","source":"_posts/2019-06-10-xu-ly-ngoai-le-trong-rails.md","raw":"---\ntitle: \"Exception Trong Rails\"\ndate: 2019-06-10\ndraft: false\ntags: [\"RAILS\"]\ncategories: [\"RAILS\"]\n---\n\n# Đặt vấn đề\n\nTôi có một số tình huống diễn ra hàng ngày về con mèo của tôi. Nếu nó đói tôi cho nó ăn, nếu nó đi vs lung tung tôi sẽ dọn dẹp chúng.\n\nNhưng bỗng một ngày con mèo stupid của tôi bị \"người ngoài hành tinh bắt cóc\", wtf?. Đây là một tình huống không bình thường và tôi không có một `HÀNH ĐỘNG THỐNG NHẤT` nào để đối phó với 1 tình huống như vậy, tôi có thể khóc, có thể báo công an, nhưng chắc chắn không thể có một cách giải quyết triệt để. Trong lập trình ta gọi những tình huống mà logic luận lý sai lệch không còn đi theo logic bình thường như này là một exception.\n\nVí dụ như máy tính của bạn không được thiết kế để thực hiện phép chia cho số 0. Vậy khi bạn bắt nó thực hiện phép chia cho số 0, nó sẽ nghĩ \"wtf is going on?\" và đành quăng ra cho bạn một thông báo về việc bạn đã bắt nó làm một việc mà nó không được thiết kế để làm.\n\nTrong bài viết này chúng ta sẽ tìm hiểu về exception trong ruby.\n\n# Luận bàn\n\n# 1. Tìm hiểu về Exception\n\nĐầu tiên chúng ta phải ghi nhớ rằng khi một exception được gọi, chương trình của bạn sẽ ngừng và đoạn code phía sau không thể chạy được nữa.\n\n1. Tôi đến trường đón con mèo.\n\n2. Tôi đem con mèo đi bán vào quán tiểu hổ.\n\nNếu ở `bước 1`, thay vì đón thành công con mèo, tôi lại dính một exception \"MeoMissing\" vì lý do nó bị người ngoài hành tinh bắt cóc.\n\nKhi này dĩ nhiên chương trình sẽ dừng lại, vì tôi làm gì còn con mèo để mà đem nó đi bán ở  `bước 2`.\n\nQuay về với ví dụ đơn giản là chia cho số 0:\n\n```ruby\n10/0\n# => ZeroDivisionError (divided by 0)\n```\n\n`ZeroDivisionError` là một exception được ruby tạo ra để trả về khi bạn cố chia một số cho số 0.\n\n```\n  if (chia đàng hoàng)\n    thực hiện phép tính.\n  else\n    if (chia cho số 0)\n      trả về exception ZeroDivisionError\n    end\n  end\n```\n\nFlow logic đơn giản về exception như trên.\n\n# 2. Làm sao để lấy về đối tượng Exception\n\nNhư chúng ta đã biết, gần như mọi thứ trong ruby đều là object(Ngoại trừ method và block). Vậy nên Exception cũng là một đối tượng.\n\nZeroDivisionError ở trên là một Class, vậy khi bạn thực hiện một phép chia cho số 0, bạn đã rơi vào trường hợp mà ZeroDivisionError quản lý và nó sẽ trả về một đối tượng ZeroDivisionError.\n\nVậy tức là ở 2 lần chia cho số 0 khác nhau, nó sẽ trả về cho bạn 2 object exception khác nhau chỉ là cùng một class ZeroDivisionError.\n\nVậy cách nào để bắt được đối tượng này? Cú pháp để thực hiện việc này sẽ như sau:\n\n```ruby\nbegin\n  meo = 10\n  meo/0\nrescue ZeroDivisionError => e\n  puts \"Exception Class: #{ e.class.name }\"\n  puts \"Exception Message: #{ e.message }\"\nend\n```\n\n`rescue` là từ khoá sẽ giúp bạn lấy được đối tượng exception trả về. Như ví dụ trên tôi lấy đối tượng exeption trả về (nếu exception đó là dạng ZeroDivisionError) và truyền nó vào biến `e`. Từ đây `e` chính là object exception nếu exception đó xảy ra.\n\nTôi có thể dùng e để xuất ra các thông tin mà tôi cần như class name hay message thông báo lỗi.\n\n# 3. Xây dựng một class Exception\n\nMột sự thật hiển nhiên là những thiết kế có sẵn không bao giờ có thể cover cho tất cả các trường hợp có thể xảy ra trong thực tiễn. Đôi lúc bạn muốn thêm một exception để cover cho trường hợp của riêng dự án của bạn thì sao?\n\nCâu trả lời mà tôi mới tìm được khá thú vị và cũng rất quen thuộc. Đó là Exception cũng có thể được tạo ra như một class bình thường. Hãy để nó kế thừa lớp `StandardError` là được.\n\n```ruby\nclass MeoException < StandardError; end\n\n```\n\nVậy là ta đã có một class exception của riêng mình. Khi cần gọi đến exception này thì ta sẽ gọi sử dụng phương thức `raise` để gọi một đối tượng.\n\n```ruby\nraise MeoException.new(params_gi_do_ma_ban_muon)\n```\n\nVậy trong class class `MeoException` ta sẽ thiết kế những gì? :smile: Tôi cũng chưa tìm hiểu.\n\n# 4. Các lớp Exception có sẵn trong Ruby\n\n![hoa](/images/ruby-exception.jpg)\n\nĐây là sơ đồ về các lớp exception trong ruby, nếu ta rescue một exception X, X lại có dăm 3 exception con, thì chỉ cần chương trình của bạn phát sinh vấn đề và trả ra một exception con nào đó thì X được gọi.\n\n# 5. Cách bắt Exception hợp lý\n\n**Cách 1:**\n\n```ruby\nbegin\n  di_don_con_meo_truong()\nrescue Exception => e\n  # do something\nend\n```\n\nĐây là một cách tệ vì khi rescue với Exception, lớp cha của tất cả các Exception khác thì nó cover quá nhiều trường hợp cũng trả ra exception, hãy nhớ lại ở trên chúng ta đã nói một khi Exception được trả về thì chương trình của bạn sẽ dừng lại. Vậy nên không sử dụng cách này.\n\n**Cách 2:**\n\n```ruby\nbegin\n  di_don_con_meo_truong()\nrescue StandardError => e\n  # do something\nend\n```\n\nĐây là cách làm tốt hơn, vì ta chỉ cover các lỗi standard, ít ra chương trình của bạn sẽ không thi thoảng bị shutdown mà không biết vì sao như cách đầu tiên.\n\n**Cách 3:**\n\n```ruby\nbegin\n  di_don_con_meo_truong()\nrescue MeoBiBatCoc, MeoBiDauChan => e\n  # do something\nend\n```\n\nĐây là cách tốt nhất, ta goi trực tiếp đến trường hợp ngoại lệ mà ta cần bắt lấy và xử lý.\n\n# Kết luận\n\nNếu có phản hồi hãy để lại bình luận bên dưới bài viết.\n","slug":"2019-06-10-xu-ly-ngoai-le-trong-rails","published":1,"updated":"2019-12-06T15:39:27.947Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7sugf00255rrs0eshcw1m","content":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Tôi có một số tình huống diễn ra hàng ngày về con mèo của tôi. Nếu nó đói tôi cho nó ăn, nếu nó đi vs lung tung tôi sẽ dọn dẹp chúng.</p>\n<p>Nhưng bỗng một ngày con mèo stupid của tôi bị “người ngoài hành tinh bắt cóc”, wtf?. Đây là một tình huống không bình thường và tôi không có một <code>HÀNH ĐỘNG THỐNG NHẤT</code> nào để đối phó với 1 tình huống như vậy, tôi có thể khóc, có thể báo công an, nhưng chắc chắn không thể có một cách giải quyết triệt để. Trong lập trình ta gọi những tình huống mà logic luận lý sai lệch không còn đi theo logic bình thường như này là một exception.</p>\n<p>Ví dụ như máy tính của bạn không được thiết kế để thực hiện phép chia cho số 0. Vậy khi bạn bắt nó thực hiện phép chia cho số 0, nó sẽ nghĩ “wtf is going on?” và đành quăng ra cho bạn một thông báo về việc bạn đã bắt nó làm một việc mà nó không được thiết kế để làm.</p>\n<p>Trong bài viết này chúng ta sẽ tìm hiểu về exception trong ruby.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-Tim-hieu-ve-Exception\"><a href=\"#1-Tim-hieu-ve-Exception\" class=\"headerlink\" title=\"1. Tìm hiểu về Exception\"></a>1. Tìm hiểu về Exception</h1><p>Đầu tiên chúng ta phải ghi nhớ rằng khi một exception được gọi, chương trình của bạn sẽ ngừng và đoạn code phía sau không thể chạy được nữa.</p>\n<ol>\n<li><p>Tôi đến trường đón con mèo.</p>\n</li>\n<li><p>Tôi đem con mèo đi bán vào quán tiểu hổ.</p>\n</li>\n</ol>\n<p>Nếu ở <code>bước 1</code>, thay vì đón thành công con mèo, tôi lại dính một exception “MeoMissing” vì lý do nó bị người ngoài hành tinh bắt cóc.</p>\n<p>Khi này dĩ nhiên chương trình sẽ dừng lại, vì tôi làm gì còn con mèo để mà đem nó đi bán ở  <code>bước 2</code>.</p>\n<p>Quay về với ví dụ đơn giản là chia cho số 0:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span>/<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\"># =&gt; ZeroDivisionError (divided by 0)</span></span><br></pre></td></tr></table></figure>\n\n<p><code>ZeroDivisionError</code> là một exception được ruby tạo ra để trả về khi bạn cố chia một số cho số 0.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (chia đàng hoàng)</span><br><span class=\"line\">  thực hiện phép tính.</span><br><span class=\"line\">else</span><br><span class=\"line\">  if (chia cho số 0)</span><br><span class=\"line\">    trả về exception ZeroDivisionError</span><br><span class=\"line\">  end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<p>Flow logic đơn giản về exception như trên.</p>\n<h1 id=\"2-Lam-sao-de-lay-ve-doi-tuong-Exception\"><a href=\"#2-Lam-sao-de-lay-ve-doi-tuong-Exception\" class=\"headerlink\" title=\"2. Làm sao để lấy về đối tượng Exception\"></a>2. Làm sao để lấy về đối tượng Exception</h1><p>Như chúng ta đã biết, gần như mọi thứ trong ruby đều là object(Ngoại trừ method và block). Vậy nên Exception cũng là một đối tượng.</p>\n<p>ZeroDivisionError ở trên là một Class, vậy khi bạn thực hiện một phép chia cho số 0, bạn đã rơi vào trường hợp mà ZeroDivisionError quản lý và nó sẽ trả về một đối tượng ZeroDivisionError.</p>\n<p>Vậy tức là ở 2 lần chia cho số 0 khác nhau, nó sẽ trả về cho bạn 2 object exception khác nhau chỉ là cùng một class ZeroDivisionError.</p>\n<p>Vậy cách nào để bắt được đối tượng này? Cú pháp để thực hiện việc này sẽ như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">  meo = <span class=\"number\">10</span></span><br><span class=\"line\">  meo/<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">rescue</span> ZeroDivisionError =&gt; e</span><br><span class=\"line\">  puts <span class=\"string\">\"Exception Class: <span class=\"subst\">#&#123; e<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">name</span> &#125;\"</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">  puts <span class=\"string\">\"Exception Message: <span class=\"subst\">#&#123; e.message &#125;</span>\"</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"keyword\">end</span></span></span></span><br></pre></td></tr></table></figure>\n\n<p><code>rescue</code> là từ khoá sẽ giúp bạn lấy được đối tượng exception trả về. Như ví dụ trên tôi lấy đối tượng exeption trả về (nếu exception đó là dạng ZeroDivisionError) và truyền nó vào biến <code>e</code>. Từ đây <code>e</code> chính là object exception nếu exception đó xảy ra.</p>\n<p>Tôi có thể dùng e để xuất ra các thông tin mà tôi cần như class name hay message thông báo lỗi.</p>\n<h1 id=\"3-Xay-dung-mot-class-Exception\"><a href=\"#3-Xay-dung-mot-class-Exception\" class=\"headerlink\" title=\"3. Xây dựng một class Exception\"></a>3. Xây dựng một class Exception</h1><p>Một sự thật hiển nhiên là những thiết kế có sẵn không bao giờ có thể cover cho tất cả các trường hợp có thể xảy ra trong thực tiễn. Đôi lúc bạn muốn thêm một exception để cover cho trường hợp của riêng dự án của bạn thì sao?</p>\n<p>Câu trả lời mà tôi mới tìm được khá thú vị và cũng rất quen thuộc. Đó là Exception cũng có thể được tạo ra như một class bình thường. Hãy để nó kế thừa lớp <code>StandardError</code> là được.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MeoException</span> &lt; StandardError;</span> <span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Vậy là ta đã có một class exception của riêng mình. Khi cần gọi đến exception này thì ta sẽ gọi sử dụng phương thức <code>raise</code> để gọi một đối tượng.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raise MeoException.new(params_gi_do_ma_ban_muon)</span><br></pre></td></tr></table></figure>\n\n<p>Vậy trong class class <code>MeoException</code> ta sẽ thiết kế những gì? :smile: Tôi cũng chưa tìm hiểu.</p>\n<h1 id=\"4-Cac-lop-Exception-co-san-trong-Ruby\"><a href=\"#4-Cac-lop-Exception-co-san-trong-Ruby\" class=\"headerlink\" title=\"4. Các lớp Exception có sẵn trong Ruby\"></a>4. Các lớp Exception có sẵn trong Ruby</h1><p><img src=\"/images/ruby-exception.jpg\" alt=\"hoa\"></p>\n<p>Đây là sơ đồ về các lớp exception trong ruby, nếu ta rescue một exception X, X lại có dăm 3 exception con, thì chỉ cần chương trình của bạn phát sinh vấn đề và trả ra một exception con nào đó thì X được gọi.</p>\n<h1 id=\"5-Cach-bat-Exception-hop-ly\"><a href=\"#5-Cach-bat-Exception-hop-ly\" class=\"headerlink\" title=\"5. Cách bắt Exception hợp lý\"></a>5. Cách bắt Exception hợp lý</h1><p><strong>Cách 1:</strong></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">  di_don_con_meo_truong()</span><br><span class=\"line\"><span class=\"keyword\">rescue</span> Exception =&gt; e</span><br><span class=\"line\">  <span class=\"comment\"># do something</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Đây là một cách tệ vì khi rescue với Exception, lớp cha của tất cả các Exception khác thì nó cover quá nhiều trường hợp cũng trả ra exception, hãy nhớ lại ở trên chúng ta đã nói một khi Exception được trả về thì chương trình của bạn sẽ dừng lại. Vậy nên không sử dụng cách này.</p>\n<p><strong>Cách 2:</strong></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">  di_don_con_meo_truong()</span><br><span class=\"line\"><span class=\"keyword\">rescue</span> StandardError =&gt; e</span><br><span class=\"line\">  <span class=\"comment\"># do something</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Đây là cách làm tốt hơn, vì ta chỉ cover các lỗi standard, ít ra chương trình của bạn sẽ không thi thoảng bị shutdown mà không biết vì sao như cách đầu tiên.</p>\n<p><strong>Cách 3:</strong></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">  di_don_con_meo_truong()</span><br><span class=\"line\"><span class=\"keyword\">rescue</span> MeoBiBatCoc, MeoBiDauChan =&gt; e</span><br><span class=\"line\">  <span class=\"comment\"># do something</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Đây là cách tốt nhất, ta goi trực tiếp đến trường hợp ngoại lệ mà ta cần bắt lấy và xử lý.</p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Nếu có phản hồi hãy để lại bình luận bên dưới bài viết.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Tôi có một số tình huống diễn ra hàng ngày về con mèo của tôi. Nếu nó đói tôi cho nó ăn, nếu nó đi vs lung tung tôi sẽ dọn dẹp chúng.</p>\n<p>Nhưng bỗng một ngày con mèo stupid của tôi bị “người ngoài hành tinh bắt cóc”, wtf?. Đây là một tình huống không bình thường và tôi không có một <code>HÀNH ĐỘNG THỐNG NHẤT</code> nào để đối phó với 1 tình huống như vậy, tôi có thể khóc, có thể báo công an, nhưng chắc chắn không thể có một cách giải quyết triệt để. Trong lập trình ta gọi những tình huống mà logic luận lý sai lệch không còn đi theo logic bình thường như này là một exception.</p>\n<p>Ví dụ như máy tính của bạn không được thiết kế để thực hiện phép chia cho số 0. Vậy khi bạn bắt nó thực hiện phép chia cho số 0, nó sẽ nghĩ “wtf is going on?” và đành quăng ra cho bạn một thông báo về việc bạn đã bắt nó làm một việc mà nó không được thiết kế để làm.</p>\n<p>Trong bài viết này chúng ta sẽ tìm hiểu về exception trong ruby.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-Tim-hieu-ve-Exception\"><a href=\"#1-Tim-hieu-ve-Exception\" class=\"headerlink\" title=\"1. Tìm hiểu về Exception\"></a>1. Tìm hiểu về Exception</h1><p>Đầu tiên chúng ta phải ghi nhớ rằng khi một exception được gọi, chương trình của bạn sẽ ngừng và đoạn code phía sau không thể chạy được nữa.</p>\n<ol>\n<li><p>Tôi đến trường đón con mèo.</p>\n</li>\n<li><p>Tôi đem con mèo đi bán vào quán tiểu hổ.</p>\n</li>\n</ol>\n<p>Nếu ở <code>bước 1</code>, thay vì đón thành công con mèo, tôi lại dính một exception “MeoMissing” vì lý do nó bị người ngoài hành tinh bắt cóc.</p>\n<p>Khi này dĩ nhiên chương trình sẽ dừng lại, vì tôi làm gì còn con mèo để mà đem nó đi bán ở  <code>bước 2</code>.</p>\n<p>Quay về với ví dụ đơn giản là chia cho số 0:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span>/<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\"># =&gt; ZeroDivisionError (divided by 0)</span></span><br></pre></td></tr></table></figure>\n\n<p><code>ZeroDivisionError</code> là một exception được ruby tạo ra để trả về khi bạn cố chia một số cho số 0.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (chia đàng hoàng)</span><br><span class=\"line\">  thực hiện phép tính.</span><br><span class=\"line\">else</span><br><span class=\"line\">  if (chia cho số 0)</span><br><span class=\"line\">    trả về exception ZeroDivisionError</span><br><span class=\"line\">  end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<p>Flow logic đơn giản về exception như trên.</p>\n<h1 id=\"2-Lam-sao-de-lay-ve-doi-tuong-Exception\"><a href=\"#2-Lam-sao-de-lay-ve-doi-tuong-Exception\" class=\"headerlink\" title=\"2. Làm sao để lấy về đối tượng Exception\"></a>2. Làm sao để lấy về đối tượng Exception</h1><p>Như chúng ta đã biết, gần như mọi thứ trong ruby đều là object(Ngoại trừ method và block). Vậy nên Exception cũng là một đối tượng.</p>\n<p>ZeroDivisionError ở trên là một Class, vậy khi bạn thực hiện một phép chia cho số 0, bạn đã rơi vào trường hợp mà ZeroDivisionError quản lý và nó sẽ trả về một đối tượng ZeroDivisionError.</p>\n<p>Vậy tức là ở 2 lần chia cho số 0 khác nhau, nó sẽ trả về cho bạn 2 object exception khác nhau chỉ là cùng một class ZeroDivisionError.</p>\n<p>Vậy cách nào để bắt được đối tượng này? Cú pháp để thực hiện việc này sẽ như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">  meo = <span class=\"number\">10</span></span><br><span class=\"line\">  meo/<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">rescue</span> ZeroDivisionError =&gt; e</span><br><span class=\"line\">  puts <span class=\"string\">\"Exception Class: <span class=\"subst\">#&#123; e<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">name</span> &#125;\"</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">  puts <span class=\"string\">\"Exception Message: <span class=\"subst\">#&#123; e.message &#125;</span>\"</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"keyword\">end</span></span></span></span><br></pre></td></tr></table></figure>\n\n<p><code>rescue</code> là từ khoá sẽ giúp bạn lấy được đối tượng exception trả về. Như ví dụ trên tôi lấy đối tượng exeption trả về (nếu exception đó là dạng ZeroDivisionError) và truyền nó vào biến <code>e</code>. Từ đây <code>e</code> chính là object exception nếu exception đó xảy ra.</p>\n<p>Tôi có thể dùng e để xuất ra các thông tin mà tôi cần như class name hay message thông báo lỗi.</p>\n<h1 id=\"3-Xay-dung-mot-class-Exception\"><a href=\"#3-Xay-dung-mot-class-Exception\" class=\"headerlink\" title=\"3. Xây dựng một class Exception\"></a>3. Xây dựng một class Exception</h1><p>Một sự thật hiển nhiên là những thiết kế có sẵn không bao giờ có thể cover cho tất cả các trường hợp có thể xảy ra trong thực tiễn. Đôi lúc bạn muốn thêm một exception để cover cho trường hợp của riêng dự án của bạn thì sao?</p>\n<p>Câu trả lời mà tôi mới tìm được khá thú vị và cũng rất quen thuộc. Đó là Exception cũng có thể được tạo ra như một class bình thường. Hãy để nó kế thừa lớp <code>StandardError</code> là được.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MeoException</span> &lt; StandardError;</span> <span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Vậy là ta đã có một class exception của riêng mình. Khi cần gọi đến exception này thì ta sẽ gọi sử dụng phương thức <code>raise</code> để gọi một đối tượng.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raise MeoException.new(params_gi_do_ma_ban_muon)</span><br></pre></td></tr></table></figure>\n\n<p>Vậy trong class class <code>MeoException</code> ta sẽ thiết kế những gì? :smile: Tôi cũng chưa tìm hiểu.</p>\n<h1 id=\"4-Cac-lop-Exception-co-san-trong-Ruby\"><a href=\"#4-Cac-lop-Exception-co-san-trong-Ruby\" class=\"headerlink\" title=\"4. Các lớp Exception có sẵn trong Ruby\"></a>4. Các lớp Exception có sẵn trong Ruby</h1><p><img src=\"/images/ruby-exception.jpg\" alt=\"hoa\"></p>\n<p>Đây là sơ đồ về các lớp exception trong ruby, nếu ta rescue một exception X, X lại có dăm 3 exception con, thì chỉ cần chương trình của bạn phát sinh vấn đề và trả ra một exception con nào đó thì X được gọi.</p>\n<h1 id=\"5-Cach-bat-Exception-hop-ly\"><a href=\"#5-Cach-bat-Exception-hop-ly\" class=\"headerlink\" title=\"5. Cách bắt Exception hợp lý\"></a>5. Cách bắt Exception hợp lý</h1><p><strong>Cách 1:</strong></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">  di_don_con_meo_truong()</span><br><span class=\"line\"><span class=\"keyword\">rescue</span> Exception =&gt; e</span><br><span class=\"line\">  <span class=\"comment\"># do something</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Đây là một cách tệ vì khi rescue với Exception, lớp cha của tất cả các Exception khác thì nó cover quá nhiều trường hợp cũng trả ra exception, hãy nhớ lại ở trên chúng ta đã nói một khi Exception được trả về thì chương trình của bạn sẽ dừng lại. Vậy nên không sử dụng cách này.</p>\n<p><strong>Cách 2:</strong></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">  di_don_con_meo_truong()</span><br><span class=\"line\"><span class=\"keyword\">rescue</span> StandardError =&gt; e</span><br><span class=\"line\">  <span class=\"comment\"># do something</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Đây là cách làm tốt hơn, vì ta chỉ cover các lỗi standard, ít ra chương trình của bạn sẽ không thi thoảng bị shutdown mà không biết vì sao như cách đầu tiên.</p>\n<p><strong>Cách 3:</strong></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">  di_don_con_meo_truong()</span><br><span class=\"line\"><span class=\"keyword\">rescue</span> MeoBiBatCoc, MeoBiDauChan =&gt; e</span><br><span class=\"line\">  <span class=\"comment\"># do something</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Đây là cách tốt nhất, ta goi trực tiếp đến trường hợp ngoại lệ mà ta cần bắt lấy và xử lý.</p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Nếu có phản hồi hãy để lại bình luận bên dưới bài viết.</p>\n"},{"title":"Public, Private Và Protected","date":"2019-06-10T17:00:00.000Z","draft":false,"_content":"\n# Đặt vấn đề\n\nKhi còn học đại học, chúng ta được học về tầm vực của các phương thức như sau:\n\n1. Public phương thức, gọi ở đâu cũng được chỉ cần đảm bảo đã include cái class khai báo phương thức đó là được.\n\n2. Protected phương thức, gọi ở chính class khai báo nó, ngoài ra còn có thẻ gọi ở các lớp kế thừa class khai báo phương thức này.\n\n3. Private phương thức, gọi ở chính class mà nó được khai báo, ngoài ra...à mà quên không có ngoài ra, chỉ vậy thôi.\n\nNhững trích rút trên dựa theo ngôn ngữ mà chúng ta cùng theo đuổi ngày đại học C++. Vậy với Ruby? Liệu những phát biểu trên liệu còn đúng?\n\n# Luận bàn\n\nKhông, những trích rút trên không còn đúng đắn hoàn toàn với ngôn ngữ Ruby. Có một số khác biệt. Trong bài viết này chúng ta sẽ đi sơ qua về nó.\n\n\"Mà sao lại là sơ qua? sao bài nào cũng dùng từ đi sơ qua mà không phải là \"đíp đờ rai tu\" gì đó, viết blog kiểu cơm nguội như này viết làm gì (angry).\"\n\n=> Vì đây không phải kiến thức cao siêu gì cả, có vô vàn tài liệu anh ngữ đề cập đến nó rồi và tôi không thấy cái lý do gì để cố đọc tài liệu thật nhiều, translate thật đã tay, rồi vietsub ra một bài viết dài như sông Hồng để nói về một chủ đề vô cùng normal để thể hiện bản thân cả :smile:\n\n# Lấy một ví dụ\n\n```ruby\nclass Cat\n  # default public method\n  def cat_hello_public\n    puts \"T*o ngao ngao public mot cach quy toc\"\n  end\n\n  protected\n\n  def cat_hello_protected\n    puts \"T*o ngao ngao protected mot cach sexy\"\n  end\n\n  private\n\n  def cat_hello_private\n    puts \"T*o ngao ngao private mot  cach len lut\"\n  end\nend\n```\n\nRa ngoài scope của class này rồi chạy:\n\n```ruby\nCat.new.cat_hello_public\n# => T*o ngao ngao public mot cach quy toc.\nCat.new.cat_hello_protected\n# => error\nCat.new.cat_hello_private\n# => error\n```\n\n**Note:** public có thể gọi ngoài tầm vực của một class, những method còn lại thì không. Đồng nghĩa với việc bạn chỉ cần đảm bảo ref được file chưa class có phương thức public đó thì bạn có thể thoải mái gọi phương thức này.\n\n# Thêm một class con kế thừa\n\n```ruby\nclass YellowCat < Cat; end\n```\n\nChạy:\n\n```ruby\nYellowCat.new.cat_hello_public\n# => T*o ngao ngao public mot cach quy toc.\n```\n\n**Note:** Phương thức public có thể được gọi công khai bởi class kế thừa của class chưa phương thức đó.\n\n# Gọi 3 phương thức Cat trong một method thuộc YellowCat\n\n```ruby\nclass YellowCat < Cat\n  def yellow_cat\n    cat_hello_public\n    cat_hello_protected\n    cat_hello_private\n  end\nend\n```\n\nChạy:\n\n```ruby\nYellowCat.new.yellow_cat\n# => T*o ngao ngao public mot cach quy toc\n# => T*o ngao ngao protected mot cach sexy\n# => T*o ngao ngao private mot  cach len lut\n```\n\n**Note:** Cả 3 dạng phương thức đều có thể được gọi trong lớp con (Trong lớp con nhé).\n\n# Trong phương thức yellow_cat khai báo một đối tượng Cat và gọi tới 3 phương thức\n\n```ruby\nclass YellowCat < Cat\n  def yellow_cat\n    cat = Cat.new\n    cat.cat_hello_public\n    cat.cat_hello_protected\n    cat.cat_hello_private\n  end\nend\n```\n\nChạy:\n\n```ruby\nYellowCat.new.yellow_cat\n# => T*o ngao ngao public mot cach quy toc\n# => T*o ngao ngao protected mot cach sexy\n# =>  error\n```\n\n:arrow_right: **Note:** Trong một lớp con kế thừa từ lớp cha, public và protected method của lớp cha có thể được lớp con access thông qua `implicit receiver` and `explicit receiver`. Còn private method thì chỉ có thể được access thông qua `implicit receiver`.\n\n:one: **Implicit receiver**: Không chỉ định đối tượng sẽ thực hiện phương thức.\n\n:two: **Explicit receiver**: Chỉ định rõ ràng đối tượng sẽ thực hiện phương thức.\n\n# Kết luận\n\nNếu có đóng góp về bài viết hoặc ghét thái độ tác giả viết bài sơ sài hời hợt thì hãy để lại bình luận nhé.\n","source":"_posts/2019-06-11-public-private-va-protected-method-trong-ruby.md","raw":"---\ntitle: \"Public, Private Và Protected\"\ndate: 2019-06-11\ndraft: false\ntags: [\"RUBY\"]\ncategories: [\"RUBY\"]\n\n---\n\n# Đặt vấn đề\n\nKhi còn học đại học, chúng ta được học về tầm vực của các phương thức như sau:\n\n1. Public phương thức, gọi ở đâu cũng được chỉ cần đảm bảo đã include cái class khai báo phương thức đó là được.\n\n2. Protected phương thức, gọi ở chính class khai báo nó, ngoài ra còn có thẻ gọi ở các lớp kế thừa class khai báo phương thức này.\n\n3. Private phương thức, gọi ở chính class mà nó được khai báo, ngoài ra...à mà quên không có ngoài ra, chỉ vậy thôi.\n\nNhững trích rút trên dựa theo ngôn ngữ mà chúng ta cùng theo đuổi ngày đại học C++. Vậy với Ruby? Liệu những phát biểu trên liệu còn đúng?\n\n# Luận bàn\n\nKhông, những trích rút trên không còn đúng đắn hoàn toàn với ngôn ngữ Ruby. Có một số khác biệt. Trong bài viết này chúng ta sẽ đi sơ qua về nó.\n\n\"Mà sao lại là sơ qua? sao bài nào cũng dùng từ đi sơ qua mà không phải là \"đíp đờ rai tu\" gì đó, viết blog kiểu cơm nguội như này viết làm gì (angry).\"\n\n=> Vì đây không phải kiến thức cao siêu gì cả, có vô vàn tài liệu anh ngữ đề cập đến nó rồi và tôi không thấy cái lý do gì để cố đọc tài liệu thật nhiều, translate thật đã tay, rồi vietsub ra một bài viết dài như sông Hồng để nói về một chủ đề vô cùng normal để thể hiện bản thân cả :smile:\n\n# Lấy một ví dụ\n\n```ruby\nclass Cat\n  # default public method\n  def cat_hello_public\n    puts \"T*o ngao ngao public mot cach quy toc\"\n  end\n\n  protected\n\n  def cat_hello_protected\n    puts \"T*o ngao ngao protected mot cach sexy\"\n  end\n\n  private\n\n  def cat_hello_private\n    puts \"T*o ngao ngao private mot  cach len lut\"\n  end\nend\n```\n\nRa ngoài scope của class này rồi chạy:\n\n```ruby\nCat.new.cat_hello_public\n# => T*o ngao ngao public mot cach quy toc.\nCat.new.cat_hello_protected\n# => error\nCat.new.cat_hello_private\n# => error\n```\n\n**Note:** public có thể gọi ngoài tầm vực của một class, những method còn lại thì không. Đồng nghĩa với việc bạn chỉ cần đảm bảo ref được file chưa class có phương thức public đó thì bạn có thể thoải mái gọi phương thức này.\n\n# Thêm một class con kế thừa\n\n```ruby\nclass YellowCat < Cat; end\n```\n\nChạy:\n\n```ruby\nYellowCat.new.cat_hello_public\n# => T*o ngao ngao public mot cach quy toc.\n```\n\n**Note:** Phương thức public có thể được gọi công khai bởi class kế thừa của class chưa phương thức đó.\n\n# Gọi 3 phương thức Cat trong một method thuộc YellowCat\n\n```ruby\nclass YellowCat < Cat\n  def yellow_cat\n    cat_hello_public\n    cat_hello_protected\n    cat_hello_private\n  end\nend\n```\n\nChạy:\n\n```ruby\nYellowCat.new.yellow_cat\n# => T*o ngao ngao public mot cach quy toc\n# => T*o ngao ngao protected mot cach sexy\n# => T*o ngao ngao private mot  cach len lut\n```\n\n**Note:** Cả 3 dạng phương thức đều có thể được gọi trong lớp con (Trong lớp con nhé).\n\n# Trong phương thức yellow_cat khai báo một đối tượng Cat và gọi tới 3 phương thức\n\n```ruby\nclass YellowCat < Cat\n  def yellow_cat\n    cat = Cat.new\n    cat.cat_hello_public\n    cat.cat_hello_protected\n    cat.cat_hello_private\n  end\nend\n```\n\nChạy:\n\n```ruby\nYellowCat.new.yellow_cat\n# => T*o ngao ngao public mot cach quy toc\n# => T*o ngao ngao protected mot cach sexy\n# =>  error\n```\n\n:arrow_right: **Note:** Trong một lớp con kế thừa từ lớp cha, public và protected method của lớp cha có thể được lớp con access thông qua `implicit receiver` and `explicit receiver`. Còn private method thì chỉ có thể được access thông qua `implicit receiver`.\n\n:one: **Implicit receiver**: Không chỉ định đối tượng sẽ thực hiện phương thức.\n\n:two: **Explicit receiver**: Chỉ định rõ ràng đối tượng sẽ thực hiện phương thức.\n\n# Kết luận\n\nNếu có đóng góp về bài viết hoặc ghét thái độ tác giả viết bài sơ sài hời hợt thì hãy để lại bình luận nhé.\n","slug":"2019-06-11-public-private-va-protected-method-trong-ruby","published":1,"updated":"2019-12-06T15:39:42.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7sugh00285rrscgbe2u5j","content":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Khi còn học đại học, chúng ta được học về tầm vực của các phương thức như sau:</p>\n<ol>\n<li><p>Public phương thức, gọi ở đâu cũng được chỉ cần đảm bảo đã include cái class khai báo phương thức đó là được.</p>\n</li>\n<li><p>Protected phương thức, gọi ở chính class khai báo nó, ngoài ra còn có thẻ gọi ở các lớp kế thừa class khai báo phương thức này.</p>\n</li>\n<li><p>Private phương thức, gọi ở chính class mà nó được khai báo, ngoài ra…à mà quên không có ngoài ra, chỉ vậy thôi.</p>\n</li>\n</ol>\n<p>Những trích rút trên dựa theo ngôn ngữ mà chúng ta cùng theo đuổi ngày đại học C++. Vậy với Ruby? Liệu những phát biểu trên liệu còn đúng?</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><p>Không, những trích rút trên không còn đúng đắn hoàn toàn với ngôn ngữ Ruby. Có một số khác biệt. Trong bài viết này chúng ta sẽ đi sơ qua về nó.</p>\n<p>“Mà sao lại là sơ qua? sao bài nào cũng dùng từ đi sơ qua mà không phải là “đíp đờ rai tu” gì đó, viết blog kiểu cơm nguội như này viết làm gì (angry).”</p>\n<p>=&gt; Vì đây không phải kiến thức cao siêu gì cả, có vô vàn tài liệu anh ngữ đề cập đến nó rồi và tôi không thấy cái lý do gì để cố đọc tài liệu thật nhiều, translate thật đã tay, rồi vietsub ra một bài viết dài như sông Hồng để nói về một chủ đề vô cùng normal để thể hiện bản thân cả :smile:</p>\n<h1 id=\"Lay-mot-vi-du\"><a href=\"#Lay-mot-vi-du\" class=\"headerlink\" title=\"Lấy một ví dụ\"></a>Lấy một ví dụ</h1><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span></span></span><br><span class=\"line\">  <span class=\"comment\"># default public method</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cat_hello_public</span></span></span><br><span class=\"line\">    puts <span class=\"string\">\"T*o ngao ngao public mot cach quy toc\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  protected</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cat_hello_protected</span></span></span><br><span class=\"line\">    puts <span class=\"string\">\"T*o ngao ngao protected mot cach sexy\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  private</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cat_hello_private</span></span></span><br><span class=\"line\">    puts <span class=\"string\">\"T*o ngao ngao private mot  cach len lut\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Ra ngoài scope của class này rồi chạy:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cat.new.cat_hello_public</span><br><span class=\"line\"><span class=\"comment\"># =&gt; T*o ngao ngao public mot cach quy toc.</span></span><br><span class=\"line\">Cat.new.cat_hello_protected</span><br><span class=\"line\"><span class=\"comment\"># =&gt; error</span></span><br><span class=\"line\">Cat.new.cat_hello_private</span><br><span class=\"line\"><span class=\"comment\"># =&gt; error</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Note:</strong> public có thể gọi ngoài tầm vực của một class, những method còn lại thì không. Đồng nghĩa với việc bạn chỉ cần đảm bảo ref được file chưa class có phương thức public đó thì bạn có thể thoải mái gọi phương thức này.</p>\n<h1 id=\"Them-mot-class-con-ke-thua\"><a href=\"#Them-mot-class-con-ke-thua\" class=\"headerlink\" title=\"Thêm một class con kế thừa\"></a>Thêm một class con kế thừa</h1><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowCat</span> &lt; Cat;</span> <span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Chạy:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YellowCat.new.cat_hello_public</span><br><span class=\"line\"><span class=\"comment\"># =&gt; T*o ngao ngao public mot cach quy toc.</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Note:</strong> Phương thức public có thể được gọi công khai bởi class kế thừa của class chưa phương thức đó.</p>\n<h1 id=\"Goi-3-phuong-thuc-Cat-trong-mot-method-thuoc-YellowCat\"><a href=\"#Goi-3-phuong-thuc-Cat-trong-mot-method-thuoc-YellowCat\" class=\"headerlink\" title=\"Gọi 3 phương thức Cat trong một method thuộc YellowCat\"></a>Gọi 3 phương thức Cat trong một method thuộc YellowCat</h1><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowCat</span> &lt; Cat</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">yellow_cat</span></span></span><br><span class=\"line\">    cat_hello_public</span><br><span class=\"line\">    cat_hello_protected</span><br><span class=\"line\">    cat_hello_private</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Chạy:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YellowCat.new.yellow_cat</span><br><span class=\"line\"><span class=\"comment\"># =&gt; T*o ngao ngao public mot cach quy toc</span></span><br><span class=\"line\"><span class=\"comment\"># =&gt; T*o ngao ngao protected mot cach sexy</span></span><br><span class=\"line\"><span class=\"comment\"># =&gt; T*o ngao ngao private mot  cach len lut</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Note:</strong> Cả 3 dạng phương thức đều có thể được gọi trong lớp con (Trong lớp con nhé).</p>\n<h1 id=\"Trong-phuong-thuc-yellow-cat-khai-bao-mot-doi-tuong-Cat-va-goi-toi-3-phuong-thuc\"><a href=\"#Trong-phuong-thuc-yellow-cat-khai-bao-mot-doi-tuong-Cat-va-goi-toi-3-phuong-thuc\" class=\"headerlink\" title=\"Trong phương thức yellow_cat khai báo một đối tượng Cat và gọi tới 3 phương thức\"></a>Trong phương thức yellow_cat khai báo một đối tượng Cat và gọi tới 3 phương thức</h1><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowCat</span> &lt; Cat</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">yellow_cat</span></span></span><br><span class=\"line\">    cat = Cat.new</span><br><span class=\"line\">    cat.cat_hello_public</span><br><span class=\"line\">    cat.cat_hello_protected</span><br><span class=\"line\">    cat.cat_hello_private</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Chạy:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YellowCat.new.yellow_cat</span><br><span class=\"line\"><span class=\"comment\"># =&gt; T*o ngao ngao public mot cach quy toc</span></span><br><span class=\"line\"><span class=\"comment\"># =&gt; T*o ngao ngao protected mot cach sexy</span></span><br><span class=\"line\"><span class=\"comment\"># =&gt;  error</span></span><br></pre></td></tr></table></figure>\n\n<p>:arrow_right: <strong>Note:</strong> Trong một lớp con kế thừa từ lớp cha, public và protected method của lớp cha có thể được lớp con access thông qua <code>implicit receiver</code> and <code>explicit receiver</code>. Còn private method thì chỉ có thể được access thông qua <code>implicit receiver</code>.</p>\n<p>:one: <strong>Implicit receiver</strong>: Không chỉ định đối tượng sẽ thực hiện phương thức.</p>\n<p>:two: <strong>Explicit receiver</strong>: Chỉ định rõ ràng đối tượng sẽ thực hiện phương thức.</p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Nếu có đóng góp về bài viết hoặc ghét thái độ tác giả viết bài sơ sài hời hợt thì hãy để lại bình luận nhé.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Khi còn học đại học, chúng ta được học về tầm vực của các phương thức như sau:</p>\n<ol>\n<li><p>Public phương thức, gọi ở đâu cũng được chỉ cần đảm bảo đã include cái class khai báo phương thức đó là được.</p>\n</li>\n<li><p>Protected phương thức, gọi ở chính class khai báo nó, ngoài ra còn có thẻ gọi ở các lớp kế thừa class khai báo phương thức này.</p>\n</li>\n<li><p>Private phương thức, gọi ở chính class mà nó được khai báo, ngoài ra…à mà quên không có ngoài ra, chỉ vậy thôi.</p>\n</li>\n</ol>\n<p>Những trích rút trên dựa theo ngôn ngữ mà chúng ta cùng theo đuổi ngày đại học C++. Vậy với Ruby? Liệu những phát biểu trên liệu còn đúng?</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><p>Không, những trích rút trên không còn đúng đắn hoàn toàn với ngôn ngữ Ruby. Có một số khác biệt. Trong bài viết này chúng ta sẽ đi sơ qua về nó.</p>\n<p>“Mà sao lại là sơ qua? sao bài nào cũng dùng từ đi sơ qua mà không phải là “đíp đờ rai tu” gì đó, viết blog kiểu cơm nguội như này viết làm gì (angry).”</p>\n<p>=&gt; Vì đây không phải kiến thức cao siêu gì cả, có vô vàn tài liệu anh ngữ đề cập đến nó rồi và tôi không thấy cái lý do gì để cố đọc tài liệu thật nhiều, translate thật đã tay, rồi vietsub ra một bài viết dài như sông Hồng để nói về một chủ đề vô cùng normal để thể hiện bản thân cả :smile:</p>\n<h1 id=\"Lay-mot-vi-du\"><a href=\"#Lay-mot-vi-du\" class=\"headerlink\" title=\"Lấy một ví dụ\"></a>Lấy một ví dụ</h1><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span></span></span><br><span class=\"line\">  <span class=\"comment\"># default public method</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cat_hello_public</span></span></span><br><span class=\"line\">    puts <span class=\"string\">\"T*o ngao ngao public mot cach quy toc\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  protected</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cat_hello_protected</span></span></span><br><span class=\"line\">    puts <span class=\"string\">\"T*o ngao ngao protected mot cach sexy\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  private</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cat_hello_private</span></span></span><br><span class=\"line\">    puts <span class=\"string\">\"T*o ngao ngao private mot  cach len lut\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Ra ngoài scope của class này rồi chạy:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cat.new.cat_hello_public</span><br><span class=\"line\"><span class=\"comment\"># =&gt; T*o ngao ngao public mot cach quy toc.</span></span><br><span class=\"line\">Cat.new.cat_hello_protected</span><br><span class=\"line\"><span class=\"comment\"># =&gt; error</span></span><br><span class=\"line\">Cat.new.cat_hello_private</span><br><span class=\"line\"><span class=\"comment\"># =&gt; error</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Note:</strong> public có thể gọi ngoài tầm vực của một class, những method còn lại thì không. Đồng nghĩa với việc bạn chỉ cần đảm bảo ref được file chưa class có phương thức public đó thì bạn có thể thoải mái gọi phương thức này.</p>\n<h1 id=\"Them-mot-class-con-ke-thua\"><a href=\"#Them-mot-class-con-ke-thua\" class=\"headerlink\" title=\"Thêm một class con kế thừa\"></a>Thêm một class con kế thừa</h1><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowCat</span> &lt; Cat;</span> <span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Chạy:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YellowCat.new.cat_hello_public</span><br><span class=\"line\"><span class=\"comment\"># =&gt; T*o ngao ngao public mot cach quy toc.</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Note:</strong> Phương thức public có thể được gọi công khai bởi class kế thừa của class chưa phương thức đó.</p>\n<h1 id=\"Goi-3-phuong-thuc-Cat-trong-mot-method-thuoc-YellowCat\"><a href=\"#Goi-3-phuong-thuc-Cat-trong-mot-method-thuoc-YellowCat\" class=\"headerlink\" title=\"Gọi 3 phương thức Cat trong một method thuộc YellowCat\"></a>Gọi 3 phương thức Cat trong một method thuộc YellowCat</h1><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowCat</span> &lt; Cat</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">yellow_cat</span></span></span><br><span class=\"line\">    cat_hello_public</span><br><span class=\"line\">    cat_hello_protected</span><br><span class=\"line\">    cat_hello_private</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Chạy:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YellowCat.new.yellow_cat</span><br><span class=\"line\"><span class=\"comment\"># =&gt; T*o ngao ngao public mot cach quy toc</span></span><br><span class=\"line\"><span class=\"comment\"># =&gt; T*o ngao ngao protected mot cach sexy</span></span><br><span class=\"line\"><span class=\"comment\"># =&gt; T*o ngao ngao private mot  cach len lut</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Note:</strong> Cả 3 dạng phương thức đều có thể được gọi trong lớp con (Trong lớp con nhé).</p>\n<h1 id=\"Trong-phuong-thuc-yellow-cat-khai-bao-mot-doi-tuong-Cat-va-goi-toi-3-phuong-thuc\"><a href=\"#Trong-phuong-thuc-yellow-cat-khai-bao-mot-doi-tuong-Cat-va-goi-toi-3-phuong-thuc\" class=\"headerlink\" title=\"Trong phương thức yellow_cat khai báo một đối tượng Cat và gọi tới 3 phương thức\"></a>Trong phương thức yellow_cat khai báo một đối tượng Cat và gọi tới 3 phương thức</h1><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowCat</span> &lt; Cat</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">yellow_cat</span></span></span><br><span class=\"line\">    cat = Cat.new</span><br><span class=\"line\">    cat.cat_hello_public</span><br><span class=\"line\">    cat.cat_hello_protected</span><br><span class=\"line\">    cat.cat_hello_private</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Chạy:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YellowCat.new.yellow_cat</span><br><span class=\"line\"><span class=\"comment\"># =&gt; T*o ngao ngao public mot cach quy toc</span></span><br><span class=\"line\"><span class=\"comment\"># =&gt; T*o ngao ngao protected mot cach sexy</span></span><br><span class=\"line\"><span class=\"comment\"># =&gt;  error</span></span><br></pre></td></tr></table></figure>\n\n<p>:arrow_right: <strong>Note:</strong> Trong một lớp con kế thừa từ lớp cha, public và protected method của lớp cha có thể được lớp con access thông qua <code>implicit receiver</code> and <code>explicit receiver</code>. Còn private method thì chỉ có thể được access thông qua <code>implicit receiver</code>.</p>\n<p>:one: <strong>Implicit receiver</strong>: Không chỉ định đối tượng sẽ thực hiện phương thức.</p>\n<p>:two: <strong>Explicit receiver</strong>: Chỉ định rõ ràng đối tượng sẽ thực hiện phương thức.</p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Nếu có đóng góp về bài viết hoặc ghét thái độ tác giả viết bài sơ sài hời hợt thì hãy để lại bình luận nhé.</p>\n"},{"title":"Từ Khoá Super Trong Ruby?","date":"2019-06-15T17:00:00.000Z","draft":false,"_content":"\n# Đặt vấn đề\n\nKế thừa là một 1 trong 4 yếu tố cốt lõi tạo nên đặc tính hướng đối tượng của một ngôn ngữ (như những gì chúng ta đã được dạy ở trường). Riêng điều đó thôi đã đủ để thể hiện tầm quan trọng của nó (có thật không nhỉ :grimacing:).\n\nTrong ngôn ngữ ruby có một từ khoá thường xuyên xuất hiện khi cần kế thừa hay override lại phương thức lớp cha đó là `super`.\n\nQua bài viết chúng ta sẽ cùng tìm hiểu về nó.\n\n# Luận bàn\n\n# 1. Định nghĩa\n\n```\nIt calls a method on the parent class with the same name as the method that calls super.\n```\n\nVí dụ:\n\n```ruby\nclass Dog < Pig\n  def testing\n    super\n  end\nend\n```\n\n=> Khi ta gọi phương thức `testing` với một instance của lớp Dog, ruby sẽ đi đến class cha/ông/cụ/kỵ... của `Dog` để tìm và chạy phương thức `testing` được implement ở lớp cha/ông/cụ/kỵ... đó.\n\n# 2. So sánh super và super()\n\nVới những bạn mới học, chúng ta đôi lúc sẽ nhầm lẫn là 2 cách gọi này thực chất là một, cũng bởi vì ruby cho phép sử dụng `()` như một optional, tức là có cũng được mà không có cũng được.\n\nNhưng thực ra không phải vậy, 2 cách sử dụng này sẽ dẫn đến các kết qủa khác nhau.\n\nCùng xét một ví dụ: Giả sử tôi có class Cat và một class con của Cat tên là YellowCat, mã nguồn như sau.\n\nSử dụng super\n\n```ruby\nclass Cat\n  def initialize\n    puts \"i'm meo\"\n  end\nend\n\nclass YellowCat < Cat\n  def initialize\n    super\n  end\nend\n\nYellowCat.new\n\n# => i'm meo\n```\n\nSử dụng super()\n\n```ruby\nclass Cat\n  def initialize\n    puts \"i'm meo\"\n  end\nend\n\nclass YellowCat < Cat\n  def initialize\n    super\n  end\nend\n\nYellowCat.new\n\n# => i'm meo\n```\n\n**Kết quả là tương tự nhau, điều này giúp chúng ta ghi nhớ một ý, đó là khi không có tham số truyền vào method thì dùng `super` hay `super()` là tương đương nhau**\n\nTa xét một ví dụ khác:\n\nSử dụng super\n\n```ruby\nclass Cat\n  attr_accessor :name\n\n  def initialize(name)\n    @name = name\n  end\nend\n\nclass YellowCat < Cat\n  def initialize(name)\n    super\n  end\nend\n\nmeo = YellowCat.new('mi mi')\n\nputs \"ten meo: #{meo.name}\"\n# => ten meo: mi mi\n```\n\nSử dụng super()\n\n```ruby\nclass Cat\n  attr_accessor :name\n\n  def initialize(name)\n    @name = name\n  end\nend\n\nclass YellowCat < Cat\n  def initialize(name)\n    super()\n  end\nend\n\nmeo = YellowCat.new('mi mi')\n\nputs \"ten meo: #{meo.name}\"\n# => ten meo: mi mi\n```\n\nĐến bây giờ chúng ta đã phát sinh một lỗi `wrong number of arguments (given 0, expected 1)`.\nĐiều này xảy ra là vì:\n\n**Với từ khoá `super` bạn sẽ truyền TẤT CẢ tham số lên method đó ở lớp cha. Còn với `super()` bạn chỉ truyền lên lớp cha những tham số mà bạn bỏ vào trong `super()`.**\n\nNhư ta thấy trong ví dụ trên, ta không bỏ gì vào `super()` => khi lên lớp cha (lớp Cat) method initialize yêu cầu tham số name nhưng chúng ta không truyền gì lên và từ đó dẫn đến lỗi wrong number of arguments.\n\nĐể khắc phục chúng ta chỉ cần truyền tham số vào super() để lớp Cat nhân được tham số đó.\n\n```ruby\nclass YellowCat < Cat\n  def initialize(name)\n    super(name)\n  end\nend\n```\n\n# 3. Sự hữu ích của super()\n\nTôi có một bài toán:\n\n:one: Tôi có 1 lớp Cat với 2 instance variable là name và age.\n:two: Lớp YellowCat là lớp con của Cat.\n:three: Lớp YellowCat có thêm 1 instance variable là role.\n\nXây dựng lớp Cat có vẻ đơn giản, ta làm như sau:\n\n```ruby\nclass Cat < Animal\n  attr_accessor :name, :age\n\n  def initialize(name, age)\n    @name = name\n    @age = age\n  end\nend\n\n# => hoàn thành yêu cầu\n```\n\nTiếp theo đến lớp  YellowCat, xem chừng cũng không khó:\n\n```ruby\nclass YellowCat < Cat\n  attr_accessor :yellow_cat_name, :yellow_cat_age, :role\n\n  def initialize(yellow_cat_name, yellow_cat_age, role)\n    @yellow_cat_name = yellow_cat_name\n    @yellow_cat_age = yellow_cat_age\n    @role = role\n  end\nend\n\n# => Cũng hoàn thành yêu cầu.\n```\n\nCách này cũng hoàn thành được yêu cầu của bài toán, nhưng nó không ổn tí nào. Vì sao? Vì khi bạn tạo một instance thuộc lớp YellowCat nó sẽ có tổng cộng 5 instance variable bao gồm 3 instance variable khai báo trong lớp YellowCat, và 2 trong lớp Cat (bị thừa 2 instance variable).\n\nĐiều này đi ngược lại với các quy tắc lập trình quan trọng chúng ta cần tuần thủ như DRY.\n\nĐến đây sức mạnh `super()` sẽ được thời cơ để thể hiện. Ta sẽ optimize lại mã nguồn của YellowCat như sau:\n\n```ruby\nclass YellowCat < Cat\n  # thêm một instance variable\n  attr_accessor :role\n\n  def initialize(name, age, role)\n    super(name, age)\n    @role = role\n  end\nend\n\nmeo2 = YellowCat.new('ni ni', 10, 'admin')\nputs \"ten meo la: #{meo2.name} \\ntuoi meo la: #{meo2.age} \\nrole cua meo la: #{meo2.role}\"\n\n# => ten meo la: ni ni\n# => tuoi meo la: 10\n# => role cua meo la: admin\n```\n\nỞ lớp con chúng ta có thêm 1 instance variable, chúng ta khai báo cho mình nó và duy nhất mỗi nó :arrow_right: không lãng phí vùng nhớ và tận dụng được mã nguồn cũ.\n\nTrong phương thức khởi tạo đối tượng YellowCat chúng ta khởi tạo biến instance mới, còn 2 instance variable được kế thừa từ lớp cha thì ta truyền tham số vào `super()` để truyền lên lớp cha và mặc kệ lớp cha xử lý thế nào thì tuỳ.\n\n# Kết luận\n\nTài liệu tham khảo:\n[1] [odetocode.com](https://odetocode.com/blogs/scott/archive/2010/07/13/ruby-initialize-and-super.aspx)\n","source":"_posts/2019-06-16-tu-khoa-super-trong-ruby.md","raw":"---\ntitle: \"Từ Khoá Super Trong Ruby?\"\ndate: 2019-06-16\ndraft: false\ntags: [\"RUBY\"]\ncategories: [\"RUBY\"]\n\n---\n\n# Đặt vấn đề\n\nKế thừa là một 1 trong 4 yếu tố cốt lõi tạo nên đặc tính hướng đối tượng của một ngôn ngữ (như những gì chúng ta đã được dạy ở trường). Riêng điều đó thôi đã đủ để thể hiện tầm quan trọng của nó (có thật không nhỉ :grimacing:).\n\nTrong ngôn ngữ ruby có một từ khoá thường xuyên xuất hiện khi cần kế thừa hay override lại phương thức lớp cha đó là `super`.\n\nQua bài viết chúng ta sẽ cùng tìm hiểu về nó.\n\n# Luận bàn\n\n# 1. Định nghĩa\n\n```\nIt calls a method on the parent class with the same name as the method that calls super.\n```\n\nVí dụ:\n\n```ruby\nclass Dog < Pig\n  def testing\n    super\n  end\nend\n```\n\n=> Khi ta gọi phương thức `testing` với một instance của lớp Dog, ruby sẽ đi đến class cha/ông/cụ/kỵ... của `Dog` để tìm và chạy phương thức `testing` được implement ở lớp cha/ông/cụ/kỵ... đó.\n\n# 2. So sánh super và super()\n\nVới những bạn mới học, chúng ta đôi lúc sẽ nhầm lẫn là 2 cách gọi này thực chất là một, cũng bởi vì ruby cho phép sử dụng `()` như một optional, tức là có cũng được mà không có cũng được.\n\nNhưng thực ra không phải vậy, 2 cách sử dụng này sẽ dẫn đến các kết qủa khác nhau.\n\nCùng xét một ví dụ: Giả sử tôi có class Cat và một class con của Cat tên là YellowCat, mã nguồn như sau.\n\nSử dụng super\n\n```ruby\nclass Cat\n  def initialize\n    puts \"i'm meo\"\n  end\nend\n\nclass YellowCat < Cat\n  def initialize\n    super\n  end\nend\n\nYellowCat.new\n\n# => i'm meo\n```\n\nSử dụng super()\n\n```ruby\nclass Cat\n  def initialize\n    puts \"i'm meo\"\n  end\nend\n\nclass YellowCat < Cat\n  def initialize\n    super\n  end\nend\n\nYellowCat.new\n\n# => i'm meo\n```\n\n**Kết quả là tương tự nhau, điều này giúp chúng ta ghi nhớ một ý, đó là khi không có tham số truyền vào method thì dùng `super` hay `super()` là tương đương nhau**\n\nTa xét một ví dụ khác:\n\nSử dụng super\n\n```ruby\nclass Cat\n  attr_accessor :name\n\n  def initialize(name)\n    @name = name\n  end\nend\n\nclass YellowCat < Cat\n  def initialize(name)\n    super\n  end\nend\n\nmeo = YellowCat.new('mi mi')\n\nputs \"ten meo: #{meo.name}\"\n# => ten meo: mi mi\n```\n\nSử dụng super()\n\n```ruby\nclass Cat\n  attr_accessor :name\n\n  def initialize(name)\n    @name = name\n  end\nend\n\nclass YellowCat < Cat\n  def initialize(name)\n    super()\n  end\nend\n\nmeo = YellowCat.new('mi mi')\n\nputs \"ten meo: #{meo.name}\"\n# => ten meo: mi mi\n```\n\nĐến bây giờ chúng ta đã phát sinh một lỗi `wrong number of arguments (given 0, expected 1)`.\nĐiều này xảy ra là vì:\n\n**Với từ khoá `super` bạn sẽ truyền TẤT CẢ tham số lên method đó ở lớp cha. Còn với `super()` bạn chỉ truyền lên lớp cha những tham số mà bạn bỏ vào trong `super()`.**\n\nNhư ta thấy trong ví dụ trên, ta không bỏ gì vào `super()` => khi lên lớp cha (lớp Cat) method initialize yêu cầu tham số name nhưng chúng ta không truyền gì lên và từ đó dẫn đến lỗi wrong number of arguments.\n\nĐể khắc phục chúng ta chỉ cần truyền tham số vào super() để lớp Cat nhân được tham số đó.\n\n```ruby\nclass YellowCat < Cat\n  def initialize(name)\n    super(name)\n  end\nend\n```\n\n# 3. Sự hữu ích của super()\n\nTôi có một bài toán:\n\n:one: Tôi có 1 lớp Cat với 2 instance variable là name và age.\n:two: Lớp YellowCat là lớp con của Cat.\n:three: Lớp YellowCat có thêm 1 instance variable là role.\n\nXây dựng lớp Cat có vẻ đơn giản, ta làm như sau:\n\n```ruby\nclass Cat < Animal\n  attr_accessor :name, :age\n\n  def initialize(name, age)\n    @name = name\n    @age = age\n  end\nend\n\n# => hoàn thành yêu cầu\n```\n\nTiếp theo đến lớp  YellowCat, xem chừng cũng không khó:\n\n```ruby\nclass YellowCat < Cat\n  attr_accessor :yellow_cat_name, :yellow_cat_age, :role\n\n  def initialize(yellow_cat_name, yellow_cat_age, role)\n    @yellow_cat_name = yellow_cat_name\n    @yellow_cat_age = yellow_cat_age\n    @role = role\n  end\nend\n\n# => Cũng hoàn thành yêu cầu.\n```\n\nCách này cũng hoàn thành được yêu cầu của bài toán, nhưng nó không ổn tí nào. Vì sao? Vì khi bạn tạo một instance thuộc lớp YellowCat nó sẽ có tổng cộng 5 instance variable bao gồm 3 instance variable khai báo trong lớp YellowCat, và 2 trong lớp Cat (bị thừa 2 instance variable).\n\nĐiều này đi ngược lại với các quy tắc lập trình quan trọng chúng ta cần tuần thủ như DRY.\n\nĐến đây sức mạnh `super()` sẽ được thời cơ để thể hiện. Ta sẽ optimize lại mã nguồn của YellowCat như sau:\n\n```ruby\nclass YellowCat < Cat\n  # thêm một instance variable\n  attr_accessor :role\n\n  def initialize(name, age, role)\n    super(name, age)\n    @role = role\n  end\nend\n\nmeo2 = YellowCat.new('ni ni', 10, 'admin')\nputs \"ten meo la: #{meo2.name} \\ntuoi meo la: #{meo2.age} \\nrole cua meo la: #{meo2.role}\"\n\n# => ten meo la: ni ni\n# => tuoi meo la: 10\n# => role cua meo la: admin\n```\n\nỞ lớp con chúng ta có thêm 1 instance variable, chúng ta khai báo cho mình nó và duy nhất mỗi nó :arrow_right: không lãng phí vùng nhớ và tận dụng được mã nguồn cũ.\n\nTrong phương thức khởi tạo đối tượng YellowCat chúng ta khởi tạo biến instance mới, còn 2 instance variable được kế thừa từ lớp cha thì ta truyền tham số vào `super()` để truyền lên lớp cha và mặc kệ lớp cha xử lý thế nào thì tuỳ.\n\n# Kết luận\n\nTài liệu tham khảo:\n[1] [odetocode.com](https://odetocode.com/blogs/scott/archive/2010/07/13/ruby-initialize-and-super.aspx)\n","slug":"2019-06-16-tu-khoa-super-trong-ruby","published":1,"updated":"2019-12-06T15:39:52.594Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7sugk002d5rrs495qakfy","content":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Kế thừa là một 1 trong 4 yếu tố cốt lõi tạo nên đặc tính hướng đối tượng của một ngôn ngữ (như những gì chúng ta đã được dạy ở trường). Riêng điều đó thôi đã đủ để thể hiện tầm quan trọng của nó (có thật không nhỉ :grimacing:).</p>\n<p>Trong ngôn ngữ ruby có một từ khoá thường xuyên xuất hiện khi cần kế thừa hay override lại phương thức lớp cha đó là <code>super</code>.</p>\n<p>Qua bài viết chúng ta sẽ cùng tìm hiểu về nó.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-Dinh-nghia\"><a href=\"#1-Dinh-nghia\" class=\"headerlink\" title=\"1. Định nghĩa\"></a>1. Định nghĩa</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">It calls a method on the parent class with the same name as the method that calls super.</span><br></pre></td></tr></table></figure>\n\n<p>Ví dụ:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> &lt; Pig</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testing</span></span></span><br><span class=\"line\">    <span class=\"keyword\">super</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>=&gt; Khi ta gọi phương thức <code>testing</code> với một instance của lớp Dog, ruby sẽ đi đến class cha/ông/cụ/kỵ… của <code>Dog</code> để tìm và chạy phương thức <code>testing</code> được implement ở lớp cha/ông/cụ/kỵ… đó.</p>\n<h1 id=\"2-So-sanh-super-va-super\"><a href=\"#2-So-sanh-super-va-super\" class=\"headerlink\" title=\"2. So sánh super và super()\"></a>2. So sánh super và super()</h1><p>Với những bạn mới học, chúng ta đôi lúc sẽ nhầm lẫn là 2 cách gọi này thực chất là một, cũng bởi vì ruby cho phép sử dụng <code>()</code> như một optional, tức là có cũng được mà không có cũng được.</p>\n<p>Nhưng thực ra không phải vậy, 2 cách sử dụng này sẽ dẫn đến các kết qủa khác nhau.</p>\n<p>Cùng xét một ví dụ: Giả sử tôi có class Cat và một class con của Cat tên là YellowCat, mã nguồn như sau.</p>\n<p>Sử dụng super</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span></span></span><br><span class=\"line\">    puts <span class=\"string\">\"i'm meo\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowCat</span> &lt; Cat</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span></span></span><br><span class=\"line\">    <span class=\"keyword\">super</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">YellowCat.new</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># =&gt; i'm meo</span></span><br></pre></td></tr></table></figure>\n\n<p>Sử dụng super()</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span></span></span><br><span class=\"line\">    puts <span class=\"string\">\"i'm meo\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowCat</span> &lt; Cat</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span></span></span><br><span class=\"line\">    <span class=\"keyword\">super</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">YellowCat.new</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># =&gt; i'm meo</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Kết quả là tương tự nhau, điều này giúp chúng ta ghi nhớ một ý, đó là khi không có tham số truyền vào method thì dùng <code>super</code> hay <code>super()</code> là tương đương nhau</strong></p>\n<p>Ta xét một ví dụ khác:</p>\n<p>Sử dụng super</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span></span></span><br><span class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:name</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(name)</span></span></span><br><span class=\"line\">    @name = name</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowCat</span> &lt; Cat</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(name)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">super</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">meo = YellowCat.new(<span class=\"string\">'mi mi'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">\"ten meo: <span class=\"subst\">#&#123;meo.name&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"comment\"># =&gt; ten meo: mi mi</span></span><br></pre></td></tr></table></figure>\n\n<p>Sử dụng super()</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span></span></span><br><span class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:name</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(name)</span></span></span><br><span class=\"line\">    @name = name</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowCat</span> &lt; Cat</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(name)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">super</span>()</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">meo = YellowCat.new(<span class=\"string\">'mi mi'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">\"ten meo: <span class=\"subst\">#&#123;meo.name&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"comment\"># =&gt; ten meo: mi mi</span></span><br></pre></td></tr></table></figure>\n\n<p>Đến bây giờ chúng ta đã phát sinh một lỗi <code>wrong number of arguments (given 0, expected 1)</code>.<br>Điều này xảy ra là vì:</p>\n<p><strong>Với từ khoá <code>super</code> bạn sẽ truyền TẤT CẢ tham số lên method đó ở lớp cha. Còn với <code>super()</code> bạn chỉ truyền lên lớp cha những tham số mà bạn bỏ vào trong <code>super()</code>.</strong></p>\n<p>Như ta thấy trong ví dụ trên, ta không bỏ gì vào <code>super()</code> =&gt; khi lên lớp cha (lớp Cat) method initialize yêu cầu tham số name nhưng chúng ta không truyền gì lên và từ đó dẫn đến lỗi wrong number of arguments.</p>\n<p>Để khắc phục chúng ta chỉ cần truyền tham số vào super() để lớp Cat nhân được tham số đó.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowCat</span> &lt; Cat</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(name)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-Su-huu-ich-cua-super\"><a href=\"#3-Su-huu-ich-cua-super\" class=\"headerlink\" title=\"3. Sự hữu ích của super()\"></a>3. Sự hữu ích của super()</h1><p>Tôi có một bài toán:</p>\n<p>:one: Tôi có 1 lớp Cat với 2 instance variable là name và age.<br>:two: Lớp YellowCat là lớp con của Cat.<br>:three: Lớp YellowCat có thêm 1 instance variable là role.</p>\n<p>Xây dựng lớp Cat có vẻ đơn giản, ta làm như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> &lt; Animal</span></span><br><span class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:name</span>, <span class=\"symbol\">:age</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(name, age)</span></span></span><br><span class=\"line\">    @name = name</span><br><span class=\"line\">    @age = age</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># =&gt; hoàn thành yêu cầu</span></span><br></pre></td></tr></table></figure>\n\n<p>Tiếp theo đến lớp  YellowCat, xem chừng cũng không khó:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowCat</span> &lt; Cat</span></span><br><span class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:yellow_cat_name</span>, <span class=\"symbol\">:yellow_cat_age</span>, <span class=\"symbol\">:role</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(yellow_cat_name, yellow_cat_age, role)</span></span></span><br><span class=\"line\">    @yellow_cat_name = yellow_cat_name</span><br><span class=\"line\">    @yellow_cat_age = yellow_cat_age</span><br><span class=\"line\">    @role = role</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># =&gt; Cũng hoàn thành yêu cầu.</span></span><br></pre></td></tr></table></figure>\n\n<p>Cách này cũng hoàn thành được yêu cầu của bài toán, nhưng nó không ổn tí nào. Vì sao? Vì khi bạn tạo một instance thuộc lớp YellowCat nó sẽ có tổng cộng 5 instance variable bao gồm 3 instance variable khai báo trong lớp YellowCat, và 2 trong lớp Cat (bị thừa 2 instance variable).</p>\n<p>Điều này đi ngược lại với các quy tắc lập trình quan trọng chúng ta cần tuần thủ như DRY.</p>\n<p>Đến đây sức mạnh <code>super()</code> sẽ được thời cơ để thể hiện. Ta sẽ optimize lại mã nguồn của YellowCat như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowCat</span> &lt; Cat</span></span><br><span class=\"line\">  <span class=\"comment\"># thêm một instance variable</span></span><br><span class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:role</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(name, age, role)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name, age)</span><br><span class=\"line\">    @role = role</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">meo2 = YellowCat.new(<span class=\"string\">'ni ni'</span>, <span class=\"number\">10</span>, <span class=\"string\">'admin'</span>)</span><br><span class=\"line\">puts <span class=\"string\">\"ten meo la: <span class=\"subst\">#&#123;meo2.name&#125;</span> \\ntuoi meo la: <span class=\"subst\">#&#123;meo2.age&#125;</span> \\nrole cua meo la: <span class=\"subst\">#&#123;meo2.role&#125;</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># =&gt; ten meo la: ni ni</span></span><br><span class=\"line\"><span class=\"comment\"># =&gt; tuoi meo la: 10</span></span><br><span class=\"line\"><span class=\"comment\"># =&gt; role cua meo la: admin</span></span><br></pre></td></tr></table></figure>\n\n<p>Ở lớp con chúng ta có thêm 1 instance variable, chúng ta khai báo cho mình nó và duy nhất mỗi nó :arrow_right: không lãng phí vùng nhớ và tận dụng được mã nguồn cũ.</p>\n<p>Trong phương thức khởi tạo đối tượng YellowCat chúng ta khởi tạo biến instance mới, còn 2 instance variable được kế thừa từ lớp cha thì ta truyền tham số vào <code>super()</code> để truyền lên lớp cha và mặc kệ lớp cha xử lý thế nào thì tuỳ.</p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Tài liệu tham khảo:<br>[1] <a href=\"https://odetocode.com/blogs/scott/archive/2010/07/13/ruby-initialize-and-super.aspx\" target=\"_blank\" rel=\"noopener\">odetocode.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Dat-van-de\"><a href=\"#Dat-van-de\" class=\"headerlink\" title=\"Đặt vấn đề\"></a>Đặt vấn đề</h1><p>Kế thừa là một 1 trong 4 yếu tố cốt lõi tạo nên đặc tính hướng đối tượng của một ngôn ngữ (như những gì chúng ta đã được dạy ở trường). Riêng điều đó thôi đã đủ để thể hiện tầm quan trọng của nó (có thật không nhỉ :grimacing:).</p>\n<p>Trong ngôn ngữ ruby có một từ khoá thường xuyên xuất hiện khi cần kế thừa hay override lại phương thức lớp cha đó là <code>super</code>.</p>\n<p>Qua bài viết chúng ta sẽ cùng tìm hiểu về nó.</p>\n<h1 id=\"Luan-ban\"><a href=\"#Luan-ban\" class=\"headerlink\" title=\"Luận bàn\"></a>Luận bàn</h1><h1 id=\"1-Dinh-nghia\"><a href=\"#1-Dinh-nghia\" class=\"headerlink\" title=\"1. Định nghĩa\"></a>1. Định nghĩa</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">It calls a method on the parent class with the same name as the method that calls super.</span><br></pre></td></tr></table></figure>\n\n<p>Ví dụ:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> &lt; Pig</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testing</span></span></span><br><span class=\"line\">    <span class=\"keyword\">super</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>=&gt; Khi ta gọi phương thức <code>testing</code> với một instance của lớp Dog, ruby sẽ đi đến class cha/ông/cụ/kỵ… của <code>Dog</code> để tìm và chạy phương thức <code>testing</code> được implement ở lớp cha/ông/cụ/kỵ… đó.</p>\n<h1 id=\"2-So-sanh-super-va-super\"><a href=\"#2-So-sanh-super-va-super\" class=\"headerlink\" title=\"2. So sánh super và super()\"></a>2. So sánh super và super()</h1><p>Với những bạn mới học, chúng ta đôi lúc sẽ nhầm lẫn là 2 cách gọi này thực chất là một, cũng bởi vì ruby cho phép sử dụng <code>()</code> như một optional, tức là có cũng được mà không có cũng được.</p>\n<p>Nhưng thực ra không phải vậy, 2 cách sử dụng này sẽ dẫn đến các kết qủa khác nhau.</p>\n<p>Cùng xét một ví dụ: Giả sử tôi có class Cat và một class con của Cat tên là YellowCat, mã nguồn như sau.</p>\n<p>Sử dụng super</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span></span></span><br><span class=\"line\">    puts <span class=\"string\">\"i'm meo\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowCat</span> &lt; Cat</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span></span></span><br><span class=\"line\">    <span class=\"keyword\">super</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">YellowCat.new</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># =&gt; i'm meo</span></span><br></pre></td></tr></table></figure>\n\n<p>Sử dụng super()</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span></span></span><br><span class=\"line\">    puts <span class=\"string\">\"i'm meo\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowCat</span> &lt; Cat</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span></span></span><br><span class=\"line\">    <span class=\"keyword\">super</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">YellowCat.new</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># =&gt; i'm meo</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Kết quả là tương tự nhau, điều này giúp chúng ta ghi nhớ một ý, đó là khi không có tham số truyền vào method thì dùng <code>super</code> hay <code>super()</code> là tương đương nhau</strong></p>\n<p>Ta xét một ví dụ khác:</p>\n<p>Sử dụng super</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span></span></span><br><span class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:name</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(name)</span></span></span><br><span class=\"line\">    @name = name</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowCat</span> &lt; Cat</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(name)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">super</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">meo = YellowCat.new(<span class=\"string\">'mi mi'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">\"ten meo: <span class=\"subst\">#&#123;meo.name&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"comment\"># =&gt; ten meo: mi mi</span></span><br></pre></td></tr></table></figure>\n\n<p>Sử dụng super()</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span></span></span><br><span class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:name</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(name)</span></span></span><br><span class=\"line\">    @name = name</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowCat</span> &lt; Cat</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(name)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">super</span>()</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">meo = YellowCat.new(<span class=\"string\">'mi mi'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">\"ten meo: <span class=\"subst\">#&#123;meo.name&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"comment\"># =&gt; ten meo: mi mi</span></span><br></pre></td></tr></table></figure>\n\n<p>Đến bây giờ chúng ta đã phát sinh một lỗi <code>wrong number of arguments (given 0, expected 1)</code>.<br>Điều này xảy ra là vì:</p>\n<p><strong>Với từ khoá <code>super</code> bạn sẽ truyền TẤT CẢ tham số lên method đó ở lớp cha. Còn với <code>super()</code> bạn chỉ truyền lên lớp cha những tham số mà bạn bỏ vào trong <code>super()</code>.</strong></p>\n<p>Như ta thấy trong ví dụ trên, ta không bỏ gì vào <code>super()</code> =&gt; khi lên lớp cha (lớp Cat) method initialize yêu cầu tham số name nhưng chúng ta không truyền gì lên và từ đó dẫn đến lỗi wrong number of arguments.</p>\n<p>Để khắc phục chúng ta chỉ cần truyền tham số vào super() để lớp Cat nhân được tham số đó.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowCat</span> &lt; Cat</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(name)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-Su-huu-ich-cua-super\"><a href=\"#3-Su-huu-ich-cua-super\" class=\"headerlink\" title=\"3. Sự hữu ích của super()\"></a>3. Sự hữu ích của super()</h1><p>Tôi có một bài toán:</p>\n<p>:one: Tôi có 1 lớp Cat với 2 instance variable là name và age.<br>:two: Lớp YellowCat là lớp con của Cat.<br>:three: Lớp YellowCat có thêm 1 instance variable là role.</p>\n<p>Xây dựng lớp Cat có vẻ đơn giản, ta làm như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> &lt; Animal</span></span><br><span class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:name</span>, <span class=\"symbol\">:age</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(name, age)</span></span></span><br><span class=\"line\">    @name = name</span><br><span class=\"line\">    @age = age</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># =&gt; hoàn thành yêu cầu</span></span><br></pre></td></tr></table></figure>\n\n<p>Tiếp theo đến lớp  YellowCat, xem chừng cũng không khó:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowCat</span> &lt; Cat</span></span><br><span class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:yellow_cat_name</span>, <span class=\"symbol\">:yellow_cat_age</span>, <span class=\"symbol\">:role</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(yellow_cat_name, yellow_cat_age, role)</span></span></span><br><span class=\"line\">    @yellow_cat_name = yellow_cat_name</span><br><span class=\"line\">    @yellow_cat_age = yellow_cat_age</span><br><span class=\"line\">    @role = role</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># =&gt; Cũng hoàn thành yêu cầu.</span></span><br></pre></td></tr></table></figure>\n\n<p>Cách này cũng hoàn thành được yêu cầu của bài toán, nhưng nó không ổn tí nào. Vì sao? Vì khi bạn tạo một instance thuộc lớp YellowCat nó sẽ có tổng cộng 5 instance variable bao gồm 3 instance variable khai báo trong lớp YellowCat, và 2 trong lớp Cat (bị thừa 2 instance variable).</p>\n<p>Điều này đi ngược lại với các quy tắc lập trình quan trọng chúng ta cần tuần thủ như DRY.</p>\n<p>Đến đây sức mạnh <code>super()</code> sẽ được thời cơ để thể hiện. Ta sẽ optimize lại mã nguồn của YellowCat như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowCat</span> &lt; Cat</span></span><br><span class=\"line\">  <span class=\"comment\"># thêm một instance variable</span></span><br><span class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:role</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(name, age, role)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name, age)</span><br><span class=\"line\">    @role = role</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">meo2 = YellowCat.new(<span class=\"string\">'ni ni'</span>, <span class=\"number\">10</span>, <span class=\"string\">'admin'</span>)</span><br><span class=\"line\">puts <span class=\"string\">\"ten meo la: <span class=\"subst\">#&#123;meo2.name&#125;</span> \\ntuoi meo la: <span class=\"subst\">#&#123;meo2.age&#125;</span> \\nrole cua meo la: <span class=\"subst\">#&#123;meo2.role&#125;</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># =&gt; ten meo la: ni ni</span></span><br><span class=\"line\"><span class=\"comment\"># =&gt; tuoi meo la: 10</span></span><br><span class=\"line\"><span class=\"comment\"># =&gt; role cua meo la: admin</span></span><br></pre></td></tr></table></figure>\n\n<p>Ở lớp con chúng ta có thêm 1 instance variable, chúng ta khai báo cho mình nó và duy nhất mỗi nó :arrow_right: không lãng phí vùng nhớ và tận dụng được mã nguồn cũ.</p>\n<p>Trong phương thức khởi tạo đối tượng YellowCat chúng ta khởi tạo biến instance mới, còn 2 instance variable được kế thừa từ lớp cha thì ta truyền tham số vào <code>super()</code> để truyền lên lớp cha và mặc kệ lớp cha xử lý thế nào thì tuỳ.</p>\n<h1 id=\"Ket-luan\"><a href=\"#Ket-luan\" class=\"headerlink\" title=\"Kết luận\"></a>Kết luận</h1><p>Tài liệu tham khảo:<br>[1] <a href=\"https://odetocode.com/blogs/scott/archive/2010/07/13/ruby-initialize-and-super.aspx\" target=\"_blank\" rel=\"noopener\">odetocode.com</a></p>\n"},{"title":"A Simple Rack Application","date":"2019-06-23T17:00:00.000Z","draft":false,"_content":"\n# 1. Đặt vấn đề\nCó lẽ cũng như tôi, khi mới tiếp cận với một framework ruby như Rails chẳng hạn, bạn đã nghe về Rack? hoặc ít ra cũng từng thấy cái `gem rack` trong Gemfile. Nhưng có khi nào bạn dùng đến chúng? Không ư? Tôi cũng nghĩ vậy, tôi cũng kệ, tôi cũng chả quan tâm, cuộc sống không đủ high hay sao mà lại đâm đầu vào cái khó :alien:.\n\nNhưng làm việc hàng ngày với nó mà không hiểu nó là gì luôn làm cho ta cảm giác bất an vô định, cập nhật CV là Developer mà đi phỏng vấn được hỏi rack là gì, lại trả lời \"em...em..em hông biết\" thì liệu có bị đánh xuống rank junior hay không? Thôi thì cứ tìm hiểu coi nó ra sao.\n\nVà thế là tôi đã đọc docs trên trang chủ của Rack, nói chung đọc qua thì có hiểu, mà cái hiểu nó mông lung như một trò đùa, chút nữa thì đành phải \"anh xin giơ tay rút lui thôi\".\n\nVậy nên tôi sẽ viết một ứng dụng Rack (chạy trên Rack) very..very simple, để tôi và có thể cả bạn có cái nhìn thoáng qua về Rack trước đã, chứ tôi thấy hiểu biết hiện tại của mình chưa đủ để chém gió hàn lâm về chủ đề này (hy vọng tương lai gần sẽ có bài chém gió hàn lâm).\n\n# 2. Tham khảo?\n\n1. Bài viết này tôi tham khảo cách sử dụng Rack trên trang chủ của Rack [tại đây](https://rack.github.io/) và trên mục docs của ruby [tại đây](https://www.rubydoc.info/github/rack/rack/).\n\n2. Ứng dụng rất thô sơ và KHÔNG sử dụng \"bét pờ rạch tít\" nào cả.\n\n\n# 3. Kiến thức cần chuẩn bị trước.\n\nDù ít dù nhiều thì vẫn phải đánh qua lý thuyết một chút trước khi mày mò làm gì đó. Một số khái niệm/quy trình chúng ta nên nắm trước như sau:\n\n1) Rack là một lớp nằm giữa web/app server và ứng dụng.\n\nEx: Nếu tôi sử dụng Rails với app server là Puma, web server là Nginx thì đường đi của một request sẽ như sau:\n\n![hoa](/images/rack.jpeg)\n\nNote: Khái niệm `web server` và `app server` chúng ta sẽ bàn tới sau.\n\n2) Như hình trên, ta có thể thấy Rack sẽ giao tiếp với `app server`, nên Rack sẽ nhận request từ app server gửi qua, với nội dung lằng nhằng rối rắm gì đó, sau đó Rack sẽ `làm gì đó` với cái request rối rắm kia, rồi gửi kết quả mà Rails có thể hiểu và thực thi được. Sau đó Rails sẽ gửi về cho Rack kết quả cũng rối rắm không kém và nhiệm vụ của Rack lại là tiếp tục `làm gì đó` cái kết quả từ Rails, sao cho chuyển kết quả đó thành 1 thứ gì đó mà app server có thể hiểu, cuối cùng app server quăng kết quả về cho người dùng.\n\nNote: Vậy Rack như một phiên dịch viên để truyền đạt giữa ứng dụng và app server (Không thật sự đúng về bản chất nhưng ta cứ tạm chấp nhận liên tưởng này).\n\n# 4. Build một simple Rack application\n\n- Tạo 1 Folder với 1 file tên `Gemfile` có nội dung như sau:\n\n```ruby\nsource 'https://rubygems.org'\n\ngem 'rack'\n```\n\n- Cài đặt gem vói lệnh `bundle install`\n\n- Tạo file `config.ru`.\n\nNote: Đây sẽ là file main để xử lý request.\n\n- Chạy project với lệnh `bundle exec rackup`\n\n> Project demo [tại đây!](https://github.com/hdchinh/simple-rack-app)\n\n# 5. Giải thích nội dung mã nguồn của app demo\n\n```ruby\nmap '/signup_user' do\n  run SignUpUser.new\nend\n\nmap '/signup' do\n  run MySignUp.new\nend\n\nmap '/signin' do\n  run MySignIn.new\nend\n\nmap '/signin_user' do\n  run SignInUser.new\nend\n\nmap '/' do\n  run HomePage.new\nend\n\nrun MyNotFound.new\n```\n\nChắc bạn cũng có thể đoán ra ý nghĩa của nó, nếu map chúng đường dẫn thì sẽ chạy lệnh trong đó.\n\nEx:\n\n```ruby\nmap '/' do\n  run HomePage.new\nend\n```\n\nNếu truy cập theo trang chủ thì sẽ chạy lệnh `run HomePage.new`.\n\nNếu url người dùng request không trùng bất cứ trường hợp nào thì chạy lệnh `run MyNotFound.new` ở cuối.\n\nMột class sẽ có dạng như sau:\n\n```ruby\nclass SignInUser\n  def call(env)\n    # read file data\n    file = File.read('data.txt')\n\n    # get params\n    data =  Rack::Utils.parse_nested_query(env['QUERY_STRING'])\n    email = data['email']\n    pass = data['password']\n\n    # convert file data from string to hash\n    hash_data = eval(file)\n    # init variable for user login\n    user_email = nil\n\n    # loop hash to find email params\n    hash_data.each do |k, val|\n      if k == email\n        if val = pass\n          user_email = k\n        end\n      end\n    end\n\n    if user_email\n      body = [\"<h1>email: #{user_email}<h/1>\"]\n    else\n      body = [\"<h1>Email or Password Invalid</h1>\"]\n    end\n\n    [200, {'Content-Type' => 'text/html'}, body]\n  end\nend\n```\n\nBạn thấy phức tạp? Không sao cả, chỉ cần chú ý đến dòng cuối cùng trong method call. Ta chỉ cần nhớ:\n\n- Mỗi class sử dụng method call để cài đặt (yêu cầu của Rack).\n\n- Trong method này nhận vào một params, đây chính là request đi tới.\n\n- Kết quả trả về của method call này là một mảng gồm 3 phần tử:\n\n  1. Status code (Ví dụ như: 200 -> success, 404 -> not found).\n  2. Một hash, ở đây chính là header, chứa những thông tin mà trình duyệt cần.\n  3. Phần tử cuối cùng là một mảng, chính là phần body của kết quả trả về.\n\n# 6. Kết luận\n\nTrên là một basic app xây dựng với Rack, vì định nghĩa chỉ đọc không làm sẽ rất khó hiểu, nên tôi làm demo trước, hy vọng trong thời gian tới nếu kiến thức thu lượm đủ để viết về cách vận hành của Rack một cách sâu sắc, tôi có thể tiếp tục chủ đề này.\n","source":"_posts/2019-06-24-simple-rack-application.md","raw":"---\ntitle: \"A Simple Rack Application\"\ndate: 2019-06-24\ndraft: false\ntags: [\"RACK\", \"RUBY\"]\ncategories: [\"RUBY\"]\n---\n\n# 1. Đặt vấn đề\nCó lẽ cũng như tôi, khi mới tiếp cận với một framework ruby như Rails chẳng hạn, bạn đã nghe về Rack? hoặc ít ra cũng từng thấy cái `gem rack` trong Gemfile. Nhưng có khi nào bạn dùng đến chúng? Không ư? Tôi cũng nghĩ vậy, tôi cũng kệ, tôi cũng chả quan tâm, cuộc sống không đủ high hay sao mà lại đâm đầu vào cái khó :alien:.\n\nNhưng làm việc hàng ngày với nó mà không hiểu nó là gì luôn làm cho ta cảm giác bất an vô định, cập nhật CV là Developer mà đi phỏng vấn được hỏi rack là gì, lại trả lời \"em...em..em hông biết\" thì liệu có bị đánh xuống rank junior hay không? Thôi thì cứ tìm hiểu coi nó ra sao.\n\nVà thế là tôi đã đọc docs trên trang chủ của Rack, nói chung đọc qua thì có hiểu, mà cái hiểu nó mông lung như một trò đùa, chút nữa thì đành phải \"anh xin giơ tay rút lui thôi\".\n\nVậy nên tôi sẽ viết một ứng dụng Rack (chạy trên Rack) very..very simple, để tôi và có thể cả bạn có cái nhìn thoáng qua về Rack trước đã, chứ tôi thấy hiểu biết hiện tại của mình chưa đủ để chém gió hàn lâm về chủ đề này (hy vọng tương lai gần sẽ có bài chém gió hàn lâm).\n\n# 2. Tham khảo?\n\n1. Bài viết này tôi tham khảo cách sử dụng Rack trên trang chủ của Rack [tại đây](https://rack.github.io/) và trên mục docs của ruby [tại đây](https://www.rubydoc.info/github/rack/rack/).\n\n2. Ứng dụng rất thô sơ và KHÔNG sử dụng \"bét pờ rạch tít\" nào cả.\n\n\n# 3. Kiến thức cần chuẩn bị trước.\n\nDù ít dù nhiều thì vẫn phải đánh qua lý thuyết một chút trước khi mày mò làm gì đó. Một số khái niệm/quy trình chúng ta nên nắm trước như sau:\n\n1) Rack là một lớp nằm giữa web/app server và ứng dụng.\n\nEx: Nếu tôi sử dụng Rails với app server là Puma, web server là Nginx thì đường đi của một request sẽ như sau:\n\n![hoa](/images/rack.jpeg)\n\nNote: Khái niệm `web server` và `app server` chúng ta sẽ bàn tới sau.\n\n2) Như hình trên, ta có thể thấy Rack sẽ giao tiếp với `app server`, nên Rack sẽ nhận request từ app server gửi qua, với nội dung lằng nhằng rối rắm gì đó, sau đó Rack sẽ `làm gì đó` với cái request rối rắm kia, rồi gửi kết quả mà Rails có thể hiểu và thực thi được. Sau đó Rails sẽ gửi về cho Rack kết quả cũng rối rắm không kém và nhiệm vụ của Rack lại là tiếp tục `làm gì đó` cái kết quả từ Rails, sao cho chuyển kết quả đó thành 1 thứ gì đó mà app server có thể hiểu, cuối cùng app server quăng kết quả về cho người dùng.\n\nNote: Vậy Rack như một phiên dịch viên để truyền đạt giữa ứng dụng và app server (Không thật sự đúng về bản chất nhưng ta cứ tạm chấp nhận liên tưởng này).\n\n# 4. Build một simple Rack application\n\n- Tạo 1 Folder với 1 file tên `Gemfile` có nội dung như sau:\n\n```ruby\nsource 'https://rubygems.org'\n\ngem 'rack'\n```\n\n- Cài đặt gem vói lệnh `bundle install`\n\n- Tạo file `config.ru`.\n\nNote: Đây sẽ là file main để xử lý request.\n\n- Chạy project với lệnh `bundle exec rackup`\n\n> Project demo [tại đây!](https://github.com/hdchinh/simple-rack-app)\n\n# 5. Giải thích nội dung mã nguồn của app demo\n\n```ruby\nmap '/signup_user' do\n  run SignUpUser.new\nend\n\nmap '/signup' do\n  run MySignUp.new\nend\n\nmap '/signin' do\n  run MySignIn.new\nend\n\nmap '/signin_user' do\n  run SignInUser.new\nend\n\nmap '/' do\n  run HomePage.new\nend\n\nrun MyNotFound.new\n```\n\nChắc bạn cũng có thể đoán ra ý nghĩa của nó, nếu map chúng đường dẫn thì sẽ chạy lệnh trong đó.\n\nEx:\n\n```ruby\nmap '/' do\n  run HomePage.new\nend\n```\n\nNếu truy cập theo trang chủ thì sẽ chạy lệnh `run HomePage.new`.\n\nNếu url người dùng request không trùng bất cứ trường hợp nào thì chạy lệnh `run MyNotFound.new` ở cuối.\n\nMột class sẽ có dạng như sau:\n\n```ruby\nclass SignInUser\n  def call(env)\n    # read file data\n    file = File.read('data.txt')\n\n    # get params\n    data =  Rack::Utils.parse_nested_query(env['QUERY_STRING'])\n    email = data['email']\n    pass = data['password']\n\n    # convert file data from string to hash\n    hash_data = eval(file)\n    # init variable for user login\n    user_email = nil\n\n    # loop hash to find email params\n    hash_data.each do |k, val|\n      if k == email\n        if val = pass\n          user_email = k\n        end\n      end\n    end\n\n    if user_email\n      body = [\"<h1>email: #{user_email}<h/1>\"]\n    else\n      body = [\"<h1>Email or Password Invalid</h1>\"]\n    end\n\n    [200, {'Content-Type' => 'text/html'}, body]\n  end\nend\n```\n\nBạn thấy phức tạp? Không sao cả, chỉ cần chú ý đến dòng cuối cùng trong method call. Ta chỉ cần nhớ:\n\n- Mỗi class sử dụng method call để cài đặt (yêu cầu của Rack).\n\n- Trong method này nhận vào một params, đây chính là request đi tới.\n\n- Kết quả trả về của method call này là một mảng gồm 3 phần tử:\n\n  1. Status code (Ví dụ như: 200 -> success, 404 -> not found).\n  2. Một hash, ở đây chính là header, chứa những thông tin mà trình duyệt cần.\n  3. Phần tử cuối cùng là một mảng, chính là phần body của kết quả trả về.\n\n# 6. Kết luận\n\nTrên là một basic app xây dựng với Rack, vì định nghĩa chỉ đọc không làm sẽ rất khó hiểu, nên tôi làm demo trước, hy vọng trong thời gian tới nếu kiến thức thu lượm đủ để viết về cách vận hành của Rack một cách sâu sắc, tôi có thể tiếp tục chủ đề này.\n","slug":"2019-06-24-simple-rack-application","published":1,"updated":"2019-12-06T15:40:06.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7sugl002g5rrs9q4h6kje","content":"<h1 id=\"1-Dat-van-de\"><a href=\"#1-Dat-van-de\" class=\"headerlink\" title=\"1. Đặt vấn đề\"></a>1. Đặt vấn đề</h1><p>Có lẽ cũng như tôi, khi mới tiếp cận với một framework ruby như Rails chẳng hạn, bạn đã nghe về Rack? hoặc ít ra cũng từng thấy cái <code>gem rack</code> trong Gemfile. Nhưng có khi nào bạn dùng đến chúng? Không ư? Tôi cũng nghĩ vậy, tôi cũng kệ, tôi cũng chả quan tâm, cuộc sống không đủ high hay sao mà lại đâm đầu vào cái khó :alien:.</p>\n<p>Nhưng làm việc hàng ngày với nó mà không hiểu nó là gì luôn làm cho ta cảm giác bất an vô định, cập nhật CV là Developer mà đi phỏng vấn được hỏi rack là gì, lại trả lời “em…em..em hông biết” thì liệu có bị đánh xuống rank junior hay không? Thôi thì cứ tìm hiểu coi nó ra sao.</p>\n<p>Và thế là tôi đã đọc docs trên trang chủ của Rack, nói chung đọc qua thì có hiểu, mà cái hiểu nó mông lung như một trò đùa, chút nữa thì đành phải “anh xin giơ tay rút lui thôi”.</p>\n<p>Vậy nên tôi sẽ viết một ứng dụng Rack (chạy trên Rack) very..very simple, để tôi và có thể cả bạn có cái nhìn thoáng qua về Rack trước đã, chứ tôi thấy hiểu biết hiện tại của mình chưa đủ để chém gió hàn lâm về chủ đề này (hy vọng tương lai gần sẽ có bài chém gió hàn lâm).</p>\n<h1 id=\"2-Tham-khao\"><a href=\"#2-Tham-khao\" class=\"headerlink\" title=\"2. Tham khảo?\"></a>2. Tham khảo?</h1><ol>\n<li><p>Bài viết này tôi tham khảo cách sử dụng Rack trên trang chủ của Rack <a href=\"https://rack.github.io/\" target=\"_blank\" rel=\"noopener\">tại đây</a> và trên mục docs của ruby <a href=\"https://www.rubydoc.info/github/rack/rack/\" target=\"_blank\" rel=\"noopener\">tại đây</a>.</p>\n</li>\n<li><p>Ứng dụng rất thô sơ và KHÔNG sử dụng “bét pờ rạch tít” nào cả.</p>\n</li>\n</ol>\n<h1 id=\"3-Kien-thuc-can-chuan-bi-truoc\"><a href=\"#3-Kien-thuc-can-chuan-bi-truoc\" class=\"headerlink\" title=\"3. Kiến thức cần chuẩn bị trước.\"></a>3. Kiến thức cần chuẩn bị trước.</h1><p>Dù ít dù nhiều thì vẫn phải đánh qua lý thuyết một chút trước khi mày mò làm gì đó. Một số khái niệm/quy trình chúng ta nên nắm trước như sau:</p>\n<p>1) Rack là một lớp nằm giữa web/app server và ứng dụng.</p>\n<p>Ex: Nếu tôi sử dụng Rails với app server là Puma, web server là Nginx thì đường đi của một request sẽ như sau:</p>\n<p><img src=\"/images/rack.jpeg\" alt=\"hoa\"></p>\n<p>Note: Khái niệm <code>web server</code> và <code>app server</code> chúng ta sẽ bàn tới sau.</p>\n<p>2) Như hình trên, ta có thể thấy Rack sẽ giao tiếp với <code>app server</code>, nên Rack sẽ nhận request từ app server gửi qua, với nội dung lằng nhằng rối rắm gì đó, sau đó Rack sẽ <code>làm gì đó</code> với cái request rối rắm kia, rồi gửi kết quả mà Rails có thể hiểu và thực thi được. Sau đó Rails sẽ gửi về cho Rack kết quả cũng rối rắm không kém và nhiệm vụ của Rack lại là tiếp tục <code>làm gì đó</code> cái kết quả từ Rails, sao cho chuyển kết quả đó thành 1 thứ gì đó mà app server có thể hiểu, cuối cùng app server quăng kết quả về cho người dùng.</p>\n<p>Note: Vậy Rack như một phiên dịch viên để truyền đạt giữa ứng dụng và app server (Không thật sự đúng về bản chất nhưng ta cứ tạm chấp nhận liên tưởng này).</p>\n<h1 id=\"4-Build-mot-simple-Rack-application\"><a href=\"#4-Build-mot-simple-Rack-application\" class=\"headerlink\" title=\"4. Build một simple Rack application\"></a>4. Build một simple Rack application</h1><ul>\n<li>Tạo 1 Folder với 1 file tên <code>Gemfile</code> có nội dung như sau:</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source <span class=\"string\">'https://rubygems.org'</span></span><br><span class=\"line\"></span><br><span class=\"line\">gem <span class=\"string\">'rack'</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Cài đặt gem vói lệnh <code>bundle install</code></p>\n</li>\n<li><p>Tạo file <code>config.ru</code>.</p>\n</li>\n</ul>\n<p>Note: Đây sẽ là file main để xử lý request.</p>\n<ul>\n<li>Chạy project với lệnh <code>bundle exec rackup</code></li>\n</ul>\n<blockquote>\n<p>Project demo <a href=\"https://github.com/hdchinh/simple-rack-app\" target=\"_blank\" rel=\"noopener\">tại đây!</a></p>\n</blockquote>\n<h1 id=\"5-Giai-thich-noi-dung-ma-nguon-cua-app-demo\"><a href=\"#5-Giai-thich-noi-dung-ma-nguon-cua-app-demo\" class=\"headerlink\" title=\"5. Giải thích nội dung mã nguồn của app demo\"></a>5. Giải thích nội dung mã nguồn của app demo</h1><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map <span class=\"string\">'/signup_user'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  run SignUpUser.new</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">map <span class=\"string\">'/signup'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  run MySignUp.new</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">map <span class=\"string\">'/signin'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  run MySignIn.new</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">map <span class=\"string\">'/signin_user'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  run SignInUser.new</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">map <span class=\"string\">'/'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  run HomePage.new</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">run MyNotFound.new</span><br></pre></td></tr></table></figure>\n\n<p>Chắc bạn cũng có thể đoán ra ý nghĩa của nó, nếu map chúng đường dẫn thì sẽ chạy lệnh trong đó.</p>\n<p>Ex:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map <span class=\"string\">'/'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  run HomePage.new</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Nếu truy cập theo trang chủ thì sẽ chạy lệnh <code>run HomePage.new</code>.</p>\n<p>Nếu url người dùng request không trùng bất cứ trường hợp nào thì chạy lệnh <code>run MyNotFound.new</code> ở cuối.</p>\n<p>Một class sẽ có dạng như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SignInUser</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">call</span><span class=\"params\">(env)</span></span></span><br><span class=\"line\">    <span class=\"comment\"># read file data</span></span><br><span class=\"line\">    file = File.read(<span class=\"string\">'data.txt'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># get params</span></span><br><span class=\"line\">    data =  Rack::Utils.parse_nested_query(env[<span class=\"string\">'QUERY_STRING'</span>])</span><br><span class=\"line\">    email = data[<span class=\"string\">'email'</span>]</span><br><span class=\"line\">    pass = data[<span class=\"string\">'password'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># convert file data from string to hash</span></span><br><span class=\"line\">    hash_data = eval(file)</span><br><span class=\"line\">    <span class=\"comment\"># init variable for user login</span></span><br><span class=\"line\">    user_email = <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># loop hash to find email params</span></span><br><span class=\"line\">    hash_data.each <span class=\"keyword\">do</span> <span class=\"params\">|k, val|</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> k == email</span><br><span class=\"line\">        <span class=\"keyword\">if</span> val = pass</span><br><span class=\"line\">          user_email = k</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> user_email</span><br><span class=\"line\">      body = [<span class=\"string\">\"&lt;h1&gt;email: <span class=\"subst\">#&#123;user_email&#125;</span>&lt;h/1&gt;\"</span>]</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      body = [<span class=\"string\">\"&lt;h1&gt;Email or Password Invalid&lt;/h1&gt;\"</span>]</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span> =&gt; <span class=\"string\">'text/html'</span>&#125;, body]</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Bạn thấy phức tạp? Không sao cả, chỉ cần chú ý đến dòng cuối cùng trong method call. Ta chỉ cần nhớ:</p>\n<ul>\n<li><p>Mỗi class sử dụng method call để cài đặt (yêu cầu của Rack).</p>\n</li>\n<li><p>Trong method này nhận vào một params, đây chính là request đi tới.</p>\n</li>\n<li><p>Kết quả trả về của method call này là một mảng gồm 3 phần tử:</p>\n<ol>\n<li>Status code (Ví dụ như: 200 -&gt; success, 404 -&gt; not found).</li>\n<li>Một hash, ở đây chính là header, chứa những thông tin mà trình duyệt cần.</li>\n<li>Phần tử cuối cùng là một mảng, chính là phần body của kết quả trả về.</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"6-Ket-luan\"><a href=\"#6-Ket-luan\" class=\"headerlink\" title=\"6. Kết luận\"></a>6. Kết luận</h1><p>Trên là một basic app xây dựng với Rack, vì định nghĩa chỉ đọc không làm sẽ rất khó hiểu, nên tôi làm demo trước, hy vọng trong thời gian tới nếu kiến thức thu lượm đủ để viết về cách vận hành của Rack một cách sâu sắc, tôi có thể tiếp tục chủ đề này.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-Dat-van-de\"><a href=\"#1-Dat-van-de\" class=\"headerlink\" title=\"1. Đặt vấn đề\"></a>1. Đặt vấn đề</h1><p>Có lẽ cũng như tôi, khi mới tiếp cận với một framework ruby như Rails chẳng hạn, bạn đã nghe về Rack? hoặc ít ra cũng từng thấy cái <code>gem rack</code> trong Gemfile. Nhưng có khi nào bạn dùng đến chúng? Không ư? Tôi cũng nghĩ vậy, tôi cũng kệ, tôi cũng chả quan tâm, cuộc sống không đủ high hay sao mà lại đâm đầu vào cái khó :alien:.</p>\n<p>Nhưng làm việc hàng ngày với nó mà không hiểu nó là gì luôn làm cho ta cảm giác bất an vô định, cập nhật CV là Developer mà đi phỏng vấn được hỏi rack là gì, lại trả lời “em…em..em hông biết” thì liệu có bị đánh xuống rank junior hay không? Thôi thì cứ tìm hiểu coi nó ra sao.</p>\n<p>Và thế là tôi đã đọc docs trên trang chủ của Rack, nói chung đọc qua thì có hiểu, mà cái hiểu nó mông lung như một trò đùa, chút nữa thì đành phải “anh xin giơ tay rút lui thôi”.</p>\n<p>Vậy nên tôi sẽ viết một ứng dụng Rack (chạy trên Rack) very..very simple, để tôi và có thể cả bạn có cái nhìn thoáng qua về Rack trước đã, chứ tôi thấy hiểu biết hiện tại của mình chưa đủ để chém gió hàn lâm về chủ đề này (hy vọng tương lai gần sẽ có bài chém gió hàn lâm).</p>\n<h1 id=\"2-Tham-khao\"><a href=\"#2-Tham-khao\" class=\"headerlink\" title=\"2. Tham khảo?\"></a>2. Tham khảo?</h1><ol>\n<li><p>Bài viết này tôi tham khảo cách sử dụng Rack trên trang chủ của Rack <a href=\"https://rack.github.io/\" target=\"_blank\" rel=\"noopener\">tại đây</a> và trên mục docs của ruby <a href=\"https://www.rubydoc.info/github/rack/rack/\" target=\"_blank\" rel=\"noopener\">tại đây</a>.</p>\n</li>\n<li><p>Ứng dụng rất thô sơ và KHÔNG sử dụng “bét pờ rạch tít” nào cả.</p>\n</li>\n</ol>\n<h1 id=\"3-Kien-thuc-can-chuan-bi-truoc\"><a href=\"#3-Kien-thuc-can-chuan-bi-truoc\" class=\"headerlink\" title=\"3. Kiến thức cần chuẩn bị trước.\"></a>3. Kiến thức cần chuẩn bị trước.</h1><p>Dù ít dù nhiều thì vẫn phải đánh qua lý thuyết một chút trước khi mày mò làm gì đó. Một số khái niệm/quy trình chúng ta nên nắm trước như sau:</p>\n<p>1) Rack là một lớp nằm giữa web/app server và ứng dụng.</p>\n<p>Ex: Nếu tôi sử dụng Rails với app server là Puma, web server là Nginx thì đường đi của một request sẽ như sau:</p>\n<p><img src=\"/images/rack.jpeg\" alt=\"hoa\"></p>\n<p>Note: Khái niệm <code>web server</code> và <code>app server</code> chúng ta sẽ bàn tới sau.</p>\n<p>2) Như hình trên, ta có thể thấy Rack sẽ giao tiếp với <code>app server</code>, nên Rack sẽ nhận request từ app server gửi qua, với nội dung lằng nhằng rối rắm gì đó, sau đó Rack sẽ <code>làm gì đó</code> với cái request rối rắm kia, rồi gửi kết quả mà Rails có thể hiểu và thực thi được. Sau đó Rails sẽ gửi về cho Rack kết quả cũng rối rắm không kém và nhiệm vụ của Rack lại là tiếp tục <code>làm gì đó</code> cái kết quả từ Rails, sao cho chuyển kết quả đó thành 1 thứ gì đó mà app server có thể hiểu, cuối cùng app server quăng kết quả về cho người dùng.</p>\n<p>Note: Vậy Rack như một phiên dịch viên để truyền đạt giữa ứng dụng và app server (Không thật sự đúng về bản chất nhưng ta cứ tạm chấp nhận liên tưởng này).</p>\n<h1 id=\"4-Build-mot-simple-Rack-application\"><a href=\"#4-Build-mot-simple-Rack-application\" class=\"headerlink\" title=\"4. Build một simple Rack application\"></a>4. Build một simple Rack application</h1><ul>\n<li>Tạo 1 Folder với 1 file tên <code>Gemfile</code> có nội dung như sau:</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source <span class=\"string\">'https://rubygems.org'</span></span><br><span class=\"line\"></span><br><span class=\"line\">gem <span class=\"string\">'rack'</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Cài đặt gem vói lệnh <code>bundle install</code></p>\n</li>\n<li><p>Tạo file <code>config.ru</code>.</p>\n</li>\n</ul>\n<p>Note: Đây sẽ là file main để xử lý request.</p>\n<ul>\n<li>Chạy project với lệnh <code>bundle exec rackup</code></li>\n</ul>\n<blockquote>\n<p>Project demo <a href=\"https://github.com/hdchinh/simple-rack-app\" target=\"_blank\" rel=\"noopener\">tại đây!</a></p>\n</blockquote>\n<h1 id=\"5-Giai-thich-noi-dung-ma-nguon-cua-app-demo\"><a href=\"#5-Giai-thich-noi-dung-ma-nguon-cua-app-demo\" class=\"headerlink\" title=\"5. Giải thích nội dung mã nguồn của app demo\"></a>5. Giải thích nội dung mã nguồn của app demo</h1><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map <span class=\"string\">'/signup_user'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  run SignUpUser.new</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">map <span class=\"string\">'/signup'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  run MySignUp.new</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">map <span class=\"string\">'/signin'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  run MySignIn.new</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">map <span class=\"string\">'/signin_user'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  run SignInUser.new</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">map <span class=\"string\">'/'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  run HomePage.new</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">run MyNotFound.new</span><br></pre></td></tr></table></figure>\n\n<p>Chắc bạn cũng có thể đoán ra ý nghĩa của nó, nếu map chúng đường dẫn thì sẽ chạy lệnh trong đó.</p>\n<p>Ex:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map <span class=\"string\">'/'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  run HomePage.new</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Nếu truy cập theo trang chủ thì sẽ chạy lệnh <code>run HomePage.new</code>.</p>\n<p>Nếu url người dùng request không trùng bất cứ trường hợp nào thì chạy lệnh <code>run MyNotFound.new</code> ở cuối.</p>\n<p>Một class sẽ có dạng như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SignInUser</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">call</span><span class=\"params\">(env)</span></span></span><br><span class=\"line\">    <span class=\"comment\"># read file data</span></span><br><span class=\"line\">    file = File.read(<span class=\"string\">'data.txt'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># get params</span></span><br><span class=\"line\">    data =  Rack::Utils.parse_nested_query(env[<span class=\"string\">'QUERY_STRING'</span>])</span><br><span class=\"line\">    email = data[<span class=\"string\">'email'</span>]</span><br><span class=\"line\">    pass = data[<span class=\"string\">'password'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># convert file data from string to hash</span></span><br><span class=\"line\">    hash_data = eval(file)</span><br><span class=\"line\">    <span class=\"comment\"># init variable for user login</span></span><br><span class=\"line\">    user_email = <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># loop hash to find email params</span></span><br><span class=\"line\">    hash_data.each <span class=\"keyword\">do</span> <span class=\"params\">|k, val|</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> k == email</span><br><span class=\"line\">        <span class=\"keyword\">if</span> val = pass</span><br><span class=\"line\">          user_email = k</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> user_email</span><br><span class=\"line\">      body = [<span class=\"string\">\"&lt;h1&gt;email: <span class=\"subst\">#&#123;user_email&#125;</span>&lt;h/1&gt;\"</span>]</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      body = [<span class=\"string\">\"&lt;h1&gt;Email or Password Invalid&lt;/h1&gt;\"</span>]</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span> =&gt; <span class=\"string\">'text/html'</span>&#125;, body]</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Bạn thấy phức tạp? Không sao cả, chỉ cần chú ý đến dòng cuối cùng trong method call. Ta chỉ cần nhớ:</p>\n<ul>\n<li><p>Mỗi class sử dụng method call để cài đặt (yêu cầu của Rack).</p>\n</li>\n<li><p>Trong method này nhận vào một params, đây chính là request đi tới.</p>\n</li>\n<li><p>Kết quả trả về của method call này là một mảng gồm 3 phần tử:</p>\n<ol>\n<li>Status code (Ví dụ như: 200 -&gt; success, 404 -&gt; not found).</li>\n<li>Một hash, ở đây chính là header, chứa những thông tin mà trình duyệt cần.</li>\n<li>Phần tử cuối cùng là một mảng, chính là phần body của kết quả trả về.</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"6-Ket-luan\"><a href=\"#6-Ket-luan\" class=\"headerlink\" title=\"6. Kết luận\"></a>6. Kết luận</h1><p>Trên là một basic app xây dựng với Rack, vì định nghĩa chỉ đọc không làm sẽ rất khó hiểu, nên tôi làm demo trước, hy vọng trong thời gian tới nếu kiến thức thu lượm đủ để viết về cách vận hành của Rack một cách sâu sắc, tôi có thể tiếp tục chủ đề này.</p>\n"},{"title":"A Simple ORM","date":"2019-06-25T17:00:00.000Z","draft":false,"_content":"\n# 1. Đặt vấn đề\n\nRails có phải là một framework tuyệt vời hay không? Chắc chắn là có rồi, với tôi là như vậy, mặc dù nó tốn Ram quá nhiều và chạy cũng hơi chậm, mọi thứ khác thật sự tuyệt vời.\n\nNếu cần phải xây dựng một ứng dụng CRUD, có lẽ Rails sẽ là một lựa chọn hàng đầu, vì thời gian xây dựng nhanh chóng để cho ra một sản phẩm tuy không phải là \"ích seo lừn\" nhưng cũng đủ good để work production.\n\nMột trong những yếu tố làm cho Rails xây dựng các ứng dụng một cách nhanh chóng như vậy chính là gem ActiveRecord, một ORM mặc định và vô cùng mạnh mẽ trong Rails.\n\nNhư nhiều người khác, khi mới tiếp cận Framework này, tôi cũng sử dụng các lệnh command, các phương thức được support mà cũng không quan tâm đến cách mà nó vận hành.\n\nNhưng nghĩ đi nghĩ lại thấy cũng kì, làm mà không hiểu kì cục lắm :smile:\n\nVậy thôi, chúng ta hãy cùng thử xây dựng một ORM rất đơn giản, để coi thử magic gì đã xảy ra sau mỗi dòng lệnh.\n\n# 2. Mã nguồn\n\n> Mã nguồn của ứng dụng này, bạn có thể tham khảo [tại đây](https://github.com/hdchinh/simple-orm-ruby)\n\n# 3. Giải thích\n\nNote: Trước hết chúng ta nên đọc trước về định nghĩa của ORM [tại đây](https://en.wikipedia.org/wiki/Object-relational_mapping)\n\nĐể xây dựng 1 ORM và chạy một vài ví dụ đơn giản được thì chúng ta có 2 nhiềm vụ phải làm:\n\n- Kết nối với cơ sở dữ liệu (ở đây là postgresql).\n\n- Xây dựng các class bằng Ruby với các phương thức tương ứng để xử lý trên cơ sở dữ liệu đã kết nối ở bước 1.\n\n**STEP 1: Tạo project**\n\nTạo một project trống với 1 file Gemfile có nội dung như sau:\n\n```ruby\nsource 'https://rubygems.org'\n\ngem 'pg'\n```\n\nCài đặt gem bằng lệnh: `bundle install`.\n\nNếu có lỗi xảy ra hãy tham khảo các tài liệu về cài đặt và sử dụng gem bundler.\n\n**STEP 2: Kết nối cơ sở dữ liệu.**\n\nKhi bắt đầu và quen thuộc với việc sử dụng command trong rails, việc duy nhất chúng ta còn thực sự sử dụng đó là sửa file `database.yml`, và đó là tất cả những gì cần thiết để đem ứng dụng của chúng ta kết nối với 1 hệ quản trị cơ sở dữ liệu nào đó trên máy. (Thực ra là vẫn còn nhiều điều xảy ra lắm, nhưng hãy cứ tạm chấp nhận như vậy).\n\nNhưng nếu không sử dụng Framework Rails, trong trường hợp này, khi tôi kết nối với Postgresql thì tôi sẽ sử dụng một gem tên `pg` đã cài đặt ở bước 1, và require nó vào file `connection.rb` có tác dụng kết nối như sau:\n\n```ruby\nrequire 'pg'\n\n$conn = PG::Connection.connect(\n  :hostaddr=>\"127.0.0.1\", :port=>5432,\n  :dbname=>\"test-psql_development\",\n  :user=>\"admin\",\n  :password=>''\n)\n```\nNote: Bạn cần thay đổi các giá trị ở trên để phù hợp với database mà bạn muốn kết nối trên máy của bạn.\n\nLúc này project của chúng ta có cấu trúc:\n\n```\n-- simple-orm\n  -- Gemfile\n  -- Gemfile.lock (sinh ra sau lệnh `bundle install`)\n  -- connection.rb\n```\n\nNote: Trong file `connection.rb` tôi khai báo biến conn dưới dạng biến toàn cục, để dễ ràng require trong các file khác trong project.\n\n**STEP 3: Xây dựng Class chứa chức năng chính.**\n\nTạo file `mybase.rb` với nội dung như sau:\n\n```ruby\nrequire_relative 'connection.rb'\n\nclass MyBase\n  def self.all\n    term = \"SELECT * FROM #{self.name.downcase}\"\n    res = $conn.exec(term)\n\n    res.each{ |row|\n      puts \"#{row}\\n\"\n    }\n  end\n\n  def self.find(id)\n    term = \"SELECT * FROM #{self.name.downcase} where id = #{id}\"\n    res = $conn.exec(term)\n\n    res.each{ |row|\n      puts \"#{row}\\n\"\n    }\n  end\nend\n```\n\nrequire file `connection.rb` vào để sử dụng biến conn.\n\nTrong class này xây dựng 2 class method là `all` và `find`, ứng với 2 phương thức trong ActiveRecord.\n\n`all`: Trả về toàn bộ record trong table.\n`find`: Trả về record ứng với id được truyền vào.\n\n**STEP 4: Xây dựng class con kế thừa lớp Base ở bước 3 và sử dụng**\n\nTrong cơ sở dữ liệu mà tôi kết nối có table tên `comics`. Tôi tạo file comics.rb có nội dung như sau:\n\n```ruby\nrequire_relative 'mybase.rb'\n\nclass Comics < MyBase; end\n\nputs \"All record in comics table:\\n\"\nComics.all\nputs \"Find record has id is 6:\\n\"\nComics.find(6)\n```\n\n- Tôi require file `mybase.rb` đã viết ở bước 3 vào file này.\n\n- Tạo class `Comics` và cho nó kế thừa class `MyBase`\n\n- In ra màn hình console các dòng lệnh đã xây dựng để xem kết quả (với lệnh `ruby  comics.rb` ta sẽ chạy file comics.rb và xuất kết quả ra màn hình console).\n\n\nCuối cùng project của chúng ta có dạng như sau:\n\n```\n-- simple-orm\n  -- Gemfile\n  -- Gemfile.lock (sinh ra sau lệnh `bundle install`)\n  -- connection.rb\n  -- mybase.rb (main chính chứa các phương thức)\n  -- comics.rb (class ứng với table comics trong csdl, kế thừa MyBase)\n```\n\nChạy file `comics.rb` với lệnh chạy ruby `ruby comics.rb` ta sẽ xem được thành quả nhỏ của quá trình xây dựng kể trên.\n\n# 4. Kết luận\n\nTrên là một ví dụ đơn giản về ORM với ngôn ngữ Ruby, các ORM trong thực tế sẽ phức tạp và tinh tế hơn rất rất nhiều. Hy vọng qua bài viết sẽ giúp bạn đọc có được thêm kiến thức với ORM và cách nó vận hành trong framework như Rails.\n","source":"_posts/2019-06-25-xay-dung-mot-orm-don-gian-bang-ruby.md","raw":"---\ntitle: \"A Simple ORM\"\ndate: 2019-06-26\ndraft: false\ntags: [\"ORM\", \"RUBY\"]\ncategories: [\"RUBY\"]\n---\n\n# 1. Đặt vấn đề\n\nRails có phải là một framework tuyệt vời hay không? Chắc chắn là có rồi, với tôi là như vậy, mặc dù nó tốn Ram quá nhiều và chạy cũng hơi chậm, mọi thứ khác thật sự tuyệt vời.\n\nNếu cần phải xây dựng một ứng dụng CRUD, có lẽ Rails sẽ là một lựa chọn hàng đầu, vì thời gian xây dựng nhanh chóng để cho ra một sản phẩm tuy không phải là \"ích seo lừn\" nhưng cũng đủ good để work production.\n\nMột trong những yếu tố làm cho Rails xây dựng các ứng dụng một cách nhanh chóng như vậy chính là gem ActiveRecord, một ORM mặc định và vô cùng mạnh mẽ trong Rails.\n\nNhư nhiều người khác, khi mới tiếp cận Framework này, tôi cũng sử dụng các lệnh command, các phương thức được support mà cũng không quan tâm đến cách mà nó vận hành.\n\nNhưng nghĩ đi nghĩ lại thấy cũng kì, làm mà không hiểu kì cục lắm :smile:\n\nVậy thôi, chúng ta hãy cùng thử xây dựng một ORM rất đơn giản, để coi thử magic gì đã xảy ra sau mỗi dòng lệnh.\n\n# 2. Mã nguồn\n\n> Mã nguồn của ứng dụng này, bạn có thể tham khảo [tại đây](https://github.com/hdchinh/simple-orm-ruby)\n\n# 3. Giải thích\n\nNote: Trước hết chúng ta nên đọc trước về định nghĩa của ORM [tại đây](https://en.wikipedia.org/wiki/Object-relational_mapping)\n\nĐể xây dựng 1 ORM và chạy một vài ví dụ đơn giản được thì chúng ta có 2 nhiềm vụ phải làm:\n\n- Kết nối với cơ sở dữ liệu (ở đây là postgresql).\n\n- Xây dựng các class bằng Ruby với các phương thức tương ứng để xử lý trên cơ sở dữ liệu đã kết nối ở bước 1.\n\n**STEP 1: Tạo project**\n\nTạo một project trống với 1 file Gemfile có nội dung như sau:\n\n```ruby\nsource 'https://rubygems.org'\n\ngem 'pg'\n```\n\nCài đặt gem bằng lệnh: `bundle install`.\n\nNếu có lỗi xảy ra hãy tham khảo các tài liệu về cài đặt và sử dụng gem bundler.\n\n**STEP 2: Kết nối cơ sở dữ liệu.**\n\nKhi bắt đầu và quen thuộc với việc sử dụng command trong rails, việc duy nhất chúng ta còn thực sự sử dụng đó là sửa file `database.yml`, và đó là tất cả những gì cần thiết để đem ứng dụng của chúng ta kết nối với 1 hệ quản trị cơ sở dữ liệu nào đó trên máy. (Thực ra là vẫn còn nhiều điều xảy ra lắm, nhưng hãy cứ tạm chấp nhận như vậy).\n\nNhưng nếu không sử dụng Framework Rails, trong trường hợp này, khi tôi kết nối với Postgresql thì tôi sẽ sử dụng một gem tên `pg` đã cài đặt ở bước 1, và require nó vào file `connection.rb` có tác dụng kết nối như sau:\n\n```ruby\nrequire 'pg'\n\n$conn = PG::Connection.connect(\n  :hostaddr=>\"127.0.0.1\", :port=>5432,\n  :dbname=>\"test-psql_development\",\n  :user=>\"admin\",\n  :password=>''\n)\n```\nNote: Bạn cần thay đổi các giá trị ở trên để phù hợp với database mà bạn muốn kết nối trên máy của bạn.\n\nLúc này project của chúng ta có cấu trúc:\n\n```\n-- simple-orm\n  -- Gemfile\n  -- Gemfile.lock (sinh ra sau lệnh `bundle install`)\n  -- connection.rb\n```\n\nNote: Trong file `connection.rb` tôi khai báo biến conn dưới dạng biến toàn cục, để dễ ràng require trong các file khác trong project.\n\n**STEP 3: Xây dựng Class chứa chức năng chính.**\n\nTạo file `mybase.rb` với nội dung như sau:\n\n```ruby\nrequire_relative 'connection.rb'\n\nclass MyBase\n  def self.all\n    term = \"SELECT * FROM #{self.name.downcase}\"\n    res = $conn.exec(term)\n\n    res.each{ |row|\n      puts \"#{row}\\n\"\n    }\n  end\n\n  def self.find(id)\n    term = \"SELECT * FROM #{self.name.downcase} where id = #{id}\"\n    res = $conn.exec(term)\n\n    res.each{ |row|\n      puts \"#{row}\\n\"\n    }\n  end\nend\n```\n\nrequire file `connection.rb` vào để sử dụng biến conn.\n\nTrong class này xây dựng 2 class method là `all` và `find`, ứng với 2 phương thức trong ActiveRecord.\n\n`all`: Trả về toàn bộ record trong table.\n`find`: Trả về record ứng với id được truyền vào.\n\n**STEP 4: Xây dựng class con kế thừa lớp Base ở bước 3 và sử dụng**\n\nTrong cơ sở dữ liệu mà tôi kết nối có table tên `comics`. Tôi tạo file comics.rb có nội dung như sau:\n\n```ruby\nrequire_relative 'mybase.rb'\n\nclass Comics < MyBase; end\n\nputs \"All record in comics table:\\n\"\nComics.all\nputs \"Find record has id is 6:\\n\"\nComics.find(6)\n```\n\n- Tôi require file `mybase.rb` đã viết ở bước 3 vào file này.\n\n- Tạo class `Comics` và cho nó kế thừa class `MyBase`\n\n- In ra màn hình console các dòng lệnh đã xây dựng để xem kết quả (với lệnh `ruby  comics.rb` ta sẽ chạy file comics.rb và xuất kết quả ra màn hình console).\n\n\nCuối cùng project của chúng ta có dạng như sau:\n\n```\n-- simple-orm\n  -- Gemfile\n  -- Gemfile.lock (sinh ra sau lệnh `bundle install`)\n  -- connection.rb\n  -- mybase.rb (main chính chứa các phương thức)\n  -- comics.rb (class ứng với table comics trong csdl, kế thừa MyBase)\n```\n\nChạy file `comics.rb` với lệnh chạy ruby `ruby comics.rb` ta sẽ xem được thành quả nhỏ của quá trình xây dựng kể trên.\n\n# 4. Kết luận\n\nTrên là một ví dụ đơn giản về ORM với ngôn ngữ Ruby, các ORM trong thực tế sẽ phức tạp và tinh tế hơn rất rất nhiều. Hy vọng qua bài viết sẽ giúp bạn đọc có được thêm kiến thức với ORM và cách nó vận hành trong framework như Rails.\n","slug":"2019-06-25-xay-dung-mot-orm-don-gian-bang-ruby","published":1,"updated":"2019-12-06T15:40:26.844Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7sugo002l5rrs2a6s5zvo","content":"<h1 id=\"1-Dat-van-de\"><a href=\"#1-Dat-van-de\" class=\"headerlink\" title=\"1. Đặt vấn đề\"></a>1. Đặt vấn đề</h1><p>Rails có phải là một framework tuyệt vời hay không? Chắc chắn là có rồi, với tôi là như vậy, mặc dù nó tốn Ram quá nhiều và chạy cũng hơi chậm, mọi thứ khác thật sự tuyệt vời.</p>\n<p>Nếu cần phải xây dựng một ứng dụng CRUD, có lẽ Rails sẽ là một lựa chọn hàng đầu, vì thời gian xây dựng nhanh chóng để cho ra một sản phẩm tuy không phải là “ích seo lừn” nhưng cũng đủ good để work production.</p>\n<p>Một trong những yếu tố làm cho Rails xây dựng các ứng dụng một cách nhanh chóng như vậy chính là gem ActiveRecord, một ORM mặc định và vô cùng mạnh mẽ trong Rails.</p>\n<p>Như nhiều người khác, khi mới tiếp cận Framework này, tôi cũng sử dụng các lệnh command, các phương thức được support mà cũng không quan tâm đến cách mà nó vận hành.</p>\n<p>Nhưng nghĩ đi nghĩ lại thấy cũng kì, làm mà không hiểu kì cục lắm :smile:</p>\n<p>Vậy thôi, chúng ta hãy cùng thử xây dựng một ORM rất đơn giản, để coi thử magic gì đã xảy ra sau mỗi dòng lệnh.</p>\n<h1 id=\"2-Ma-nguon\"><a href=\"#2-Ma-nguon\" class=\"headerlink\" title=\"2. Mã nguồn\"></a>2. Mã nguồn</h1><blockquote>\n<p>Mã nguồn của ứng dụng này, bạn có thể tham khảo <a href=\"https://github.com/hdchinh/simple-orm-ruby\" target=\"_blank\" rel=\"noopener\">tại đây</a></p>\n</blockquote>\n<h1 id=\"3-Giai-thich\"><a href=\"#3-Giai-thich\" class=\"headerlink\" title=\"3. Giải thích\"></a>3. Giải thích</h1><p>Note: Trước hết chúng ta nên đọc trước về định nghĩa của ORM <a href=\"https://en.wikipedia.org/wiki/Object-relational_mapping\" target=\"_blank\" rel=\"noopener\">tại đây</a></p>\n<p>Để xây dựng 1 ORM và chạy một vài ví dụ đơn giản được thì chúng ta có 2 nhiềm vụ phải làm:</p>\n<ul>\n<li><p>Kết nối với cơ sở dữ liệu (ở đây là postgresql).</p>\n</li>\n<li><p>Xây dựng các class bằng Ruby với các phương thức tương ứng để xử lý trên cơ sở dữ liệu đã kết nối ở bước 1.</p>\n</li>\n</ul>\n<p><strong>STEP 1: Tạo project</strong></p>\n<p>Tạo một project trống với 1 file Gemfile có nội dung như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source <span class=\"string\">'https://rubygems.org'</span></span><br><span class=\"line\"></span><br><span class=\"line\">gem <span class=\"string\">'pg'</span></span><br></pre></td></tr></table></figure>\n\n<p>Cài đặt gem bằng lệnh: <code>bundle install</code>.</p>\n<p>Nếu có lỗi xảy ra hãy tham khảo các tài liệu về cài đặt và sử dụng gem bundler.</p>\n<p><strong>STEP 2: Kết nối cơ sở dữ liệu.</strong></p>\n<p>Khi bắt đầu và quen thuộc với việc sử dụng command trong rails, việc duy nhất chúng ta còn thực sự sử dụng đó là sửa file <code>database.yml</code>, và đó là tất cả những gì cần thiết để đem ứng dụng của chúng ta kết nối với 1 hệ quản trị cơ sở dữ liệu nào đó trên máy. (Thực ra là vẫn còn nhiều điều xảy ra lắm, nhưng hãy cứ tạm chấp nhận như vậy).</p>\n<p>Nhưng nếu không sử dụng Framework Rails, trong trường hợp này, khi tôi kết nối với Postgresql thì tôi sẽ sử dụng một gem tên <code>pg</code> đã cài đặt ở bước 1, và require nó vào file <code>connection.rb</code> có tác dụng kết nối như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'pg'</span></span><br><span class=\"line\"></span><br><span class=\"line\">$conn = PG::Connection.connect(</span><br><span class=\"line\">  <span class=\"symbol\">:hostaddr=&gt;<span class=\"string\">\"127.0.0.1\"</span></span>, <span class=\"symbol\">:port=&gt;</span><span class=\"number\">5432</span>,</span><br><span class=\"line\">  <span class=\"symbol\">:dbname=&gt;<span class=\"string\">\"test-psql_development\"</span></span>,</span><br><span class=\"line\">  <span class=\"symbol\">:user=&gt;<span class=\"string\">\"admin\"</span></span>,</span><br><span class=\"line\">  <span class=\"symbol\">:password=&gt;<span class=\"string\">''</span></span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>Note: Bạn cần thay đổi các giá trị ở trên để phù hợp với database mà bạn muốn kết nối trên máy của bạn.</p>\n<p>Lúc này project của chúng ta có cấu trúc:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- simple-orm</span><br><span class=\"line\">  -- Gemfile</span><br><span class=\"line\">  -- Gemfile.lock (sinh ra sau lệnh `bundle install`)</span><br><span class=\"line\">  -- connection.rb</span><br></pre></td></tr></table></figure>\n\n<p>Note: Trong file <code>connection.rb</code> tôi khai báo biến conn dưới dạng biến toàn cục, để dễ ràng require trong các file khác trong project.</p>\n<p><strong>STEP 3: Xây dựng Class chứa chức năng chính.</strong></p>\n<p>Tạo file <code>mybase.rb</code> với nội dung như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require_relative <span class=\"string\">'connection.rb'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBase</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">all</span></span></span><br><span class=\"line\">    term = <span class=\"string\">\"SELECT * FROM <span class=\"subst\">#&#123;<span class=\"keyword\">self</span>.name.downcase&#125;</span>\"</span></span><br><span class=\"line\">    res = $conn.exec(term)</span><br><span class=\"line\"></span><br><span class=\"line\">    res.each&#123; <span class=\"params\">|row|</span></span><br><span class=\"line\">      puts <span class=\"string\">\"<span class=\"subst\">#&#123;row&#125;</span>\\n\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">find</span><span class=\"params\">(id)</span></span></span><br><span class=\"line\">    term = <span class=\"string\">\"SELECT * FROM <span class=\"subst\">#&#123;<span class=\"keyword\">self</span>.name.downcase&#125;</span> where id = <span class=\"subst\">#&#123;id&#125;</span>\"</span></span><br><span class=\"line\">    res = $conn.exec(term)</span><br><span class=\"line\"></span><br><span class=\"line\">    res.each&#123; <span class=\"params\">|row|</span></span><br><span class=\"line\">      puts <span class=\"string\">\"<span class=\"subst\">#&#123;row&#125;</span>\\n\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>require file <code>connection.rb</code> vào để sử dụng biến conn.</p>\n<p>Trong class này xây dựng 2 class method là <code>all</code> và <code>find</code>, ứng với 2 phương thức trong ActiveRecord.</p>\n<p><code>all</code>: Trả về toàn bộ record trong table.<br><code>find</code>: Trả về record ứng với id được truyền vào.</p>\n<p><strong>STEP 4: Xây dựng class con kế thừa lớp Base ở bước 3 và sử dụng</strong></p>\n<p>Trong cơ sở dữ liệu mà tôi kết nối có table tên <code>comics</code>. Tôi tạo file comics.rb có nội dung như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require_relative <span class=\"string\">'mybase.rb'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Comics</span> &lt; MyBase;</span> <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">\"All record in comics table:\\n\"</span></span><br><span class=\"line\">Comics.all</span><br><span class=\"line\">puts <span class=\"string\">\"Find record has id is 6:\\n\"</span></span><br><span class=\"line\">Comics.find(<span class=\"number\">6</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Tôi require file <code>mybase.rb</code> đã viết ở bước 3 vào file này.</p>\n</li>\n<li><p>Tạo class <code>Comics</code> và cho nó kế thừa class <code>MyBase</code></p>\n</li>\n<li><p>In ra màn hình console các dòng lệnh đã xây dựng để xem kết quả (với lệnh <code>ruby  comics.rb</code> ta sẽ chạy file comics.rb và xuất kết quả ra màn hình console).</p>\n</li>\n</ul>\n<p>Cuối cùng project của chúng ta có dạng như sau:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- simple-orm</span><br><span class=\"line\">  -- Gemfile</span><br><span class=\"line\">  -- Gemfile.lock (sinh ra sau lệnh `bundle install`)</span><br><span class=\"line\">  -- connection.rb</span><br><span class=\"line\">  -- mybase.rb (main chính chứa các phương thức)</span><br><span class=\"line\">  -- comics.rb (class ứng với table comics trong csdl, kế thừa MyBase)</span><br></pre></td></tr></table></figure>\n\n<p>Chạy file <code>comics.rb</code> với lệnh chạy ruby <code>ruby comics.rb</code> ta sẽ xem được thành quả nhỏ của quá trình xây dựng kể trên.</p>\n<h1 id=\"4-Ket-luan\"><a href=\"#4-Ket-luan\" class=\"headerlink\" title=\"4. Kết luận\"></a>4. Kết luận</h1><p>Trên là một ví dụ đơn giản về ORM với ngôn ngữ Ruby, các ORM trong thực tế sẽ phức tạp và tinh tế hơn rất rất nhiều. Hy vọng qua bài viết sẽ giúp bạn đọc có được thêm kiến thức với ORM và cách nó vận hành trong framework như Rails.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-Dat-van-de\"><a href=\"#1-Dat-van-de\" class=\"headerlink\" title=\"1. Đặt vấn đề\"></a>1. Đặt vấn đề</h1><p>Rails có phải là một framework tuyệt vời hay không? Chắc chắn là có rồi, với tôi là như vậy, mặc dù nó tốn Ram quá nhiều và chạy cũng hơi chậm, mọi thứ khác thật sự tuyệt vời.</p>\n<p>Nếu cần phải xây dựng một ứng dụng CRUD, có lẽ Rails sẽ là một lựa chọn hàng đầu, vì thời gian xây dựng nhanh chóng để cho ra một sản phẩm tuy không phải là “ích seo lừn” nhưng cũng đủ good để work production.</p>\n<p>Một trong những yếu tố làm cho Rails xây dựng các ứng dụng một cách nhanh chóng như vậy chính là gem ActiveRecord, một ORM mặc định và vô cùng mạnh mẽ trong Rails.</p>\n<p>Như nhiều người khác, khi mới tiếp cận Framework này, tôi cũng sử dụng các lệnh command, các phương thức được support mà cũng không quan tâm đến cách mà nó vận hành.</p>\n<p>Nhưng nghĩ đi nghĩ lại thấy cũng kì, làm mà không hiểu kì cục lắm :smile:</p>\n<p>Vậy thôi, chúng ta hãy cùng thử xây dựng một ORM rất đơn giản, để coi thử magic gì đã xảy ra sau mỗi dòng lệnh.</p>\n<h1 id=\"2-Ma-nguon\"><a href=\"#2-Ma-nguon\" class=\"headerlink\" title=\"2. Mã nguồn\"></a>2. Mã nguồn</h1><blockquote>\n<p>Mã nguồn của ứng dụng này, bạn có thể tham khảo <a href=\"https://github.com/hdchinh/simple-orm-ruby\" target=\"_blank\" rel=\"noopener\">tại đây</a></p>\n</blockquote>\n<h1 id=\"3-Giai-thich\"><a href=\"#3-Giai-thich\" class=\"headerlink\" title=\"3. Giải thích\"></a>3. Giải thích</h1><p>Note: Trước hết chúng ta nên đọc trước về định nghĩa của ORM <a href=\"https://en.wikipedia.org/wiki/Object-relational_mapping\" target=\"_blank\" rel=\"noopener\">tại đây</a></p>\n<p>Để xây dựng 1 ORM và chạy một vài ví dụ đơn giản được thì chúng ta có 2 nhiềm vụ phải làm:</p>\n<ul>\n<li><p>Kết nối với cơ sở dữ liệu (ở đây là postgresql).</p>\n</li>\n<li><p>Xây dựng các class bằng Ruby với các phương thức tương ứng để xử lý trên cơ sở dữ liệu đã kết nối ở bước 1.</p>\n</li>\n</ul>\n<p><strong>STEP 1: Tạo project</strong></p>\n<p>Tạo một project trống với 1 file Gemfile có nội dung như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source <span class=\"string\">'https://rubygems.org'</span></span><br><span class=\"line\"></span><br><span class=\"line\">gem <span class=\"string\">'pg'</span></span><br></pre></td></tr></table></figure>\n\n<p>Cài đặt gem bằng lệnh: <code>bundle install</code>.</p>\n<p>Nếu có lỗi xảy ra hãy tham khảo các tài liệu về cài đặt và sử dụng gem bundler.</p>\n<p><strong>STEP 2: Kết nối cơ sở dữ liệu.</strong></p>\n<p>Khi bắt đầu và quen thuộc với việc sử dụng command trong rails, việc duy nhất chúng ta còn thực sự sử dụng đó là sửa file <code>database.yml</code>, và đó là tất cả những gì cần thiết để đem ứng dụng của chúng ta kết nối với 1 hệ quản trị cơ sở dữ liệu nào đó trên máy. (Thực ra là vẫn còn nhiều điều xảy ra lắm, nhưng hãy cứ tạm chấp nhận như vậy).</p>\n<p>Nhưng nếu không sử dụng Framework Rails, trong trường hợp này, khi tôi kết nối với Postgresql thì tôi sẽ sử dụng một gem tên <code>pg</code> đã cài đặt ở bước 1, và require nó vào file <code>connection.rb</code> có tác dụng kết nối như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'pg'</span></span><br><span class=\"line\"></span><br><span class=\"line\">$conn = PG::Connection.connect(</span><br><span class=\"line\">  <span class=\"symbol\">:hostaddr=&gt;<span class=\"string\">\"127.0.0.1\"</span></span>, <span class=\"symbol\">:port=&gt;</span><span class=\"number\">5432</span>,</span><br><span class=\"line\">  <span class=\"symbol\">:dbname=&gt;<span class=\"string\">\"test-psql_development\"</span></span>,</span><br><span class=\"line\">  <span class=\"symbol\">:user=&gt;<span class=\"string\">\"admin\"</span></span>,</span><br><span class=\"line\">  <span class=\"symbol\">:password=&gt;<span class=\"string\">''</span></span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>Note: Bạn cần thay đổi các giá trị ở trên để phù hợp với database mà bạn muốn kết nối trên máy của bạn.</p>\n<p>Lúc này project của chúng ta có cấu trúc:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- simple-orm</span><br><span class=\"line\">  -- Gemfile</span><br><span class=\"line\">  -- Gemfile.lock (sinh ra sau lệnh `bundle install`)</span><br><span class=\"line\">  -- connection.rb</span><br></pre></td></tr></table></figure>\n\n<p>Note: Trong file <code>connection.rb</code> tôi khai báo biến conn dưới dạng biến toàn cục, để dễ ràng require trong các file khác trong project.</p>\n<p><strong>STEP 3: Xây dựng Class chứa chức năng chính.</strong></p>\n<p>Tạo file <code>mybase.rb</code> với nội dung như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require_relative <span class=\"string\">'connection.rb'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBase</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">all</span></span></span><br><span class=\"line\">    term = <span class=\"string\">\"SELECT * FROM <span class=\"subst\">#&#123;<span class=\"keyword\">self</span>.name.downcase&#125;</span>\"</span></span><br><span class=\"line\">    res = $conn.exec(term)</span><br><span class=\"line\"></span><br><span class=\"line\">    res.each&#123; <span class=\"params\">|row|</span></span><br><span class=\"line\">      puts <span class=\"string\">\"<span class=\"subst\">#&#123;row&#125;</span>\\n\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">find</span><span class=\"params\">(id)</span></span></span><br><span class=\"line\">    term = <span class=\"string\">\"SELECT * FROM <span class=\"subst\">#&#123;<span class=\"keyword\">self</span>.name.downcase&#125;</span> where id = <span class=\"subst\">#&#123;id&#125;</span>\"</span></span><br><span class=\"line\">    res = $conn.exec(term)</span><br><span class=\"line\"></span><br><span class=\"line\">    res.each&#123; <span class=\"params\">|row|</span></span><br><span class=\"line\">      puts <span class=\"string\">\"<span class=\"subst\">#&#123;row&#125;</span>\\n\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>require file <code>connection.rb</code> vào để sử dụng biến conn.</p>\n<p>Trong class này xây dựng 2 class method là <code>all</code> và <code>find</code>, ứng với 2 phương thức trong ActiveRecord.</p>\n<p><code>all</code>: Trả về toàn bộ record trong table.<br><code>find</code>: Trả về record ứng với id được truyền vào.</p>\n<p><strong>STEP 4: Xây dựng class con kế thừa lớp Base ở bước 3 và sử dụng</strong></p>\n<p>Trong cơ sở dữ liệu mà tôi kết nối có table tên <code>comics</code>. Tôi tạo file comics.rb có nội dung như sau:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require_relative <span class=\"string\">'mybase.rb'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Comics</span> &lt; MyBase;</span> <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">\"All record in comics table:\\n\"</span></span><br><span class=\"line\">Comics.all</span><br><span class=\"line\">puts <span class=\"string\">\"Find record has id is 6:\\n\"</span></span><br><span class=\"line\">Comics.find(<span class=\"number\">6</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Tôi require file <code>mybase.rb</code> đã viết ở bước 3 vào file này.</p>\n</li>\n<li><p>Tạo class <code>Comics</code> và cho nó kế thừa class <code>MyBase</code></p>\n</li>\n<li><p>In ra màn hình console các dòng lệnh đã xây dựng để xem kết quả (với lệnh <code>ruby  comics.rb</code> ta sẽ chạy file comics.rb và xuất kết quả ra màn hình console).</p>\n</li>\n</ul>\n<p>Cuối cùng project của chúng ta có dạng như sau:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- simple-orm</span><br><span class=\"line\">  -- Gemfile</span><br><span class=\"line\">  -- Gemfile.lock (sinh ra sau lệnh `bundle install`)</span><br><span class=\"line\">  -- connection.rb</span><br><span class=\"line\">  -- mybase.rb (main chính chứa các phương thức)</span><br><span class=\"line\">  -- comics.rb (class ứng với table comics trong csdl, kế thừa MyBase)</span><br></pre></td></tr></table></figure>\n\n<p>Chạy file <code>comics.rb</code> với lệnh chạy ruby <code>ruby comics.rb</code> ta sẽ xem được thành quả nhỏ của quá trình xây dựng kể trên.</p>\n<h1 id=\"4-Ket-luan\"><a href=\"#4-Ket-luan\" class=\"headerlink\" title=\"4. Kết luận\"></a>4. Kết luận</h1><p>Trên là một ví dụ đơn giản về ORM với ngôn ngữ Ruby, các ORM trong thực tế sẽ phức tạp và tinh tế hơn rất rất nhiều. Hy vọng qua bài viết sẽ giúp bạn đọc có được thêm kiến thức với ORM và cách nó vận hành trong framework như Rails.</p>\n"},{"title":"Terminal macOS Tricks","date":"2019-08-04T17:00:00.000Z","draft":false,"mytag":"#TIL","_content":"\n## 1. Config to show branch in Terminal\n\nOpen `.bash_profile` file then add:\n\n```shell\nparse_git_branch() {\n    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \\(.*\\)/ (\\1)/'\n}\n\nexport PS1=\"\\u@\\h \\[\\033[32m\\]\\w - \\$(parse_git_branch)\\[\\033[00m\\] $ \"\n```\n\n## 2. Setup to use *subl* command in macOS\n\nRun:\n\n```\nsudo ln -s /Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/subl\n```\n\n## 3. Setup to use code command in macOS\n\nIn VSCode Window, press `command` + `shift` + `P` to open package install. Type `shell` to find package `Shell Command : Install code in PATH`, install and done.\n\nReferences:\n\n[1][https://stackoverflow.com/questions/17333531/how-can-i-display-the-current-branch-and-folder-path-in-terminal](https://stackoverflow.com/questions/17333531/how-can-i-display-the-current-branch-and-folder-path-in-terminal)\n\n[2][https://www.tunnelsup.com/how-to-open-sublime-text-from-the-command-line-using-mac-osx/](https://www.tunnelsup.com/how-to-open-sublime-text-from-the-command-line-using-mac-osx/)\n","source":"_posts/2019-08-05-setup-terminal-macos.md","raw":"---\ntitle: \"Terminal macOS Tricks\"\ndate: 2019-08-05\ndraft: false\ntags: [\"TIl\"]\ncategories: [\"TIL\"]\nmytag: \"#TIL\"\n---\n\n## 1. Config to show branch in Terminal\n\nOpen `.bash_profile` file then add:\n\n```shell\nparse_git_branch() {\n    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \\(.*\\)/ (\\1)/'\n}\n\nexport PS1=\"\\u@\\h \\[\\033[32m\\]\\w - \\$(parse_git_branch)\\[\\033[00m\\] $ \"\n```\n\n## 2. Setup to use *subl* command in macOS\n\nRun:\n\n```\nsudo ln -s /Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/subl\n```\n\n## 3. Setup to use code command in macOS\n\nIn VSCode Window, press `command` + `shift` + `P` to open package install. Type `shell` to find package `Shell Command : Install code in PATH`, install and done.\n\nReferences:\n\n[1][https://stackoverflow.com/questions/17333531/how-can-i-display-the-current-branch-and-folder-path-in-terminal](https://stackoverflow.com/questions/17333531/how-can-i-display-the-current-branch-and-folder-path-in-terminal)\n\n[2][https://www.tunnelsup.com/how-to-open-sublime-text-from-the-command-line-using-mac-osx/](https://www.tunnelsup.com/how-to-open-sublime-text-from-the-command-line-using-mac-osx/)\n","slug":"2019-08-05-setup-terminal-macos","published":1,"updated":"2019-12-06T15:40:34.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7sugq002o5rrs5rqqc3pj","content":"<h2 id=\"1-Config-to-show-branch-in-Terminal\"><a href=\"#1-Config-to-show-branch-in-Terminal\" class=\"headerlink\" title=\"1. Config to show branch in Terminal\"></a>1. Config to show branch in Terminal</h2><p>Open <code>.bash_profile</code> file then add:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parse_git_branch() &#123;</span><br><span class=\"line\">    git branch 2&gt; /dev/null | sed -e '/^[^*]/d' -e 's/* \\(.*\\)/ (\\1)/'</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export PS1=\"\\u@\\h \\[\\033[32m\\]\\w - \\$(parse_git_branch)\\[\\033[00m\\] $ \"</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-Setup-to-use-subl-command-in-macOS\"><a href=\"#2-Setup-to-use-subl-command-in-macOS\" class=\"headerlink\" title=\"2. Setup to use subl command in macOS\"></a>2. Setup to use <em>subl</em> command in macOS</h2><p>Run:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/subl</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Setup-to-use-code-command-in-macOS\"><a href=\"#3-Setup-to-use-code-command-in-macOS\" class=\"headerlink\" title=\"3. Setup to use code command in macOS\"></a>3. Setup to use code command in macOS</h2><p>In VSCode Window, press <code>command</code> + <code>shift</code> + <code>P</code> to open package install. Type <code>shell</code> to find package <code>Shell Command : Install code in PATH</code>, install and done.</p>\n<p>References:</p>\n<p>[1]<a href=\"https://stackoverflow.com/questions/17333531/how-can-i-display-the-current-branch-and-folder-path-in-terminal\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/17333531/how-can-i-display-the-current-branch-and-folder-path-in-terminal</a></p>\n<p>[2]<a href=\"https://www.tunnelsup.com/how-to-open-sublime-text-from-the-command-line-using-mac-osx/\" target=\"_blank\" rel=\"noopener\">https://www.tunnelsup.com/how-to-open-sublime-text-from-the-command-line-using-mac-osx/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-Config-to-show-branch-in-Terminal\"><a href=\"#1-Config-to-show-branch-in-Terminal\" class=\"headerlink\" title=\"1. Config to show branch in Terminal\"></a>1. Config to show branch in Terminal</h2><p>Open <code>.bash_profile</code> file then add:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parse_git_branch() &#123;</span><br><span class=\"line\">    git branch 2&gt; /dev/null | sed -e '/^[^*]/d' -e 's/* \\(.*\\)/ (\\1)/'</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export PS1=\"\\u@\\h \\[\\033[32m\\]\\w - \\$(parse_git_branch)\\[\\033[00m\\] $ \"</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-Setup-to-use-subl-command-in-macOS\"><a href=\"#2-Setup-to-use-subl-command-in-macOS\" class=\"headerlink\" title=\"2. Setup to use subl command in macOS\"></a>2. Setup to use <em>subl</em> command in macOS</h2><p>Run:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/subl</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Setup-to-use-code-command-in-macOS\"><a href=\"#3-Setup-to-use-code-command-in-macOS\" class=\"headerlink\" title=\"3. Setup to use code command in macOS\"></a>3. Setup to use code command in macOS</h2><p>In VSCode Window, press <code>command</code> + <code>shift</code> + <code>P</code> to open package install. Type <code>shell</code> to find package <code>Shell Command : Install code in PATH</code>, install and done.</p>\n<p>References:</p>\n<p>[1]<a href=\"https://stackoverflow.com/questions/17333531/how-can-i-display-the-current-branch-and-folder-path-in-terminal\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/17333531/how-can-i-display-the-current-branch-and-folder-path-in-terminal</a></p>\n<p>[2]<a href=\"https://www.tunnelsup.com/how-to-open-sublime-text-from-the-command-line-using-mac-osx/\" target=\"_blank\" rel=\"noopener\">https://www.tunnelsup.com/how-to-open-sublime-text-from-the-command-line-using-mac-osx/</a></p>\n"},{"title":"My Favourite Vscode Extensions","date":"2019-09-19T17:00:00.000Z","draft":false,"_content":"\n1. Leetcode (https://marketplace.visualstudio.com/items?itemName=shengchen.vscode-leetcode)\n2. Turbo console log ( https://marketplace.visualstudio.com/items?itemName=ChakrounAnas.turbo-console-log)\n3. Polacode ( https://marketplace.visualstudio.com/items?itemName=pnp.polacode)\n4. Path intellisence (https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense)\n5. Vscode-iocns (https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons)\n6. Ident-rainbow (https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow)\n7. Bracket Pair Colorizer 2 (https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2)\n8. Markdown preview (https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced)\n","source":"_posts/2019-09-20-vscode-extension.md","raw":"---\ntitle: \"My Favourite Vscode Extensions\"\ndate: 2019-09-20\ndraft: false\ntags: [\"TIl\"]\ncategories: [\"TIL\"]\n---\n\n1. Leetcode (https://marketplace.visualstudio.com/items?itemName=shengchen.vscode-leetcode)\n2. Turbo console log ( https://marketplace.visualstudio.com/items?itemName=ChakrounAnas.turbo-console-log)\n3. Polacode ( https://marketplace.visualstudio.com/items?itemName=pnp.polacode)\n4. Path intellisence (https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense)\n5. Vscode-iocns (https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons)\n6. Ident-rainbow (https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow)\n7. Bracket Pair Colorizer 2 (https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2)\n8. Markdown preview (https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced)\n","slug":"2019-09-20-vscode-extension","published":1,"updated":"2019-12-06T15:40:40.390Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7sugt002r5rrs79igbci0","content":"<ol>\n<li>Leetcode (<a href=\"https://marketplace.visualstudio.com/items?itemName=shengchen.vscode-leetcode\" target=\"_blank\" rel=\"noopener\">https://marketplace.visualstudio.com/items?itemName=shengchen.vscode-leetcode</a>)</li>\n<li>Turbo console log ( <a href=\"https://marketplace.visualstudio.com/items?itemName=ChakrounAnas.turbo-console-log\" target=\"_blank\" rel=\"noopener\">https://marketplace.visualstudio.com/items?itemName=ChakrounAnas.turbo-console-log</a>)</li>\n<li>Polacode ( <a href=\"https://marketplace.visualstudio.com/items?itemName=pnp.polacode\" target=\"_blank\" rel=\"noopener\">https://marketplace.visualstudio.com/items?itemName=pnp.polacode</a>)</li>\n<li>Path intellisence (<a href=\"https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense\" target=\"_blank\" rel=\"noopener\">https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense</a>)</li>\n<li>Vscode-iocns (<a href=\"https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons\" target=\"_blank\" rel=\"noopener\">https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons</a>)</li>\n<li>Ident-rainbow (<a href=\"https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow\" target=\"_blank\" rel=\"noopener\">https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow</a>)</li>\n<li>Bracket Pair Colorizer 2 (<a href=\"https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2\" target=\"_blank\" rel=\"noopener\">https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2</a>)</li>\n<li>Markdown preview (<a href=\"https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced\" target=\"_blank\" rel=\"noopener\">https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced</a>)</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>Leetcode (<a href=\"https://marketplace.visualstudio.com/items?itemName=shengchen.vscode-leetcode\" target=\"_blank\" rel=\"noopener\">https://marketplace.visualstudio.com/items?itemName=shengchen.vscode-leetcode</a>)</li>\n<li>Turbo console log ( <a href=\"https://marketplace.visualstudio.com/items?itemName=ChakrounAnas.turbo-console-log\" target=\"_blank\" rel=\"noopener\">https://marketplace.visualstudio.com/items?itemName=ChakrounAnas.turbo-console-log</a>)</li>\n<li>Polacode ( <a href=\"https://marketplace.visualstudio.com/items?itemName=pnp.polacode\" target=\"_blank\" rel=\"noopener\">https://marketplace.visualstudio.com/items?itemName=pnp.polacode</a>)</li>\n<li>Path intellisence (<a href=\"https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense\" target=\"_blank\" rel=\"noopener\">https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense</a>)</li>\n<li>Vscode-iocns (<a href=\"https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons\" target=\"_blank\" rel=\"noopener\">https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons</a>)</li>\n<li>Ident-rainbow (<a href=\"https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow\" target=\"_blank\" rel=\"noopener\">https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow</a>)</li>\n<li>Bracket Pair Colorizer 2 (<a href=\"https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2\" target=\"_blank\" rel=\"noopener\">https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2</a>)</li>\n<li>Markdown preview (<a href=\"https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced\" target=\"_blank\" rel=\"noopener\">https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced</a>)</li>\n</ol>\n"},{"title":"Deploy My Blog Use Script","date":"2019-11-30T17:00:00.000Z","_content":"\n## 1. Example\n\n```bash\n#!/bin/bash\nGREEN='\\033[0;32m'\nNC='\\033[0m'\n\nhexo_clean=\"hexo clean\"\nhexo_generate=\"hexo generate\"\ncd_public=\"cd public\"\ncreate_file=\"touch CNAME\"\nadd_content=\"echo \"hdchinh.com\" >> CNAME\"\ndeploy=\"hexo deploy\"\n\necho \"${GREEN}============ Starting Gengerate ===============${NC}\"\neval $hexo_clean\neval $hexo_generate\neval $cd_public\n\necho \"${GREEN}============ Starting Create CNAME ============${NC}\"\neval $create_file\neval $add_content\n\necho \"${GREEN}============ Starting Deploy ==================${NC}\"\neval $deploy\necho \"${GREEN}============ Done =============================${NC}\"\n\n```\n\n## 2. Use multiple command in oneline\n\nWe have two commands need to execute:\n\neg: A, B\n\nWe have three ways to execute A, B in one line.\n\n```bash\nA; B (always run A, B)\n\nA && B (run B if A execute successful)\n\nA || B (run B if A execute failure)\n```\n","source":"_posts/2019-12-01-basic-bash-file-to-deploy-my-blog.md","raw":"---\ntitle: Deploy My Blog Use Script\ndate: 2019-12-01\ntags: [\"TIL\"]\n---\n\n## 1. Example\n\n```bash\n#!/bin/bash\nGREEN='\\033[0;32m'\nNC='\\033[0m'\n\nhexo_clean=\"hexo clean\"\nhexo_generate=\"hexo generate\"\ncd_public=\"cd public\"\ncreate_file=\"touch CNAME\"\nadd_content=\"echo \"hdchinh.com\" >> CNAME\"\ndeploy=\"hexo deploy\"\n\necho \"${GREEN}============ Starting Gengerate ===============${NC}\"\neval $hexo_clean\neval $hexo_generate\neval $cd_public\n\necho \"${GREEN}============ Starting Create CNAME ============${NC}\"\neval $create_file\neval $add_content\n\necho \"${GREEN}============ Starting Deploy ==================${NC}\"\neval $deploy\necho \"${GREEN}============ Done =============================${NC}\"\n\n```\n\n## 2. Use multiple command in oneline\n\nWe have two commands need to execute:\n\neg: A, B\n\nWe have three ways to execute A, B in one line.\n\n```bash\nA; B (always run A, B)\n\nA && B (run B if A execute successful)\n\nA || B (run B if A execute failure)\n```\n","slug":"2019-12-01-basic-bash-file-to-deploy-my-blog","published":1,"updated":"2019-12-03T11:29:48.900Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7sugv002u5rrsab83fod8","content":"<h2 id=\"1-Example\"><a href=\"#1-Example\" class=\"headerlink\" title=\"1. Example\"></a>1. Example</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">GREEN=<span class=\"string\">'\\033[0;32m'</span></span><br><span class=\"line\">NC=<span class=\"string\">'\\033[0m'</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo_clean=<span class=\"string\">\"hexo clean\"</span></span><br><span class=\"line\">hexo_generate=<span class=\"string\">\"hexo generate\"</span></span><br><span class=\"line\">cd_public=<span class=\"string\">\"cd public\"</span></span><br><span class=\"line\">create_file=<span class=\"string\">\"touch CNAME\"</span></span><br><span class=\"line\">add_content=<span class=\"string\">\"echo \"</span>hdchinh.com<span class=\"string\">\" &gt;&gt; CNAME\"</span></span><br><span class=\"line\">deploy=<span class=\"string\">\"hexo deploy\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$&#123;GREEN&#125;</span>============ Starting Gengerate ===============<span class=\"variable\">$&#123;NC&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"variable\">$hexo_clean</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"variable\">$hexo_generate</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"variable\">$cd_public</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$&#123;GREEN&#125;</span>============ Starting Create CNAME ============<span class=\"variable\">$&#123;NC&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"variable\">$create_file</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"variable\">$add_content</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$&#123;GREEN&#125;</span>============ Starting Deploy ==================<span class=\"variable\">$&#123;NC&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"variable\">$deploy</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$&#123;GREEN&#125;</span>============ Done =============================<span class=\"variable\">$&#123;NC&#125;</span>\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-Use-multiple-command-in-oneline\"><a href=\"#2-Use-multiple-command-in-oneline\" class=\"headerlink\" title=\"2. Use multiple command in oneline\"></a>2. Use multiple command in oneline</h2><p>We have two commands need to execute:</p>\n<p>eg: A, B</p>\n<p>We have three ways to execute A, B in one line.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A; B (always run A, B)</span><br><span class=\"line\"></span><br><span class=\"line\">A &amp;&amp; B (run B <span class=\"keyword\">if</span> A execute successful)</span><br><span class=\"line\"></span><br><span class=\"line\">A || B (run B <span class=\"keyword\">if</span> A execute failure)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-Example\"><a href=\"#1-Example\" class=\"headerlink\" title=\"1. Example\"></a>1. Example</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">GREEN=<span class=\"string\">'\\033[0;32m'</span></span><br><span class=\"line\">NC=<span class=\"string\">'\\033[0m'</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo_clean=<span class=\"string\">\"hexo clean\"</span></span><br><span class=\"line\">hexo_generate=<span class=\"string\">\"hexo generate\"</span></span><br><span class=\"line\">cd_public=<span class=\"string\">\"cd public\"</span></span><br><span class=\"line\">create_file=<span class=\"string\">\"touch CNAME\"</span></span><br><span class=\"line\">add_content=<span class=\"string\">\"echo \"</span>hdchinh.com<span class=\"string\">\" &gt;&gt; CNAME\"</span></span><br><span class=\"line\">deploy=<span class=\"string\">\"hexo deploy\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$&#123;GREEN&#125;</span>============ Starting Gengerate ===============<span class=\"variable\">$&#123;NC&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"variable\">$hexo_clean</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"variable\">$hexo_generate</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"variable\">$cd_public</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$&#123;GREEN&#125;</span>============ Starting Create CNAME ============<span class=\"variable\">$&#123;NC&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"variable\">$create_file</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"variable\">$add_content</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$&#123;GREEN&#125;</span>============ Starting Deploy ==================<span class=\"variable\">$&#123;NC&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"variable\">$deploy</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$&#123;GREEN&#125;</span>============ Done =============================<span class=\"variable\">$&#123;NC&#125;</span>\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-Use-multiple-command-in-oneline\"><a href=\"#2-Use-multiple-command-in-oneline\" class=\"headerlink\" title=\"2. Use multiple command in oneline\"></a>2. Use multiple command in oneline</h2><p>We have two commands need to execute:</p>\n<p>eg: A, B</p>\n<p>We have three ways to execute A, B in one line.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A; B (always run A, B)</span><br><span class=\"line\"></span><br><span class=\"line\">A &amp;&amp; B (run B <span class=\"keyword\">if</span> A execute successful)</span><br><span class=\"line\"></span><br><span class=\"line\">A || B (run B <span class=\"keyword\">if</span> A execute failure)</span><br></pre></td></tr></table></figure>\n"},{"title":"Use multiple accounts with SSH","date":"2019-11-30T17:00:00.000Z","_content":"\n## 1. Generate keys\n\n```bash\nssh-keygen -t rsa -C \"YOUr_EMAIL_OR_YOUR_INFO\" -f \"YOUR_NAME_YOU_WANT_TO_SET_FOR_THIS_KEY\"\n```\n\neg.\n```bash\nssh-keygen -t rsa -C \"hduychinh@gmail.com\" -f \"primary_github\"\n```\n\n\n## 2. Add key\n\neg.\n```bash\nssh-add ~/.ssh/primary_github\n```\n\n## 3. Cache\n\nRemove cache:\n```bash\nssh-add -D\n```\n\nShow cache:\n```bash\nssh-add -l\n```\n\n## 4. Create config file\n\n> ~/.ssh/config\n\neg:\n\n```\nHost primary_github.github.com\nHostName github.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/primary_github\n\nHost secondary_github.github.com\nHostName github.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/secondary_github\n```\n## 5. Add remote with prefix\n\neg:\n```bash\ngit remote add origin git@primary_github.github.com:1312047/nus-overview.git\n```\n","source":"_posts/2019-12-01-how-to-use-multi-account-with-ssh.md","raw":"---\ntitle: Use multiple accounts with SSH\ndate: 2019-12-01\ntags: [\"TIL\"]\n---\n\n## 1. Generate keys\n\n```bash\nssh-keygen -t rsa -C \"YOUr_EMAIL_OR_YOUR_INFO\" -f \"YOUR_NAME_YOU_WANT_TO_SET_FOR_THIS_KEY\"\n```\n\neg.\n```bash\nssh-keygen -t rsa -C \"hduychinh@gmail.com\" -f \"primary_github\"\n```\n\n\n## 2. Add key\n\neg.\n```bash\nssh-add ~/.ssh/primary_github\n```\n\n## 3. Cache\n\nRemove cache:\n```bash\nssh-add -D\n```\n\nShow cache:\n```bash\nssh-add -l\n```\n\n## 4. Create config file\n\n> ~/.ssh/config\n\neg:\n\n```\nHost primary_github.github.com\nHostName github.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/primary_github\n\nHost secondary_github.github.com\nHostName github.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/secondary_github\n```\n## 5. Add remote with prefix\n\neg:\n```bash\ngit remote add origin git@primary_github.github.com:1312047/nus-overview.git\n```\n","slug":"2019-12-01-how-to-use-multi-account-with-ssh","published":1,"updated":"2019-12-03T11:32:31.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7sugy002x5rrs5vjxapg3","content":"<h2 id=\"1-Generate-keys\"><a href=\"#1-Generate-keys\" class=\"headerlink\" title=\"1. Generate keys\"></a>1. Generate keys</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"YOUr_EMAIL_OR_YOUR_INFO\"</span> -f <span class=\"string\">\"YOUR_NAME_YOU_WANT_TO_SET_FOR_THIS_KEY\"</span></span><br></pre></td></tr></table></figure>\n\n<p>eg.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"hduychinh@gmail.com\"</span> -f <span class=\"string\">\"primary_github\"</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"2-Add-key\"><a href=\"#2-Add-key\" class=\"headerlink\" title=\"2. Add key\"></a>2. Add key</h2><p>eg.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-add ~/.ssh/primary_github</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Cache\"><a href=\"#3-Cache\" class=\"headerlink\" title=\"3. Cache\"></a>3. Cache</h2><p>Remove cache:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-add -D</span><br></pre></td></tr></table></figure>\n\n<p>Show cache:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-add -l</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-Create-config-file\"><a href=\"#4-Create-config-file\" class=\"headerlink\" title=\"4. Create config file\"></a>4. Create config file</h2><blockquote>\n<p>~/.ssh/config</p>\n</blockquote>\n<p>eg:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host primary_github.github.com</span><br><span class=\"line\">HostName github.com</span><br><span class=\"line\">PreferredAuthentications publickey</span><br><span class=\"line\">IdentityFile ~/.ssh/primary_github</span><br><span class=\"line\"></span><br><span class=\"line\">Host secondary_github.github.com</span><br><span class=\"line\">HostName github.com</span><br><span class=\"line\">PreferredAuthentications publickey</span><br><span class=\"line\">IdentityFile ~/.ssh/secondary_github</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-Add-remote-with-prefix\"><a href=\"#5-Add-remote-with-prefix\" class=\"headerlink\" title=\"5. Add remote with prefix\"></a>5. Add remote with prefix</h2><p>eg:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@primary_github.github.com:1312047/nus-overview.git</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-Generate-keys\"><a href=\"#1-Generate-keys\" class=\"headerlink\" title=\"1. Generate keys\"></a>1. Generate keys</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"YOUr_EMAIL_OR_YOUR_INFO\"</span> -f <span class=\"string\">\"YOUR_NAME_YOU_WANT_TO_SET_FOR_THIS_KEY\"</span></span><br></pre></td></tr></table></figure>\n\n<p>eg.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"hduychinh@gmail.com\"</span> -f <span class=\"string\">\"primary_github\"</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"2-Add-key\"><a href=\"#2-Add-key\" class=\"headerlink\" title=\"2. Add key\"></a>2. Add key</h2><p>eg.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-add ~/.ssh/primary_github</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Cache\"><a href=\"#3-Cache\" class=\"headerlink\" title=\"3. Cache\"></a>3. Cache</h2><p>Remove cache:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-add -D</span><br></pre></td></tr></table></figure>\n\n<p>Show cache:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-add -l</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-Create-config-file\"><a href=\"#4-Create-config-file\" class=\"headerlink\" title=\"4. Create config file\"></a>4. Create config file</h2><blockquote>\n<p>~/.ssh/config</p>\n</blockquote>\n<p>eg:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host primary_github.github.com</span><br><span class=\"line\">HostName github.com</span><br><span class=\"line\">PreferredAuthentications publickey</span><br><span class=\"line\">IdentityFile ~/.ssh/primary_github</span><br><span class=\"line\"></span><br><span class=\"line\">Host secondary_github.github.com</span><br><span class=\"line\">HostName github.com</span><br><span class=\"line\">PreferredAuthentications publickey</span><br><span class=\"line\">IdentityFile ~/.ssh/secondary_github</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-Add-remote-with-prefix\"><a href=\"#5-Add-remote-with-prefix\" class=\"headerlink\" title=\"5. Add remote with prefix\"></a>5. Add remote with prefix</h2><p>eg:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@primary_github.github.com:1312047/nus-overview.git</span><br></pre></td></tr></table></figure>\n"},{"title":"Simple BST With Ruby","date":"2019-11-30T17:00:00.000Z","_content":"\n![vang con](/../images/vangcon.jpeg)\n\n## Init\n\n```ruby\nclass Node\n  attr_accessor :left, :right, :value\n\n  def initialize(val)\n    @value = val\n  end\nend\n```\n\n## Display Tree\n\n```ruby\ndef get_tree\n  puts \"#{value}\\n\"\n  @left.get_tree() if @left\n  @right.get_tree() if @right\nend\n```\n\n## Add Node\n\n```ruby\nclass Node\n  attr_accessor :left, :right, :value\n\n  def initialize(val)\n    @value = val\n  end\n\n  def add(new_val)\n    return if @value == new_val\n    if(@value > new_val)\n      add_left(new_val)\n    else\n      add_right(new_val)\n    end\n  end\n\n  private\n\n  def add_left(val)\n    if(@left)\n      @left.add(val)\n    else\n      @left = Node.new(val)\n    end\n  end\n\n  def add_right(val)\n    if(@right)\n      @right.add(val)\n    else\n      @right = Node.new(val)\n    end\n  end\n\nend\n```\n\n## Check existing?\n\n```ruby\nclass Node\n  attr_accessor :left, :right, :value\n\n  def initialize(val)\n    @value = val\n  end\n\n  def include?(val)\n    return true if(@value == val)\n\n    if(@value > val)\n      return false if !@left\n      @left.include?(val)\n    else\n      return false if !@right\n      @right.include?(val)\n    end\n  end\nend\n```\n\n## Update Node\n\n```ruby\ndef update(current_value, new_value)\n  if(@value == current_value)\n    @value = new_value\n    return true\n  end\n\n  if(@value > current_value)\n    return false if !@left\n    @left.update(current_value, new_value)\n  else\n    return false if !@right\n    @right.update(current_value, new_value)\n  end\nend\n```\n\n## Get Depth\n\n```ruby\ndef max_depth(root)\n  return 0 if root.nil?\n  return [max_depth(root.left), max_depth(root.right)].max + 1\nend\n```\n\n## Example\n\n```ruby\nclass Node\n  attr_accessor :left, :right, :value\n\n  def initialize(val)\n    @value = val\n  end\n\n  def get_tree\n    puts \"#{value}\\n\"\n    @left.get_tree() if @left\n    @right.get_tree() if @right\n  end\n\n  def add(new_val)\n    return if @value == new_val\n    if(@value > new_val)\n      add_left(new_val)\n    else\n      add_right(new_val)\n    end\n  end\n\n  def include?(val)\n    return true if(@value == val)\n\n    if(@value > val)\n      return false if !@left\n      @left.include?(val)\n    else\n      return false if !@right\n      @right.include?(val)\n    end\n  end\n\n  def update(current_value, new_value)\n    if(@value == current_value)\n      @value = new_value\n      return true\n    end\n\n    if(@value > current_value)\n      return false if !@left\n      @left.update(current_value, new_value)\n    else\n      return false if !@right\n      @right.update(current_value, new_value)\n    end\n  end\n\n  private\n\n  def add_left(val)\n    if(@left)\n      @left.add(val)\n    else\n      @left = Node.new(val)\n    end\n  end\n\n  def add_right(val)\n    if(@right)\n      @right.add(val)\n    else\n      @right = Node.new(val)\n    end\n  end\n\nend\n\na = Node.new(5)\nputs \"#{a.value} | #{a.left ? a.left.value : nil} | #{a.right ? a.right.value : nil}\"\n\na.add(2)\na.add(7)\na.add(9)\n\na.get_tree()\n\na.update(7, 6)\n\nputs \"#{a.value} | #{a.left ? a.left.value : nil} | #{a.right ? a.right.value : nil}\"\n\na.get_tree()\n\nb = a.right\nputs \"#{b.value} | #{b.left ? b.left.value : nil} | #{b.right ? b.right.value : nil}\"\n\n```\n\n-----\n","source":"_posts/2019-12-01-simple-bst-in-ruby.md","raw":"---\ntitle: Simple BST With Ruby\ndate: 2019-12-01\ntags: [\"RUBY\"]\n---\n\n![vang con](/../images/vangcon.jpeg)\n\n## Init\n\n```ruby\nclass Node\n  attr_accessor :left, :right, :value\n\n  def initialize(val)\n    @value = val\n  end\nend\n```\n\n## Display Tree\n\n```ruby\ndef get_tree\n  puts \"#{value}\\n\"\n  @left.get_tree() if @left\n  @right.get_tree() if @right\nend\n```\n\n## Add Node\n\n```ruby\nclass Node\n  attr_accessor :left, :right, :value\n\n  def initialize(val)\n    @value = val\n  end\n\n  def add(new_val)\n    return if @value == new_val\n    if(@value > new_val)\n      add_left(new_val)\n    else\n      add_right(new_val)\n    end\n  end\n\n  private\n\n  def add_left(val)\n    if(@left)\n      @left.add(val)\n    else\n      @left = Node.new(val)\n    end\n  end\n\n  def add_right(val)\n    if(@right)\n      @right.add(val)\n    else\n      @right = Node.new(val)\n    end\n  end\n\nend\n```\n\n## Check existing?\n\n```ruby\nclass Node\n  attr_accessor :left, :right, :value\n\n  def initialize(val)\n    @value = val\n  end\n\n  def include?(val)\n    return true if(@value == val)\n\n    if(@value > val)\n      return false if !@left\n      @left.include?(val)\n    else\n      return false if !@right\n      @right.include?(val)\n    end\n  end\nend\n```\n\n## Update Node\n\n```ruby\ndef update(current_value, new_value)\n  if(@value == current_value)\n    @value = new_value\n    return true\n  end\n\n  if(@value > current_value)\n    return false if !@left\n    @left.update(current_value, new_value)\n  else\n    return false if !@right\n    @right.update(current_value, new_value)\n  end\nend\n```\n\n## Get Depth\n\n```ruby\ndef max_depth(root)\n  return 0 if root.nil?\n  return [max_depth(root.left), max_depth(root.right)].max + 1\nend\n```\n\n## Example\n\n```ruby\nclass Node\n  attr_accessor :left, :right, :value\n\n  def initialize(val)\n    @value = val\n  end\n\n  def get_tree\n    puts \"#{value}\\n\"\n    @left.get_tree() if @left\n    @right.get_tree() if @right\n  end\n\n  def add(new_val)\n    return if @value == new_val\n    if(@value > new_val)\n      add_left(new_val)\n    else\n      add_right(new_val)\n    end\n  end\n\n  def include?(val)\n    return true if(@value == val)\n\n    if(@value > val)\n      return false if !@left\n      @left.include?(val)\n    else\n      return false if !@right\n      @right.include?(val)\n    end\n  end\n\n  def update(current_value, new_value)\n    if(@value == current_value)\n      @value = new_value\n      return true\n    end\n\n    if(@value > current_value)\n      return false if !@left\n      @left.update(current_value, new_value)\n    else\n      return false if !@right\n      @right.update(current_value, new_value)\n    end\n  end\n\n  private\n\n  def add_left(val)\n    if(@left)\n      @left.add(val)\n    else\n      @left = Node.new(val)\n    end\n  end\n\n  def add_right(val)\n    if(@right)\n      @right.add(val)\n    else\n      @right = Node.new(val)\n    end\n  end\n\nend\n\na = Node.new(5)\nputs \"#{a.value} | #{a.left ? a.left.value : nil} | #{a.right ? a.right.value : nil}\"\n\na.add(2)\na.add(7)\na.add(9)\n\na.get_tree()\n\na.update(7, 6)\n\nputs \"#{a.value} | #{a.left ? a.left.value : nil} | #{a.right ? a.right.value : nil}\"\n\na.get_tree()\n\nb = a.right\nputs \"#{b.value} | #{b.left ? b.left.value : nil} | #{b.right ? b.right.value : nil}\"\n\n```\n\n-----\n","slug":"2019-12-01-simple-bst-in-ruby","published":1,"updated":"2019-12-15T05:09:27.159Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7suh100305rrs65gz3i4j","content":"<p><img src=\"/../images/vangcon.jpeg\" alt=\"vang con\"></p>\n<h2 id=\"Init\"><a href=\"#Init\" class=\"headerlink\" title=\"Init\"></a>Init</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:left</span>, <span class=\"symbol\">:right</span>, <span class=\"symbol\">:value</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(val)</span></span></span><br><span class=\"line\">    @value = val</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Display-Tree\"><a href=\"#Display-Tree\" class=\"headerlink\" title=\"Display Tree\"></a>Display Tree</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_tree</span></span></span><br><span class=\"line\">  puts <span class=\"string\">\"<span class=\"subst\">#&#123;value&#125;</span>\\n\"</span></span><br><span class=\"line\">  @left.get_tree() <span class=\"keyword\">if</span> @left</span><br><span class=\"line\">  @right.get_tree() <span class=\"keyword\">if</span> @right</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Add-Node\"><a href=\"#Add-Node\" class=\"headerlink\" title=\"Add Node\"></a>Add Node</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:left</span>, <span class=\"symbol\">:right</span>, <span class=\"symbol\">:value</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(val)</span></span></span><br><span class=\"line\">    @value = val</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(new_val)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">if</span> @value == new_val</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(@value &gt; new_val)</span><br><span class=\"line\">      add_left(new_val)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      add_right(new_val)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  private</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_left</span><span class=\"params\">(val)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(@left)</span><br><span class=\"line\">      @left.add(val)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      @left = Node.new(val)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_right</span><span class=\"params\">(val)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(@right)</span><br><span class=\"line\">      @right.add(val)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      @right = Node.new(val)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Check-existing\"><a href=\"#Check-existing\" class=\"headerlink\" title=\"Check existing?\"></a>Check existing?</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:left</span>, <span class=\"symbol\">:right</span>, <span class=\"symbol\">:value</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(val)</span></span></span><br><span class=\"line\">    @value = val</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">include?</span><span class=\"params\">(val)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span> <span class=\"keyword\">if</span>(@value == val)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(@value &gt; val)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"keyword\">if</span> !@left</span><br><span class=\"line\">      @left.<span class=\"keyword\">include</span>?(val)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"keyword\">if</span> !@right</span><br><span class=\"line\">      @right.<span class=\"keyword\">include</span>?(val)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Update-Node\"><a href=\"#Update-Node\" class=\"headerlink\" title=\"Update Node\"></a>Update Node</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(current_value, new_value)</span></span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(@value == current_value)</span><br><span class=\"line\">    @value = new_value</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(@value &gt; current_value)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"keyword\">if</span> !@left</span><br><span class=\"line\">    @left.update(current_value, new_value)</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"keyword\">if</span> !@right</span><br><span class=\"line\">    @right.update(current_value, new_value)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Get-Depth\"><a href=\"#Get-Depth\" class=\"headerlink\" title=\"Get Depth\"></a>Get Depth</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">max_depth</span><span class=\"params\">(root)</span></span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span> <span class=\"keyword\">if</span> root.<span class=\"literal\">nil</span>?</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [max_depth(root.left), max_depth(root.right)].max + <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:left</span>, <span class=\"symbol\">:right</span>, <span class=\"symbol\">:value</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(val)</span></span></span><br><span class=\"line\">    @value = val</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_tree</span></span></span><br><span class=\"line\">    puts <span class=\"string\">\"<span class=\"subst\">#&#123;value&#125;</span>\\n\"</span></span><br><span class=\"line\">    @left.get_tree() <span class=\"keyword\">if</span> @left</span><br><span class=\"line\">    @right.get_tree() <span class=\"keyword\">if</span> @right</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(new_val)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">if</span> @value == new_val</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(@value &gt; new_val)</span><br><span class=\"line\">      add_left(new_val)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      add_right(new_val)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">include?</span><span class=\"params\">(val)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span> <span class=\"keyword\">if</span>(@value == val)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(@value &gt; val)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"keyword\">if</span> !@left</span><br><span class=\"line\">      @left.<span class=\"keyword\">include</span>?(val)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"keyword\">if</span> !@right</span><br><span class=\"line\">      @right.<span class=\"keyword\">include</span>?(val)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(current_value, new_value)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(@value == current_value)</span><br><span class=\"line\">      @value = new_value</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(@value &gt; current_value)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"keyword\">if</span> !@left</span><br><span class=\"line\">      @left.update(current_value, new_value)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"keyword\">if</span> !@right</span><br><span class=\"line\">      @right.update(current_value, new_value)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  private</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_left</span><span class=\"params\">(val)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(@left)</span><br><span class=\"line\">      @left.add(val)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      @left = Node.new(val)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_right</span><span class=\"params\">(val)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(@right)</span><br><span class=\"line\">      @right.add(val)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      @right = Node.new(val)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = Node.new(<span class=\"number\">5</span>)</span><br><span class=\"line\">puts <span class=\"string\">\"<span class=\"subst\">#&#123;a.value&#125;</span> | <span class=\"subst\">#&#123;a.left ? a.left.value : <span class=\"literal\">nil</span>&#125;</span> | <span class=\"subst\">#&#123;a.right ? a.right.value : <span class=\"literal\">nil</span>&#125;</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.add(<span class=\"number\">2</span>)</span><br><span class=\"line\">a.add(<span class=\"number\">7</span>)</span><br><span class=\"line\">a.add(<span class=\"number\">9</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">a.get_tree()</span><br><span class=\"line\"></span><br><span class=\"line\">a.update(<span class=\"number\">7</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">\"<span class=\"subst\">#&#123;a.value&#125;</span> | <span class=\"subst\">#&#123;a.left ? a.left.value : <span class=\"literal\">nil</span>&#125;</span> | <span class=\"subst\">#&#123;a.right ? a.right.value : <span class=\"literal\">nil</span>&#125;</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.get_tree()</span><br><span class=\"line\"></span><br><span class=\"line\">b = a.right</span><br><span class=\"line\">puts <span class=\"string\">\"<span class=\"subst\">#&#123;b.value&#125;</span> | <span class=\"subst\">#&#123;b.left ? b.left.value : <span class=\"literal\">nil</span>&#125;</span> | <span class=\"subst\">#&#123;b.right ? b.right.value : <span class=\"literal\">nil</span>&#125;</span>\"</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/../images/vangcon.jpeg\" alt=\"vang con\"></p>\n<h2 id=\"Init\"><a href=\"#Init\" class=\"headerlink\" title=\"Init\"></a>Init</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:left</span>, <span class=\"symbol\">:right</span>, <span class=\"symbol\">:value</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(val)</span></span></span><br><span class=\"line\">    @value = val</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Display-Tree\"><a href=\"#Display-Tree\" class=\"headerlink\" title=\"Display Tree\"></a>Display Tree</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_tree</span></span></span><br><span class=\"line\">  puts <span class=\"string\">\"<span class=\"subst\">#&#123;value&#125;</span>\\n\"</span></span><br><span class=\"line\">  @left.get_tree() <span class=\"keyword\">if</span> @left</span><br><span class=\"line\">  @right.get_tree() <span class=\"keyword\">if</span> @right</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Add-Node\"><a href=\"#Add-Node\" class=\"headerlink\" title=\"Add Node\"></a>Add Node</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:left</span>, <span class=\"symbol\">:right</span>, <span class=\"symbol\">:value</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(val)</span></span></span><br><span class=\"line\">    @value = val</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(new_val)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">if</span> @value == new_val</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(@value &gt; new_val)</span><br><span class=\"line\">      add_left(new_val)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      add_right(new_val)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  private</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_left</span><span class=\"params\">(val)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(@left)</span><br><span class=\"line\">      @left.add(val)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      @left = Node.new(val)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_right</span><span class=\"params\">(val)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(@right)</span><br><span class=\"line\">      @right.add(val)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      @right = Node.new(val)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Check-existing\"><a href=\"#Check-existing\" class=\"headerlink\" title=\"Check existing?\"></a>Check existing?</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:left</span>, <span class=\"symbol\">:right</span>, <span class=\"symbol\">:value</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(val)</span></span></span><br><span class=\"line\">    @value = val</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">include?</span><span class=\"params\">(val)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span> <span class=\"keyword\">if</span>(@value == val)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(@value &gt; val)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"keyword\">if</span> !@left</span><br><span class=\"line\">      @left.<span class=\"keyword\">include</span>?(val)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"keyword\">if</span> !@right</span><br><span class=\"line\">      @right.<span class=\"keyword\">include</span>?(val)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Update-Node\"><a href=\"#Update-Node\" class=\"headerlink\" title=\"Update Node\"></a>Update Node</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(current_value, new_value)</span></span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(@value == current_value)</span><br><span class=\"line\">    @value = new_value</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(@value &gt; current_value)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"keyword\">if</span> !@left</span><br><span class=\"line\">    @left.update(current_value, new_value)</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"keyword\">if</span> !@right</span><br><span class=\"line\">    @right.update(current_value, new_value)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Get-Depth\"><a href=\"#Get-Depth\" class=\"headerlink\" title=\"Get Depth\"></a>Get Depth</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">max_depth</span><span class=\"params\">(root)</span></span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span> <span class=\"keyword\">if</span> root.<span class=\"literal\">nil</span>?</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [max_depth(root.left), max_depth(root.right)].max + <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:left</span>, <span class=\"symbol\">:right</span>, <span class=\"symbol\">:value</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(val)</span></span></span><br><span class=\"line\">    @value = val</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_tree</span></span></span><br><span class=\"line\">    puts <span class=\"string\">\"<span class=\"subst\">#&#123;value&#125;</span>\\n\"</span></span><br><span class=\"line\">    @left.get_tree() <span class=\"keyword\">if</span> @left</span><br><span class=\"line\">    @right.get_tree() <span class=\"keyword\">if</span> @right</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(new_val)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">if</span> @value == new_val</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(@value &gt; new_val)</span><br><span class=\"line\">      add_left(new_val)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      add_right(new_val)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">include?</span><span class=\"params\">(val)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span> <span class=\"keyword\">if</span>(@value == val)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(@value &gt; val)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"keyword\">if</span> !@left</span><br><span class=\"line\">      @left.<span class=\"keyword\">include</span>?(val)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"keyword\">if</span> !@right</span><br><span class=\"line\">      @right.<span class=\"keyword\">include</span>?(val)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(current_value, new_value)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(@value == current_value)</span><br><span class=\"line\">      @value = new_value</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(@value &gt; current_value)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"keyword\">if</span> !@left</span><br><span class=\"line\">      @left.update(current_value, new_value)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"keyword\">if</span> !@right</span><br><span class=\"line\">      @right.update(current_value, new_value)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  private</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_left</span><span class=\"params\">(val)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(@left)</span><br><span class=\"line\">      @left.add(val)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      @left = Node.new(val)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_right</span><span class=\"params\">(val)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(@right)</span><br><span class=\"line\">      @right.add(val)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      @right = Node.new(val)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = Node.new(<span class=\"number\">5</span>)</span><br><span class=\"line\">puts <span class=\"string\">\"<span class=\"subst\">#&#123;a.value&#125;</span> | <span class=\"subst\">#&#123;a.left ? a.left.value : <span class=\"literal\">nil</span>&#125;</span> | <span class=\"subst\">#&#123;a.right ? a.right.value : <span class=\"literal\">nil</span>&#125;</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.add(<span class=\"number\">2</span>)</span><br><span class=\"line\">a.add(<span class=\"number\">7</span>)</span><br><span class=\"line\">a.add(<span class=\"number\">9</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">a.get_tree()</span><br><span class=\"line\"></span><br><span class=\"line\">a.update(<span class=\"number\">7</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">\"<span class=\"subst\">#&#123;a.value&#125;</span> | <span class=\"subst\">#&#123;a.left ? a.left.value : <span class=\"literal\">nil</span>&#125;</span> | <span class=\"subst\">#&#123;a.right ? a.right.value : <span class=\"literal\">nil</span>&#125;</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.get_tree()</span><br><span class=\"line\"></span><br><span class=\"line\">b = a.right</span><br><span class=\"line\">puts <span class=\"string\">\"<span class=\"subst\">#&#123;b.value&#125;</span> | <span class=\"subst\">#&#123;b.left ? b.left.value : <span class=\"literal\">nil</span>&#125;</span> | <span class=\"subst\">#&#123;b.right ? b.right.value : <span class=\"literal\">nil</span>&#125;</span>\"</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n"},{"title":"How To Use Arguments In Ruby","date":"2019-12-04T17:00:00.000Z","_content":"\n## How Many Kind Of Arguments In Ruby?\n\nWe can answer: **Three**\n\n1. Required arguments\n\neg:\n\n```ruby\ndef hello(name)\n  puts \"Hello #{name}\"\nend\n```\n\nIn there, *name* is a required argument. it mean if you call **hello** method and do not pass an argument, the output that you see should like:\n\n```ruby\nhello()\n\n=> ArgumentError: wrong number of arguments (given 0, expected 1)\n\n```\n\nLet pass an argument and this error will gone.\n\n```ruby\nhello('Meo Meo')\n\n=> \"Hello Meo Meo\"\n```\n\nIt's very simple, I think we are make sence now.\n\n2. Default arguments\n\nAlmost like **Required arguments**. It has one more thing different:\n\nThat is when we pass argument in a method, we can set default value for it, and then when you call this method and unlucky forgot pass arguments for this method, your method still working, if it's not received arguments when it is called, it will use the default value.\n\neg:\n\n```ruby\ndef hello(name = \"Meo Meo\")\n  puts \"Hello #{name}\"\nend\n\nhello(\"Chinh\")\n=> \"Hello Chinh\"\n\n# if you don't pass an argument\nhello()\n=> \"Hello Meo Meo\"\n```\n\n3. Optional arguments\n\nDo you ever want to create a method and have no idea how many arguments does this method need?\n\nYes, we use optional arguments for this case, take a looke at the example below:\n\n```ruby\ndef hello(*family)\n  family.each do |name|\n    puts \"Hello #{name}\\n\"\n  end\nend\n\nhello('Chinh', 'Chuot', 'Cho')\n\n# The output:\n# Hello Chinh\n# Hello Chuot\n# Hello Cho\n```\n\n## Keyword Arguments\n\nIt's a new feature has come from ruby 2.0 to higher. It like pass arguments as a hash but more powerful.\n\neg:\n\n```ruby\ndef hello(name: 'Chinh', age: 25)\n  puts \"Name: #{name} - Age: #{age}\\n\"\nend\n```\n\nif you call **hello** method with no arguments:\n\n```ruby\nhello()\n```\n\nIt will use default value.\n\nAnd then\n\nIf you pass argumets for it:\n\n```ruby\nhello('Chinh', 25)\n```\n\nwhat will it return?\n\n**Error**: yes, it will response a error, but why?\n\nBecause, with **keyword arguments**, you need to pass argumetns like a hash you declare when initial method. (**same key**).\n\n```ruby\nhello(name: 'Meo')\n# Hello Meo - Age: 25\n\nhello(age: 10)\n# Hello Chinh - Age: 10\n\nhello(name: 'Chuot', age: 11)\n# Hello Chuot - Age: 11\n```\n\nIf you want to required an argument with no default value, try this:\n\n```ruby\ndef hello(name:, age:)\n  puts \"Name: #{name} - Age: #{age}\\n\"\nend\n```\n\nIt mean the method need to receive \"a hash\" with two key *name* and *age*. if it does not revieve, error will raise.\n","source":"_posts/2019-12-05-ruby-argument.md","raw":"---\ntitle: How To Use Arguments In Ruby\ndate: 2019-12-05\ntags: [\"RUBY\", \"TIL\"]\n---\n\n## How Many Kind Of Arguments In Ruby?\n\nWe can answer: **Three**\n\n1. Required arguments\n\neg:\n\n```ruby\ndef hello(name)\n  puts \"Hello #{name}\"\nend\n```\n\nIn there, *name* is a required argument. it mean if you call **hello** method and do not pass an argument, the output that you see should like:\n\n```ruby\nhello()\n\n=> ArgumentError: wrong number of arguments (given 0, expected 1)\n\n```\n\nLet pass an argument and this error will gone.\n\n```ruby\nhello('Meo Meo')\n\n=> \"Hello Meo Meo\"\n```\n\nIt's very simple, I think we are make sence now.\n\n2. Default arguments\n\nAlmost like **Required arguments**. It has one more thing different:\n\nThat is when we pass argument in a method, we can set default value for it, and then when you call this method and unlucky forgot pass arguments for this method, your method still working, if it's not received arguments when it is called, it will use the default value.\n\neg:\n\n```ruby\ndef hello(name = \"Meo Meo\")\n  puts \"Hello #{name}\"\nend\n\nhello(\"Chinh\")\n=> \"Hello Chinh\"\n\n# if you don't pass an argument\nhello()\n=> \"Hello Meo Meo\"\n```\n\n3. Optional arguments\n\nDo you ever want to create a method and have no idea how many arguments does this method need?\n\nYes, we use optional arguments for this case, take a looke at the example below:\n\n```ruby\ndef hello(*family)\n  family.each do |name|\n    puts \"Hello #{name}\\n\"\n  end\nend\n\nhello('Chinh', 'Chuot', 'Cho')\n\n# The output:\n# Hello Chinh\n# Hello Chuot\n# Hello Cho\n```\n\n## Keyword Arguments\n\nIt's a new feature has come from ruby 2.0 to higher. It like pass arguments as a hash but more powerful.\n\neg:\n\n```ruby\ndef hello(name: 'Chinh', age: 25)\n  puts \"Name: #{name} - Age: #{age}\\n\"\nend\n```\n\nif you call **hello** method with no arguments:\n\n```ruby\nhello()\n```\n\nIt will use default value.\n\nAnd then\n\nIf you pass argumets for it:\n\n```ruby\nhello('Chinh', 25)\n```\n\nwhat will it return?\n\n**Error**: yes, it will response a error, but why?\n\nBecause, with **keyword arguments**, you need to pass argumetns like a hash you declare when initial method. (**same key**).\n\n```ruby\nhello(name: 'Meo')\n# Hello Meo - Age: 25\n\nhello(age: 10)\n# Hello Chinh - Age: 10\n\nhello(name: 'Chuot', age: 11)\n# Hello Chuot - Age: 11\n```\n\nIf you want to required an argument with no default value, try this:\n\n```ruby\ndef hello(name:, age:)\n  puts \"Name: #{name} - Age: #{age}\\n\"\nend\n```\n\nIt mean the method need to receive \"a hash\" with two key *name* and *age*. if it does not revieve, error will raise.\n","slug":"2019-12-05-ruby-argument","published":1,"updated":"2019-12-06T15:31:22.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7suh300345rrs52639th0","content":"<h2 id=\"How-Many-Kind-Of-Arguments-In-Ruby\"><a href=\"#How-Many-Kind-Of-Arguments-In-Ruby\" class=\"headerlink\" title=\"How Many Kind Of Arguments In Ruby?\"></a>How Many Kind Of Arguments In Ruby?</h2><p>We can answer: <strong>Three</strong></p>\n<ol>\n<li>Required arguments</li>\n</ol>\n<p>eg:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">(name)</span></span></span><br><span class=\"line\">  puts <span class=\"string\">\"Hello <span class=\"subst\">#&#123;name&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>In there, <em>name</em> is a required argument. it mean if you call <strong>hello</strong> method and do not pass an argument, the output that you see should like:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello()</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; <span class=\"symbol\">ArgumentError:</span> wrong number of arguments (given <span class=\"number\">0</span>, expected <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Let pass an argument and this error will gone.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello(<span class=\"string\">'Meo Meo'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; <span class=\"string\">\"Hello Meo Meo\"</span></span><br></pre></td></tr></table></figure>\n\n<p>It’s very simple, I think we are make sence now.</p>\n<ol start=\"2\">\n<li>Default arguments</li>\n</ol>\n<p>Almost like <strong>Required arguments</strong>. It has one more thing different:</p>\n<p>That is when we pass argument in a method, we can set default value for it, and then when you call this method and unlucky forgot pass arguments for this method, your method still working, if it’s not received arguments when it is called, it will use the default value.</p>\n<p>eg:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">(name = <span class=\"string\">\"Meo Meo\"</span>)</span></span></span><br><span class=\"line\">  puts <span class=\"string\">\"Hello <span class=\"subst\">#&#123;name&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">hello(<span class=\"string\">\"Chinh\"</span>)</span><br><span class=\"line\">=&gt; <span class=\"string\">\"Hello Chinh\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># if you don't pass an argument</span></span><br><span class=\"line\">hello()</span><br><span class=\"line\">=&gt; <span class=\"string\">\"Hello Meo Meo\"</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>Optional arguments</li>\n</ol>\n<p>Do you ever want to create a method and have no idea how many arguments does this method need?</p>\n<p>Yes, we use optional arguments for this case, take a looke at the example below:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">(*family)</span></span></span><br><span class=\"line\">  family.each <span class=\"keyword\">do</span> <span class=\"params\">|name|</span></span><br><span class=\"line\">    puts <span class=\"string\">\"Hello <span class=\"subst\">#&#123;name&#125;</span>\\n\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">hello(<span class=\"string\">'Chinh'</span>, <span class=\"string\">'Chuot'</span>, <span class=\"string\">'Cho'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The output:</span></span><br><span class=\"line\"><span class=\"comment\"># Hello Chinh</span></span><br><span class=\"line\"><span class=\"comment\"># Hello Chuot</span></span><br><span class=\"line\"><span class=\"comment\"># Hello Cho</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Keyword-Arguments\"><a href=\"#Keyword-Arguments\" class=\"headerlink\" title=\"Keyword Arguments\"></a>Keyword Arguments</h2><p>It’s a new feature has come from ruby 2.0 to higher. It like pass arguments as a hash but more powerful.</p>\n<p>eg:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">(<span class=\"symbol\">name:</span> <span class=\"string\">'Chinh'</span>, <span class=\"symbol\">age:</span> <span class=\"number\">25</span>)</span></span></span><br><span class=\"line\">  puts <span class=\"string\">\"Name: <span class=\"subst\">#&#123;name&#125;</span> - Age: <span class=\"subst\">#&#123;age&#125;</span>\\n\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>if you call <strong>hello</strong> method with no arguments:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello()</span><br></pre></td></tr></table></figure>\n\n<p>It will use default value.</p>\n<p>And then</p>\n<p>If you pass argumets for it:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello(<span class=\"string\">'Chinh'</span>, <span class=\"number\">25</span>)</span><br></pre></td></tr></table></figure>\n\n<p>what will it return?</p>\n<p><strong>Error</strong>: yes, it will response a error, but why?</p>\n<p>Because, with <strong>keyword arguments</strong>, you need to pass argumetns like a hash you declare when initial method. (<strong>same key</strong>).</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello(<span class=\"symbol\">name:</span> <span class=\"string\">'Meo'</span>)</span><br><span class=\"line\"><span class=\"comment\"># Hello Meo - Age: 25</span></span><br><span class=\"line\"></span><br><span class=\"line\">hello(<span class=\"symbol\">age:</span> <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\"># Hello Chinh - Age: 10</span></span><br><span class=\"line\"></span><br><span class=\"line\">hello(<span class=\"symbol\">name:</span> <span class=\"string\">'Chuot'</span>, <span class=\"symbol\">age:</span> <span class=\"number\">11</span>)</span><br><span class=\"line\"><span class=\"comment\"># Hello Chuot - Age: 11</span></span><br></pre></td></tr></table></figure>\n\n<p>If you want to required an argument with no default value, try this:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">(<span class=\"symbol\">name:</span>, <span class=\"symbol\">age:</span>)</span></span></span><br><span class=\"line\">  puts <span class=\"string\">\"Name: <span class=\"subst\">#&#123;name&#125;</span> - Age: <span class=\"subst\">#&#123;age&#125;</span>\\n\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>It mean the method need to receive “a hash” with two key <em>name</em> and <em>age</em>. if it does not revieve, error will raise.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"How-Many-Kind-Of-Arguments-In-Ruby\"><a href=\"#How-Many-Kind-Of-Arguments-In-Ruby\" class=\"headerlink\" title=\"How Many Kind Of Arguments In Ruby?\"></a>How Many Kind Of Arguments In Ruby?</h2><p>We can answer: <strong>Three</strong></p>\n<ol>\n<li>Required arguments</li>\n</ol>\n<p>eg:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">(name)</span></span></span><br><span class=\"line\">  puts <span class=\"string\">\"Hello <span class=\"subst\">#&#123;name&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>In there, <em>name</em> is a required argument. it mean if you call <strong>hello</strong> method and do not pass an argument, the output that you see should like:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello()</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; <span class=\"symbol\">ArgumentError:</span> wrong number of arguments (given <span class=\"number\">0</span>, expected <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Let pass an argument and this error will gone.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello(<span class=\"string\">'Meo Meo'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; <span class=\"string\">\"Hello Meo Meo\"</span></span><br></pre></td></tr></table></figure>\n\n<p>It’s very simple, I think we are make sence now.</p>\n<ol start=\"2\">\n<li>Default arguments</li>\n</ol>\n<p>Almost like <strong>Required arguments</strong>. It has one more thing different:</p>\n<p>That is when we pass argument in a method, we can set default value for it, and then when you call this method and unlucky forgot pass arguments for this method, your method still working, if it’s not received arguments when it is called, it will use the default value.</p>\n<p>eg:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">(name = <span class=\"string\">\"Meo Meo\"</span>)</span></span></span><br><span class=\"line\">  puts <span class=\"string\">\"Hello <span class=\"subst\">#&#123;name&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">hello(<span class=\"string\">\"Chinh\"</span>)</span><br><span class=\"line\">=&gt; <span class=\"string\">\"Hello Chinh\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># if you don't pass an argument</span></span><br><span class=\"line\">hello()</span><br><span class=\"line\">=&gt; <span class=\"string\">\"Hello Meo Meo\"</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>Optional arguments</li>\n</ol>\n<p>Do you ever want to create a method and have no idea how many arguments does this method need?</p>\n<p>Yes, we use optional arguments for this case, take a looke at the example below:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">(*family)</span></span></span><br><span class=\"line\">  family.each <span class=\"keyword\">do</span> <span class=\"params\">|name|</span></span><br><span class=\"line\">    puts <span class=\"string\">\"Hello <span class=\"subst\">#&#123;name&#125;</span>\\n\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">hello(<span class=\"string\">'Chinh'</span>, <span class=\"string\">'Chuot'</span>, <span class=\"string\">'Cho'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The output:</span></span><br><span class=\"line\"><span class=\"comment\"># Hello Chinh</span></span><br><span class=\"line\"><span class=\"comment\"># Hello Chuot</span></span><br><span class=\"line\"><span class=\"comment\"># Hello Cho</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Keyword-Arguments\"><a href=\"#Keyword-Arguments\" class=\"headerlink\" title=\"Keyword Arguments\"></a>Keyword Arguments</h2><p>It’s a new feature has come from ruby 2.0 to higher. It like pass arguments as a hash but more powerful.</p>\n<p>eg:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">(<span class=\"symbol\">name:</span> <span class=\"string\">'Chinh'</span>, <span class=\"symbol\">age:</span> <span class=\"number\">25</span>)</span></span></span><br><span class=\"line\">  puts <span class=\"string\">\"Name: <span class=\"subst\">#&#123;name&#125;</span> - Age: <span class=\"subst\">#&#123;age&#125;</span>\\n\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>if you call <strong>hello</strong> method with no arguments:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello()</span><br></pre></td></tr></table></figure>\n\n<p>It will use default value.</p>\n<p>And then</p>\n<p>If you pass argumets for it:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello(<span class=\"string\">'Chinh'</span>, <span class=\"number\">25</span>)</span><br></pre></td></tr></table></figure>\n\n<p>what will it return?</p>\n<p><strong>Error</strong>: yes, it will response a error, but why?</p>\n<p>Because, with <strong>keyword arguments</strong>, you need to pass argumetns like a hash you declare when initial method. (<strong>same key</strong>).</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello(<span class=\"symbol\">name:</span> <span class=\"string\">'Meo'</span>)</span><br><span class=\"line\"><span class=\"comment\"># Hello Meo - Age: 25</span></span><br><span class=\"line\"></span><br><span class=\"line\">hello(<span class=\"symbol\">age:</span> <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\"># Hello Chinh - Age: 10</span></span><br><span class=\"line\"></span><br><span class=\"line\">hello(<span class=\"symbol\">name:</span> <span class=\"string\">'Chuot'</span>, <span class=\"symbol\">age:</span> <span class=\"number\">11</span>)</span><br><span class=\"line\"><span class=\"comment\"># Hello Chuot - Age: 11</span></span><br></pre></td></tr></table></figure>\n\n<p>If you want to required an argument with no default value, try this:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">(<span class=\"symbol\">name:</span>, <span class=\"symbol\">age:</span>)</span></span></span><br><span class=\"line\">  puts <span class=\"string\">\"Name: <span class=\"subst\">#&#123;name&#125;</span> - Age: <span class=\"subst\">#&#123;age&#125;</span>\\n\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>It mean the method need to receive “a hash” with two key <em>name</em> and <em>age</em>. if it does not revieve, error will raise.</p>\n"},{"title":"Example Of Two Pointer With Ruby","date":"2019-12-19T17:00:00.000Z","_content":"\n## [3sum-closest](https://leetcode.com/problems/3sum-closest/submissions/)\n\n![bai giai](/../images/3sum_2.jpeg)\n\n```ruby\ndef three_sum_closest(nums, target)\n  nums.sort!\n\n  length = nums.size\n  kq = nums[0] + nums[1] + nums[length - 1]\n\n  0.upto(length - 2) do |i|\n    ptr1 = i + 1\n    ptr2 = length - 1\n\n    while ptr1 < ptr2\n      sum = nums[i] + nums[ptr1] + nums[ptr2]\n\n      return target if (target - sum).abs == 0\n\n      kq = sum if (target - sum).abs < (target - kq).abs\n\n      if sum > target\n        ptr2 -= 1\n      else\n        ptr1 += 1\n      end\n    end\n\n  end\n\n  kq\nend\n```\n\n\n## [container-with-most-water](https://leetcode.com/problems/container-with-most-water/submissions/)\n\n```ruby\ndef get_container_water(arr, a, b)\n  h = arr[a] >= arr[b] ? arr[b] : arr[a]\n  h * (b - a).abs\nend\n\ndef max_area(height)\n  start = 0\n  finish = height.size - 1\n\n  max = get_container_water(height, start, finish)\n\n  while start < finish\n    if height[start] >= height[finish]\n      finish -= 1\n      return max if finish <= start\n    else\n      start += 1\n      return max if start >= finish\n    end\n\n    max = get_container_water(height, start, finish) if get_container_water(height, start, finish) > max\n  end\n\n  max\nend\n```\n","source":"_posts/2019-12-20-example-of-two-pointer.md","raw":"---\ntitle: Example Of Two Pointer With Ruby\ndate: 2019-12-20\ntags: [\"RUBY\"]\n---\n\n## [3sum-closest](https://leetcode.com/problems/3sum-closest/submissions/)\n\n![bai giai](/../images/3sum_2.jpeg)\n\n```ruby\ndef three_sum_closest(nums, target)\n  nums.sort!\n\n  length = nums.size\n  kq = nums[0] + nums[1] + nums[length - 1]\n\n  0.upto(length - 2) do |i|\n    ptr1 = i + 1\n    ptr2 = length - 1\n\n    while ptr1 < ptr2\n      sum = nums[i] + nums[ptr1] + nums[ptr2]\n\n      return target if (target - sum).abs == 0\n\n      kq = sum if (target - sum).abs < (target - kq).abs\n\n      if sum > target\n        ptr2 -= 1\n      else\n        ptr1 += 1\n      end\n    end\n\n  end\n\n  kq\nend\n```\n\n\n## [container-with-most-water](https://leetcode.com/problems/container-with-most-water/submissions/)\n\n```ruby\ndef get_container_water(arr, a, b)\n  h = arr[a] >= arr[b] ? arr[b] : arr[a]\n  h * (b - a).abs\nend\n\ndef max_area(height)\n  start = 0\n  finish = height.size - 1\n\n  max = get_container_water(height, start, finish)\n\n  while start < finish\n    if height[start] >= height[finish]\n      finish -= 1\n      return max if finish <= start\n    else\n      start += 1\n      return max if start >= finish\n    end\n\n    max = get_container_water(height, start, finish) if get_container_water(height, start, finish) > max\n  end\n\n  max\nend\n```\n","slug":"2019-12-20-example-of-two-pointer","published":1,"updated":"2019-12-20T13:53:33.490Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7suh500375rrse7b0b2k8","content":"<h2 id=\"3sum-closest\"><a href=\"#3sum-closest\" class=\"headerlink\" title=\"3sum-closest\"></a><a href=\"https://leetcode.com/problems/3sum-closest/submissions/\" target=\"_blank\" rel=\"noopener\">3sum-closest</a></h2><p><img src=\"/../images/3sum_2.jpeg\" alt=\"bai giai\"></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">three_sum_closest</span><span class=\"params\">(nums, target)</span></span></span><br><span class=\"line\">  nums.sort!</span><br><span class=\"line\"></span><br><span class=\"line\">  length = nums.size</span><br><span class=\"line\">  kq = nums[<span class=\"number\">0</span>] + nums[<span class=\"number\">1</span>] + nums[length - <span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"number\">0</span>.upto(length - <span class=\"number\">2</span>) <span class=\"keyword\">do</span> <span class=\"params\">|i|</span></span><br><span class=\"line\">    ptr1 = i + <span class=\"number\">1</span></span><br><span class=\"line\">    ptr2 = length - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ptr1 &lt; ptr2</span><br><span class=\"line\">      sum = nums[i] + nums[ptr1] + nums[ptr2]</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> target <span class=\"keyword\">if</span> (target - sum).abs == <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">      kq = sum <span class=\"keyword\">if</span> (target - sum).abs &lt; (target - kq).abs</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> sum &gt; target</span><br><span class=\"line\">        ptr2 -= <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        ptr1 += <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  kq</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"container-with-most-water\"><a href=\"#container-with-most-water\" class=\"headerlink\" title=\"container-with-most-water\"></a><a href=\"https://leetcode.com/problems/container-with-most-water/submissions/\" target=\"_blank\" rel=\"noopener\">container-with-most-water</a></h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_container_water</span><span class=\"params\">(arr, a, b)</span></span></span><br><span class=\"line\">  h = arr[a] &gt;= arr[b] ? arr[b] : arr[a]</span><br><span class=\"line\">  h * (b - a).abs</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">max_area</span><span class=\"params\">(height)</span></span></span><br><span class=\"line\">  start = <span class=\"number\">0</span></span><br><span class=\"line\">  finish = height.size - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  max = get_container_water(height, start, finish)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> start &lt; finish</span><br><span class=\"line\">    <span class=\"keyword\">if</span> height[start] &gt;= height[finish]</span><br><span class=\"line\">      finish -= <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> max <span class=\"keyword\">if</span> finish &lt;= start</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      start += <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> max <span class=\"keyword\">if</span> start &gt;= finish</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    max = get_container_water(height, start, finish) <span class=\"keyword\">if</span> get_container_water(height, start, finish) &gt; max</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  max</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"3sum-closest\"><a href=\"#3sum-closest\" class=\"headerlink\" title=\"3sum-closest\"></a><a href=\"https://leetcode.com/problems/3sum-closest/submissions/\" target=\"_blank\" rel=\"noopener\">3sum-closest</a></h2><p><img src=\"/../images/3sum_2.jpeg\" alt=\"bai giai\"></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">three_sum_closest</span><span class=\"params\">(nums, target)</span></span></span><br><span class=\"line\">  nums.sort!</span><br><span class=\"line\"></span><br><span class=\"line\">  length = nums.size</span><br><span class=\"line\">  kq = nums[<span class=\"number\">0</span>] + nums[<span class=\"number\">1</span>] + nums[length - <span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"number\">0</span>.upto(length - <span class=\"number\">2</span>) <span class=\"keyword\">do</span> <span class=\"params\">|i|</span></span><br><span class=\"line\">    ptr1 = i + <span class=\"number\">1</span></span><br><span class=\"line\">    ptr2 = length - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ptr1 &lt; ptr2</span><br><span class=\"line\">      sum = nums[i] + nums[ptr1] + nums[ptr2]</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> target <span class=\"keyword\">if</span> (target - sum).abs == <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">      kq = sum <span class=\"keyword\">if</span> (target - sum).abs &lt; (target - kq).abs</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> sum &gt; target</span><br><span class=\"line\">        ptr2 -= <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        ptr1 += <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  kq</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"container-with-most-water\"><a href=\"#container-with-most-water\" class=\"headerlink\" title=\"container-with-most-water\"></a><a href=\"https://leetcode.com/problems/container-with-most-water/submissions/\" target=\"_blank\" rel=\"noopener\">container-with-most-water</a></h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_container_water</span><span class=\"params\">(arr, a, b)</span></span></span><br><span class=\"line\">  h = arr[a] &gt;= arr[b] ? arr[b] : arr[a]</span><br><span class=\"line\">  h * (b - a).abs</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">max_area</span><span class=\"params\">(height)</span></span></span><br><span class=\"line\">  start = <span class=\"number\">0</span></span><br><span class=\"line\">  finish = height.size - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  max = get_container_water(height, start, finish)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> start &lt; finish</span><br><span class=\"line\">    <span class=\"keyword\">if</span> height[start] &gt;= height[finish]</span><br><span class=\"line\">      finish -= <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> max <span class=\"keyword\">if</span> finish &lt;= start</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      start += <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> max <span class=\"keyword\">if</span> start &gt;= finish</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    max = get_container_water(height, start, finish) <span class=\"keyword\">if</span> get_container_water(height, start, finish) &gt; max</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  max</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Searching In Array","date":"2019-12-15T17:00:00.000Z","_content":"\n## Binary Search\n\n```ruby\na = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\ndef binary_search(nums, left, right, target)\n  while left <= right\n    mid = (left + right) / 2\n\n    return mid if nums[mid] == target\n\n    if target < nums[mid]\n      right = mid - 1\n      return binary_search(nums, left, right, target)\n    else\n      left = mid + 1\n      return binary_search(nums, left, right, target)\n    end\n  end\n\n  return -1\nend\n\nbinary_search(a, 0, 8, 5)\n\n```\n\n> ...\n","source":"_posts/2019-12-16-search-in-array.md","raw":"---\ntitle: Searching In Array\ndate: 2019-12-16\ntags: [\"RUBY\"]\n---\n\n## Binary Search\n\n```ruby\na = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\ndef binary_search(nums, left, right, target)\n  while left <= right\n    mid = (left + right) / 2\n\n    return mid if nums[mid] == target\n\n    if target < nums[mid]\n      right = mid - 1\n      return binary_search(nums, left, right, target)\n    else\n      left = mid + 1\n      return binary_search(nums, left, right, target)\n    end\n  end\n\n  return -1\nend\n\nbinary_search(a, 0, 8, 5)\n\n```\n\n> ...\n","slug":"2019-12-16-search-in-array","published":1,"updated":"2019-12-20T13:45:57.967Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7suh7003a5rrs44lx9cjt","content":"<h2 id=\"Binary-Search\"><a href=\"#Binary-Search\" class=\"headerlink\" title=\"Binary Search\"></a>Binary Search</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">binary_search</span><span class=\"params\">(nums, left, right, target)</span></span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> left &lt;= right</span><br><span class=\"line\">    mid = (left + right) / <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> mid <span class=\"keyword\">if</span> nums[mid] == target</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> target &lt; nums[mid]</span><br><span class=\"line\">      right = mid - <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> binary_search(nums, left, right, target)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      left = mid + <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> binary_search(nums, left, right, target)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">binary_search(a, <span class=\"number\">0</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>…</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Binary-Search\"><a href=\"#Binary-Search\" class=\"headerlink\" title=\"Binary Search\"></a>Binary Search</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">binary_search</span><span class=\"params\">(nums, left, right, target)</span></span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> left &lt;= right</span><br><span class=\"line\">    mid = (left + right) / <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> mid <span class=\"keyword\">if</span> nums[mid] == target</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> target &lt; nums[mid]</span><br><span class=\"line\">      right = mid - <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> binary_search(nums, left, right, target)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      left = mid + <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> binary_search(nums, left, right, target)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">binary_search(a, <span class=\"number\">0</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>…</p>\n</blockquote>\n"},{"title":"Basic Vim Setup","date":"2019-09-19T17:00:00.000Z","draft":false,"mytag":"#TIL","_content":"\n1. Plugin management: https://github.com/junegunn/vim-plug#installation\n2. Tree project: https://github.com/scrooloose/nerdtree\n3. Code complete: https://github.com/ycm-core/YouCompleteMe#installation\n4. Control + P: https://github.com/ctrlpvim/ctrlp.vim\n5. Monakai theme: https://github.com/sickill/vim-monokai\n6. Vimfile:\n\n```vim\ncall plug#begin('~/.vim/plugged')\n\nPlug 'https://github.com/scrooloose/nerdtree.git'\nPlug 'morhetz/gruvbox'\nPlug 'vim-airline/vim-airline'\nPlug 'scrooloose/nerdcommenter'\n\" Plug 'dracula/vim', { 'as': 'dracula' }\n\n\" Initialize plugin system\ncall plug#end()\n\n\" Set colorscheme\n\" colorscheme gruvbox\n\n\" Set dark background\n\"set background=dark\n\n\" Use monokai\n\" syntax enable\ncolorscheme monokai\n\n\" Copy clibboard\nset clipboard=unnamedplus\n\n\" Use ctrlp\nset runtimepath^=~/.vim/bundle/ctrlp.vim\n\nif has('mouse')\n  set mouse=a\nendif\n\nset nu\n\nset autoindent\nset si \"smart indent\"\n\nsyntax on\n\nautocmd StdinReadPre * let s:std_in=1\nautocmd VimEnter * if argc() == 0 && !exists(\"s:std_in\") | NERDTree | endif\n\nautocmd bufenter * if (winnr(\"$\") == 1 && exists(\"b:NERDTree\") && b:NERDTree.isTabTree()) | q | endif\nmap <C-n> :NERDTreeToggle<CR>\n\nset expandtab\nset tabstop=2\nset softtabstop=2\n\n```\n","source":"_posts/basic-vim-setup.md","raw":"---\ntitle: \"Basic Vim Setup\"\ndate: 2019-09-20\ndraft: false\ntags: [\"TIl\"]\ncategories: [\"til\"]\nmytag: \"#TIL\"\n---\n\n1. Plugin management: https://github.com/junegunn/vim-plug#installation\n2. Tree project: https://github.com/scrooloose/nerdtree\n3. Code complete: https://github.com/ycm-core/YouCompleteMe#installation\n4. Control + P: https://github.com/ctrlpvim/ctrlp.vim\n5. Monakai theme: https://github.com/sickill/vim-monokai\n6. Vimfile:\n\n```vim\ncall plug#begin('~/.vim/plugged')\n\nPlug 'https://github.com/scrooloose/nerdtree.git'\nPlug 'morhetz/gruvbox'\nPlug 'vim-airline/vim-airline'\nPlug 'scrooloose/nerdcommenter'\n\" Plug 'dracula/vim', { 'as': 'dracula' }\n\n\" Initialize plugin system\ncall plug#end()\n\n\" Set colorscheme\n\" colorscheme gruvbox\n\n\" Set dark background\n\"set background=dark\n\n\" Use monokai\n\" syntax enable\ncolorscheme monokai\n\n\" Copy clibboard\nset clipboard=unnamedplus\n\n\" Use ctrlp\nset runtimepath^=~/.vim/bundle/ctrlp.vim\n\nif has('mouse')\n  set mouse=a\nendif\n\nset nu\n\nset autoindent\nset si \"smart indent\"\n\nsyntax on\n\nautocmd StdinReadPre * let s:std_in=1\nautocmd VimEnter * if argc() == 0 && !exists(\"s:std_in\") | NERDTree | endif\n\nautocmd bufenter * if (winnr(\"$\") == 1 && exists(\"b:NERDTree\") && b:NERDTree.isTabTree()) | q | endif\nmap <C-n> :NERDTreeToggle<CR>\n\nset expandtab\nset tabstop=2\nset softtabstop=2\n\n```\n","slug":"basic-vim-setup","published":1,"updated":"2019-11-13T11:58:59.536Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7suha003c5rrsd8s55fru","content":"<ol>\n<li>Plugin management: <a href=\"https://github.com/junegunn/vim-plug#installation\" target=\"_blank\" rel=\"noopener\">https://github.com/junegunn/vim-plug#installation</a></li>\n<li>Tree project: <a href=\"https://github.com/scrooloose/nerdtree\" target=\"_blank\" rel=\"noopener\">https://github.com/scrooloose/nerdtree</a></li>\n<li>Code complete: <a href=\"https://github.com/ycm-core/YouCompleteMe#installation\" target=\"_blank\" rel=\"noopener\">https://github.com/ycm-core/YouCompleteMe#installation</a></li>\n<li>Control + P: <a href=\"https://github.com/ctrlpvim/ctrlp.vim\" target=\"_blank\" rel=\"noopener\">https://github.com/ctrlpvim/ctrlp.vim</a></li>\n<li>Monakai theme: <a href=\"https://github.com/sickill/vim-monokai\" target=\"_blank\" rel=\"noopener\">https://github.com/sickill/vim-monokai</a></li>\n<li>Vimfile:</li>\n</ol>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">call</span> plug#begin(<span class=\"string\">'~/.vim/plugged'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Plug <span class=\"string\">'https://github.com/scrooloose/nerdtree.git'</span></span><br><span class=\"line\">Plug <span class=\"string\">'morhetz/gruvbox'</span></span><br><span class=\"line\">Plug <span class=\"string\">'vim-airline/vim-airline'</span></span><br><span class=\"line\">Plug <span class=\"string\">'scrooloose/nerdcommenter'</span></span><br><span class=\"line\"><span class=\"comment\">\" Plug 'dracula/vim', &#123; 'as': 'dracula' &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Initialize plugin system</span></span><br><span class=\"line\"><span class=\"keyword\">call</span> plug#end()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Set colorscheme</span></span><br><span class=\"line\"><span class=\"comment\">\" colorscheme gruvbox</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Set dark background</span></span><br><span class=\"line\"><span class=\"comment\">\"set background=dark</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Use monokai</span></span><br><span class=\"line\"><span class=\"comment\">\" syntax enable</span></span><br><span class=\"line\"><span class=\"keyword\">colorscheme</span> monokai</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Copy clibboard</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> clipboard=unnamedplus</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Use ctrlp</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> runtimepath^=~/.<span class=\"keyword\">vim</span>/bundle/ctrlp.<span class=\"keyword\">vim</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">has</span>(<span class=\"string\">'mouse'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">set</span> mouse=<span class=\"keyword\">a</span></span><br><span class=\"line\"><span class=\"keyword\">endif</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">nu</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> autoindent</span><br><span class=\"line\"><span class=\"keyword\">set</span> si <span class=\"string\">\"smart indent\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">syntax</span> <span class=\"keyword\">on</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">autocmd</span> StdinReadPre * <span class=\"keyword\">let</span> <span class=\"variable\">s:std_in</span>=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">autocmd</span> VimEnter * <span class=\"keyword\">if</span> <span class=\"built_in\">argc</span>() == <span class=\"number\">0</span> &amp;&amp; !exists(<span class=\"string\">\"s:std_in\"</span>) | NERDTree | <span class=\"keyword\">endif</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">autocmd</span> bufenter * <span class=\"keyword\">if</span> (<span class=\"built_in\">winnr</span>(<span class=\"string\">\"$\"</span>) == <span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">exists</span>(<span class=\"string\">\"b:NERDTree\"</span>) &amp;&amp; <span class=\"variable\">b:NERDTree</span>.isTabTree()) | q | <span class=\"keyword\">endif</span></span><br><span class=\"line\"><span class=\"keyword\">map</span> <span class=\"symbol\">&lt;C-n&gt;</span> :NERDTreeToggle<span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> expandtab</span><br><span class=\"line\"><span class=\"keyword\">set</span> tabstop=<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> softtabstop=<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>Plugin management: <a href=\"https://github.com/junegunn/vim-plug#installation\" target=\"_blank\" rel=\"noopener\">https://github.com/junegunn/vim-plug#installation</a></li>\n<li>Tree project: <a href=\"https://github.com/scrooloose/nerdtree\" target=\"_blank\" rel=\"noopener\">https://github.com/scrooloose/nerdtree</a></li>\n<li>Code complete: <a href=\"https://github.com/ycm-core/YouCompleteMe#installation\" target=\"_blank\" rel=\"noopener\">https://github.com/ycm-core/YouCompleteMe#installation</a></li>\n<li>Control + P: <a href=\"https://github.com/ctrlpvim/ctrlp.vim\" target=\"_blank\" rel=\"noopener\">https://github.com/ctrlpvim/ctrlp.vim</a></li>\n<li>Monakai theme: <a href=\"https://github.com/sickill/vim-monokai\" target=\"_blank\" rel=\"noopener\">https://github.com/sickill/vim-monokai</a></li>\n<li>Vimfile:</li>\n</ol>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">call</span> plug#begin(<span class=\"string\">'~/.vim/plugged'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Plug <span class=\"string\">'https://github.com/scrooloose/nerdtree.git'</span></span><br><span class=\"line\">Plug <span class=\"string\">'morhetz/gruvbox'</span></span><br><span class=\"line\">Plug <span class=\"string\">'vim-airline/vim-airline'</span></span><br><span class=\"line\">Plug <span class=\"string\">'scrooloose/nerdcommenter'</span></span><br><span class=\"line\"><span class=\"comment\">\" Plug 'dracula/vim', &#123; 'as': 'dracula' &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Initialize plugin system</span></span><br><span class=\"line\"><span class=\"keyword\">call</span> plug#end()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Set colorscheme</span></span><br><span class=\"line\"><span class=\"comment\">\" colorscheme gruvbox</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Set dark background</span></span><br><span class=\"line\"><span class=\"comment\">\"set background=dark</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Use monokai</span></span><br><span class=\"line\"><span class=\"comment\">\" syntax enable</span></span><br><span class=\"line\"><span class=\"keyword\">colorscheme</span> monokai</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Copy clibboard</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> clipboard=unnamedplus</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Use ctrlp</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> runtimepath^=~/.<span class=\"keyword\">vim</span>/bundle/ctrlp.<span class=\"keyword\">vim</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">has</span>(<span class=\"string\">'mouse'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">set</span> mouse=<span class=\"keyword\">a</span></span><br><span class=\"line\"><span class=\"keyword\">endif</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">nu</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> autoindent</span><br><span class=\"line\"><span class=\"keyword\">set</span> si <span class=\"string\">\"smart indent\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">syntax</span> <span class=\"keyword\">on</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">autocmd</span> StdinReadPre * <span class=\"keyword\">let</span> <span class=\"variable\">s:std_in</span>=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">autocmd</span> VimEnter * <span class=\"keyword\">if</span> <span class=\"built_in\">argc</span>() == <span class=\"number\">0</span> &amp;&amp; !exists(<span class=\"string\">\"s:std_in\"</span>) | NERDTree | <span class=\"keyword\">endif</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">autocmd</span> bufenter * <span class=\"keyword\">if</span> (<span class=\"built_in\">winnr</span>(<span class=\"string\">\"$\"</span>) == <span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">exists</span>(<span class=\"string\">\"b:NERDTree\"</span>) &amp;&amp; <span class=\"variable\">b:NERDTree</span>.isTabTree()) | q | <span class=\"keyword\">endif</span></span><br><span class=\"line\"><span class=\"keyword\">map</span> <span class=\"symbol\">&lt;C-n&gt;</span> :NERDTreeToggle<span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> expandtab</span><br><span class=\"line\"><span class=\"keyword\">set</span> tabstop=<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> softtabstop=<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Implement Linked List With Ruby","date":"2019-12-05T17:00:00.000Z","_content":"\n## Define Node\n\n```ruby\nclass Node\n  attr_accessor :next, :value\n\n  def initialize(value)\n    @value = value\n    @next  = nil\n  end\nend\n```\n\n## Define Linked List\n\n```ruby\nclass LinkedList\n  attr_accessor :head, :length\n\n  def initialize\n    @head = nil\n    @length = 0\n  end\nend\n```\n\n## Display Linked List\n\n```ruby\ndef show_all\n  current_node = @head\n  puts \":----- Linked List: ----->\"\n\n  while(current_node)\n    puts \"object_id: #{current_node.object_id} - value: #{current_node.value}\\n\"\n    current_node = current_node.next\n  end\nend\n```\n\n## Add New Node\n\n```ruby\ndef add(value)\n  current_node = @head\n\n  if current_node\n    while(current_node.next)\n      current_node = current_node.next\n    end\n    current_node.next = Node.new(value)\n  else\n    @head = Node.new(value)\n  end\n\n  @length += 1\nend\n```\n\n## Delete A Node At Position\n\n```ruby\ndef delete(position)\n  return false if(!@head || position > @length)\n\n  prev_node = current_node = @head\n  i = 0\n\n  while(current_node)\n    if(i == position)\n      prev_node.next = current_node.next\n      return true\n    end\n\n    prev_node = current_node\n    current_node = current_node.next\n    i += 1\n  end\n\n  return false\nend\n```\n\n## Reverse Linked List\n\n```ruby\ndef reverse\n  mid = @length / 2\n  i = 1\n  current_node = @head\n\n  while(i <= mid)\n    swap(current_node, find_nth_from_end_list(i))\n    current_node = current_node.next\n    i += 1\n  end\nend\n```\n\n## Check Circular Linked List\n\n```ruby\ndef is_circular_linked_list?\n  return false if !@head\n  hash = {}\n\n  current_node = @head\n  while(current_node)\n    return false if(hash.key?(current_node.object_id))\n\n    hash[current_node.object_id] = true\n    current_node = current_node.next\n  end\n\n  return false\nend\n```\n\n## Full Example\n\n```ruby\nclass Node\n  attr_accessor :next, :value\n\n  def initialize(value)\n    @value = value\n    @next  = nil\n  end\nend\n\nclass LinkedList\n  attr_accessor :head, :length\n\n  def initialize\n    @head = nil\n    @length = 0\n  end\n\n  def show_all\n    current_node = @head\n    puts \":----- Linked List: ----->\"\n\n    while(current_node)\n      puts \"object_id: #{current_node.object_id} - value: #{current_node.value}\\n\"\n      current_node = current_node.next\n    end\n  end\n\n  def add(value)\n    current_node = @head\n\n    if current_node\n      while(current_node.next)\n        current_node = current_node.next\n      end\n      current_node.next = Node.new(value)\n    else\n      @head = Node.new(value)\n    end\n\n    @length += 1\n  end\n\n  def delete(position)\n    return false if(!@head || position > @length)\n\n    prev_node = current_node = @head\n    i = 0\n\n    while(current_node)\n      if(i == position)\n        prev_node.next = current_node.next\n        return true\n      end\n\n      prev_node = current_node\n      current_node = current_node.next\n      i += 1\n    end\n\n    return false\n  end\n\n  # find node nth from the end of linked list\n  def find_nth_from_end_list(n)\n    return nil if (n < 0 || n > @length || !@head)\n\n    current_node = @head\n    i = 0\n\n    while(current_node)\n      if(i + n == @length)\n        return current_node\n      else\n        i += 1\n        current_node = current_node.next\n      end\n    end\n  end\n\n  # remove duplicate node\n  def remove_duplicate\n    current_node = @head\n    hash = {}\n    i = 0\n    sum_of_deleted = 0\n\n    while(current_node)\n      if(hash.key?(current_node.value))\n        # position in the next duplicate  will change after we remove any items\n        delete(i - sum_of_deleted)\n        sum_of_deleted += 1\n      else\n        hash[current_node.value] = true\n      end\n\n      i += 1\n      current_node = current_node.next\n    end\n  end\n\n  # remove middle node\n  def remove_middle_node\n    position = @length/2\n\n    i = 0\n    prev_node = current_node = @head\n\n    while(current_node)\n      if(i == position)\n        prev_node.next = current_node.next\n        break\n      else\n        prev_node = current_node\n        current_node = current_node.next\n        i += 1\n      end\n    end\n  end\n\n  def reverse\n    mid = @length / 2\n    i = 1\n    current_node = @head\n\n    while(i <= mid)\n      swap(current_node, find_nth_from_end_list(i))\n      current_node = current_node.next\n      i += 1\n    end\n  end\n\n  # plus two linked list\n  def plus(l2)\n    result = LinkedList.new\n    curr1 = @head\n    curr2 = l2.head\n    remember_number = 0\n\n    while(curr1 || curr2)\n      val1 = curr1 ? curr1.value : 0\n      val2 = curr2 ? curr2.value : 0\n\n      sum = val1 + val2 + remember_number\n\n      if sum >= 10\n        sum %= 10\n        remember_number = 1\n      end\n\n      result.add(sum)\n\n      curr1 = curr1.next\n      curr2 = curr2.next\n    end\n\n    result\n  end\n\n  def is_circular_linked_list?\n    return false if !@head\n    hash = {}\n\n    current_node = @head\n    while(current_node)\n      return false if(hash.key?(current_node.object_id))\n\n      hash[current_node.object_id] = true\n      current_node = current_node.next\n    end\n\n    return false\n  end\n\n  private\n\n  def swap(node1, node2)\n    tmp_value = node2.value\n    node2.value = node1.value\n    node1.value = tmp_value\n  end\nend\n```\n\n## Source\n\n> [https://github.com/hdchinh/ruby_cracking_code/tree/master/linked_lists](https://github.com/hdchinh/ruby_cracking_code/tree/master/linked_lists)\n","source":"_posts/2019-12-06-linked-list-with-ruby.md","raw":"---\ntitle: Implement Linked List With Ruby\ndate: 2019-12-06\ntags: [\"RUBY\"]\n---\n\n## Define Node\n\n```ruby\nclass Node\n  attr_accessor :next, :value\n\n  def initialize(value)\n    @value = value\n    @next  = nil\n  end\nend\n```\n\n## Define Linked List\n\n```ruby\nclass LinkedList\n  attr_accessor :head, :length\n\n  def initialize\n    @head = nil\n    @length = 0\n  end\nend\n```\n\n## Display Linked List\n\n```ruby\ndef show_all\n  current_node = @head\n  puts \":----- Linked List: ----->\"\n\n  while(current_node)\n    puts \"object_id: #{current_node.object_id} - value: #{current_node.value}\\n\"\n    current_node = current_node.next\n  end\nend\n```\n\n## Add New Node\n\n```ruby\ndef add(value)\n  current_node = @head\n\n  if current_node\n    while(current_node.next)\n      current_node = current_node.next\n    end\n    current_node.next = Node.new(value)\n  else\n    @head = Node.new(value)\n  end\n\n  @length += 1\nend\n```\n\n## Delete A Node At Position\n\n```ruby\ndef delete(position)\n  return false if(!@head || position > @length)\n\n  prev_node = current_node = @head\n  i = 0\n\n  while(current_node)\n    if(i == position)\n      prev_node.next = current_node.next\n      return true\n    end\n\n    prev_node = current_node\n    current_node = current_node.next\n    i += 1\n  end\n\n  return false\nend\n```\n\n## Reverse Linked List\n\n```ruby\ndef reverse\n  mid = @length / 2\n  i = 1\n  current_node = @head\n\n  while(i <= mid)\n    swap(current_node, find_nth_from_end_list(i))\n    current_node = current_node.next\n    i += 1\n  end\nend\n```\n\n## Check Circular Linked List\n\n```ruby\ndef is_circular_linked_list?\n  return false if !@head\n  hash = {}\n\n  current_node = @head\n  while(current_node)\n    return false if(hash.key?(current_node.object_id))\n\n    hash[current_node.object_id] = true\n    current_node = current_node.next\n  end\n\n  return false\nend\n```\n\n## Full Example\n\n```ruby\nclass Node\n  attr_accessor :next, :value\n\n  def initialize(value)\n    @value = value\n    @next  = nil\n  end\nend\n\nclass LinkedList\n  attr_accessor :head, :length\n\n  def initialize\n    @head = nil\n    @length = 0\n  end\n\n  def show_all\n    current_node = @head\n    puts \":----- Linked List: ----->\"\n\n    while(current_node)\n      puts \"object_id: #{current_node.object_id} - value: #{current_node.value}\\n\"\n      current_node = current_node.next\n    end\n  end\n\n  def add(value)\n    current_node = @head\n\n    if current_node\n      while(current_node.next)\n        current_node = current_node.next\n      end\n      current_node.next = Node.new(value)\n    else\n      @head = Node.new(value)\n    end\n\n    @length += 1\n  end\n\n  def delete(position)\n    return false if(!@head || position > @length)\n\n    prev_node = current_node = @head\n    i = 0\n\n    while(current_node)\n      if(i == position)\n        prev_node.next = current_node.next\n        return true\n      end\n\n      prev_node = current_node\n      current_node = current_node.next\n      i += 1\n    end\n\n    return false\n  end\n\n  # find node nth from the end of linked list\n  def find_nth_from_end_list(n)\n    return nil if (n < 0 || n > @length || !@head)\n\n    current_node = @head\n    i = 0\n\n    while(current_node)\n      if(i + n == @length)\n        return current_node\n      else\n        i += 1\n        current_node = current_node.next\n      end\n    end\n  end\n\n  # remove duplicate node\n  def remove_duplicate\n    current_node = @head\n    hash = {}\n    i = 0\n    sum_of_deleted = 0\n\n    while(current_node)\n      if(hash.key?(current_node.value))\n        # position in the next duplicate  will change after we remove any items\n        delete(i - sum_of_deleted)\n        sum_of_deleted += 1\n      else\n        hash[current_node.value] = true\n      end\n\n      i += 1\n      current_node = current_node.next\n    end\n  end\n\n  # remove middle node\n  def remove_middle_node\n    position = @length/2\n\n    i = 0\n    prev_node = current_node = @head\n\n    while(current_node)\n      if(i == position)\n        prev_node.next = current_node.next\n        break\n      else\n        prev_node = current_node\n        current_node = current_node.next\n        i += 1\n      end\n    end\n  end\n\n  def reverse\n    mid = @length / 2\n    i = 1\n    current_node = @head\n\n    while(i <= mid)\n      swap(current_node, find_nth_from_end_list(i))\n      current_node = current_node.next\n      i += 1\n    end\n  end\n\n  # plus two linked list\n  def plus(l2)\n    result = LinkedList.new\n    curr1 = @head\n    curr2 = l2.head\n    remember_number = 0\n\n    while(curr1 || curr2)\n      val1 = curr1 ? curr1.value : 0\n      val2 = curr2 ? curr2.value : 0\n\n      sum = val1 + val2 + remember_number\n\n      if sum >= 10\n        sum %= 10\n        remember_number = 1\n      end\n\n      result.add(sum)\n\n      curr1 = curr1.next\n      curr2 = curr2.next\n    end\n\n    result\n  end\n\n  def is_circular_linked_list?\n    return false if !@head\n    hash = {}\n\n    current_node = @head\n    while(current_node)\n      return false if(hash.key?(current_node.object_id))\n\n      hash[current_node.object_id] = true\n      current_node = current_node.next\n    end\n\n    return false\n  end\n\n  private\n\n  def swap(node1, node2)\n    tmp_value = node2.value\n    node2.value = node1.value\n    node1.value = tmp_value\n  end\nend\n```\n\n## Source\n\n> [https://github.com/hdchinh/ruby_cracking_code/tree/master/linked_lists](https://github.com/hdchinh/ruby_cracking_code/tree/master/linked_lists)\n","slug":"2019-12-06-linked-list-with-ruby","published":1,"updated":"2019-12-06T14:07:22.063Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7suhc003f5rrs2tq807f1","content":"<h2 id=\"Define-Node\"><a href=\"#Define-Node\" class=\"headerlink\" title=\"Define Node\"></a>Define Node</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:next</span>, <span class=\"symbol\">:value</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(value)</span></span></span><br><span class=\"line\">    @value = value</span><br><span class=\"line\">    @next  = <span class=\"literal\">nil</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Define-Linked-List\"><a href=\"#Define-Linked-List\" class=\"headerlink\" title=\"Define Linked List\"></a>Define Linked List</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedList</span></span></span><br><span class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:head</span>, <span class=\"symbol\">:length</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span></span></span><br><span class=\"line\">    @head = <span class=\"literal\">nil</span></span><br><span class=\"line\">    @length = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Display-Linked-List\"><a href=\"#Display-Linked-List\" class=\"headerlink\" title=\"Display Linked List\"></a>Display Linked List</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_all</span></span></span><br><span class=\"line\">  current_node = @head</span><br><span class=\"line\">  puts <span class=\"string\">\":----- Linked List: -----&gt;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(current_node)</span><br><span class=\"line\">    puts <span class=\"string\">\"object_id: <span class=\"subst\">#&#123;current_node.object_id&#125;</span> - value: <span class=\"subst\">#&#123;current_node.value&#125;</span>\\n\"</span></span><br><span class=\"line\">    current_node = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Add-New-Node\"><a href=\"#Add-New-Node\" class=\"headerlink\" title=\"Add New Node\"></a>Add New Node</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(value)</span></span></span><br><span class=\"line\">  current_node = @head</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> current_node</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(current_node.<span class=\"keyword\">next</span>)</span><br><span class=\"line\">      current_node = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    current_node.<span class=\"keyword\">next</span> = Node.new(value)</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    @head = Node.new(value)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  @length += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Delete-A-Node-At-Position\"><a href=\"#Delete-A-Node-At-Position\" class=\"headerlink\" title=\"Delete A Node At Position\"></a>Delete A Node At Position</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(position)</span></span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"keyword\">if</span>(!@head <span class=\"params\">||</span> position &gt; @length)</span><br><span class=\"line\"></span><br><span class=\"line\">  prev_node = current_node = @head</span><br><span class=\"line\">  i = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(current_node)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i == position)</span><br><span class=\"line\">      prev_node.<span class=\"keyword\">next</span> = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    prev_node = current_node</span><br><span class=\"line\">    current_node = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">    i += <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Reverse-Linked-List\"><a href=\"#Reverse-Linked-List\" class=\"headerlink\" title=\"Reverse Linked List\"></a>Reverse Linked List</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reverse</span></span></span><br><span class=\"line\">  mid = @length / <span class=\"number\">2</span></span><br><span class=\"line\">  i = <span class=\"number\">1</span></span><br><span class=\"line\">  current_node = @head</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(i &lt;= mid)</span><br><span class=\"line\">    swap(current_node, find_nth_from_end_list(i))</span><br><span class=\"line\">    current_node = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">    i += <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Check-Circular-Linked-List\"><a href=\"#Check-Circular-Linked-List\" class=\"headerlink\" title=\"Check Circular Linked List\"></a>Check Circular Linked List</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_circular_linked_list?</span></span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"keyword\">if</span> !@head</span><br><span class=\"line\">  hash = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  current_node = @head</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(current_node)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"keyword\">if</span>(hash.key?(current_node.object_id))</span><br><span class=\"line\"></span><br><span class=\"line\">    hash[current_node.object_id] = <span class=\"literal\">true</span></span><br><span class=\"line\">    current_node = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Full-Example\"><a href=\"#Full-Example\" class=\"headerlink\" title=\"Full Example\"></a>Full Example</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:next</span>, <span class=\"symbol\">:value</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(value)</span></span></span><br><span class=\"line\">    @value = value</span><br><span class=\"line\">    @next  = <span class=\"literal\">nil</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedList</span></span></span><br><span class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:head</span>, <span class=\"symbol\">:length</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span></span></span><br><span class=\"line\">    @head = <span class=\"literal\">nil</span></span><br><span class=\"line\">    @length = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_all</span></span></span><br><span class=\"line\">    current_node = @head</span><br><span class=\"line\">    puts <span class=\"string\">\":----- Linked List: -----&gt;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(current_node)</span><br><span class=\"line\">      puts <span class=\"string\">\"object_id: <span class=\"subst\">#&#123;current_node.object_id&#125;</span> - value: <span class=\"subst\">#&#123;current_node.value&#125;</span>\\n\"</span></span><br><span class=\"line\">      current_node = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(value)</span></span></span><br><span class=\"line\">    current_node = @head</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> current_node</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(current_node.<span class=\"keyword\">next</span>)</span><br><span class=\"line\">        current_node = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\">      current_node.<span class=\"keyword\">next</span> = Node.new(value)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      @head = Node.new(value)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    @length += <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(position)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"keyword\">if</span>(!@head <span class=\"params\">||</span> position &gt; @length)</span><br><span class=\"line\"></span><br><span class=\"line\">    prev_node = current_node = @head</span><br><span class=\"line\">    i = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(current_node)</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i == position)</span><br><span class=\"line\">        prev_node.<span class=\"keyword\">next</span> = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">      prev_node = current_node</span><br><span class=\"line\">      current_node = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">      i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># find node nth from the end of linked list</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find_nth_from_end_list</span><span class=\"params\">(n)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span> <span class=\"params\">||</span> n &gt; @length <span class=\"params\">||</span> !@head)</span><br><span class=\"line\"></span><br><span class=\"line\">    current_node = @head</span><br><span class=\"line\">    i = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(current_node)</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i + n == @length)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> current_node</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br><span class=\"line\">        current_node = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># remove duplicate node</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">remove_duplicate</span></span></span><br><span class=\"line\">    current_node = @head</span><br><span class=\"line\">    hash = &#123;&#125;</span><br><span class=\"line\">    i = <span class=\"number\">0</span></span><br><span class=\"line\">    sum_of_deleted = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(current_node)</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(hash.key?(current_node.value))</span><br><span class=\"line\">        <span class=\"comment\"># position in the next duplicate  will change after we remove any items</span></span><br><span class=\"line\">        delete(i - sum_of_deleted)</span><br><span class=\"line\">        sum_of_deleted += <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        hash[current_node.value] = <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">      i += <span class=\"number\">1</span></span><br><span class=\"line\">      current_node = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># remove middle node</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">remove_middle_node</span></span></span><br><span class=\"line\">    position = @length/<span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    i = <span class=\"number\">0</span></span><br><span class=\"line\">    prev_node = current_node = @head</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(current_node)</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i == position)</span><br><span class=\"line\">        prev_node.<span class=\"keyword\">next</span> = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        prev_node = current_node</span><br><span class=\"line\">        current_node = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reverse</span></span></span><br><span class=\"line\">    mid = @length / <span class=\"number\">2</span></span><br><span class=\"line\">    i = <span class=\"number\">1</span></span><br><span class=\"line\">    current_node = @head</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid)</span><br><span class=\"line\">      swap(current_node, find_nth_from_end_list(i))</span><br><span class=\"line\">      current_node = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">      i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># plus two linked list</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">plus</span><span class=\"params\">(l2)</span></span></span><br><span class=\"line\">    result = LinkedList.new</span><br><span class=\"line\">    curr1 = @head</span><br><span class=\"line\">    curr2 = l2.head</span><br><span class=\"line\">    remember_number = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(curr1 <span class=\"params\">||</span> curr2)</span><br><span class=\"line\">      val1 = curr1 ? curr1.value : <span class=\"number\">0</span></span><br><span class=\"line\">      val2 = curr2 ? curr2.value : <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">      sum = val1 + val2 + remember_number</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> sum &gt;= <span class=\"number\">10</span></span><br><span class=\"line\">        sum %= <span class=\"number\">10</span></span><br><span class=\"line\">        remember_number = <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">      result.add(sum)</span><br><span class=\"line\"></span><br><span class=\"line\">      curr1 = curr1.<span class=\"keyword\">next</span></span><br><span class=\"line\">      curr2 = curr2.<span class=\"keyword\">next</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    result</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_circular_linked_list?</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"keyword\">if</span> !@head</span><br><span class=\"line\">    hash = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    current_node = @head</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(current_node)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"keyword\">if</span>(hash.key?(current_node.object_id))</span><br><span class=\"line\"></span><br><span class=\"line\">      hash[current_node.object_id] = <span class=\"literal\">true</span></span><br><span class=\"line\">      current_node = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  private</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">swap</span><span class=\"params\">(node1, node2)</span></span></span><br><span class=\"line\">    tmp_value = node2.value</span><br><span class=\"line\">    node2.value = node1.value</span><br><span class=\"line\">    node1.value = tmp_value</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Source\"><a href=\"#Source\" class=\"headerlink\" title=\"Source\"></a>Source</h2><blockquote>\n<p><a href=\"https://github.com/hdchinh/ruby_cracking_code/tree/master/linked_lists\" target=\"_blank\" rel=\"noopener\">https://github.com/hdchinh/ruby_cracking_code/tree/master/linked_lists</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Define-Node\"><a href=\"#Define-Node\" class=\"headerlink\" title=\"Define Node\"></a>Define Node</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:next</span>, <span class=\"symbol\">:value</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(value)</span></span></span><br><span class=\"line\">    @value = value</span><br><span class=\"line\">    @next  = <span class=\"literal\">nil</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Define-Linked-List\"><a href=\"#Define-Linked-List\" class=\"headerlink\" title=\"Define Linked List\"></a>Define Linked List</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedList</span></span></span><br><span class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:head</span>, <span class=\"symbol\">:length</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span></span></span><br><span class=\"line\">    @head = <span class=\"literal\">nil</span></span><br><span class=\"line\">    @length = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Display-Linked-List\"><a href=\"#Display-Linked-List\" class=\"headerlink\" title=\"Display Linked List\"></a>Display Linked List</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_all</span></span></span><br><span class=\"line\">  current_node = @head</span><br><span class=\"line\">  puts <span class=\"string\">\":----- Linked List: -----&gt;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(current_node)</span><br><span class=\"line\">    puts <span class=\"string\">\"object_id: <span class=\"subst\">#&#123;current_node.object_id&#125;</span> - value: <span class=\"subst\">#&#123;current_node.value&#125;</span>\\n\"</span></span><br><span class=\"line\">    current_node = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Add-New-Node\"><a href=\"#Add-New-Node\" class=\"headerlink\" title=\"Add New Node\"></a>Add New Node</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(value)</span></span></span><br><span class=\"line\">  current_node = @head</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> current_node</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(current_node.<span class=\"keyword\">next</span>)</span><br><span class=\"line\">      current_node = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    current_node.<span class=\"keyword\">next</span> = Node.new(value)</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    @head = Node.new(value)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  @length += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Delete-A-Node-At-Position\"><a href=\"#Delete-A-Node-At-Position\" class=\"headerlink\" title=\"Delete A Node At Position\"></a>Delete A Node At Position</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(position)</span></span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"keyword\">if</span>(!@head <span class=\"params\">||</span> position &gt; @length)</span><br><span class=\"line\"></span><br><span class=\"line\">  prev_node = current_node = @head</span><br><span class=\"line\">  i = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(current_node)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i == position)</span><br><span class=\"line\">      prev_node.<span class=\"keyword\">next</span> = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    prev_node = current_node</span><br><span class=\"line\">    current_node = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">    i += <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Reverse-Linked-List\"><a href=\"#Reverse-Linked-List\" class=\"headerlink\" title=\"Reverse Linked List\"></a>Reverse Linked List</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reverse</span></span></span><br><span class=\"line\">  mid = @length / <span class=\"number\">2</span></span><br><span class=\"line\">  i = <span class=\"number\">1</span></span><br><span class=\"line\">  current_node = @head</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(i &lt;= mid)</span><br><span class=\"line\">    swap(current_node, find_nth_from_end_list(i))</span><br><span class=\"line\">    current_node = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">    i += <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Check-Circular-Linked-List\"><a href=\"#Check-Circular-Linked-List\" class=\"headerlink\" title=\"Check Circular Linked List\"></a>Check Circular Linked List</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_circular_linked_list?</span></span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"keyword\">if</span> !@head</span><br><span class=\"line\">  hash = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  current_node = @head</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(current_node)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"keyword\">if</span>(hash.key?(current_node.object_id))</span><br><span class=\"line\"></span><br><span class=\"line\">    hash[current_node.object_id] = <span class=\"literal\">true</span></span><br><span class=\"line\">    current_node = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Full-Example\"><a href=\"#Full-Example\" class=\"headerlink\" title=\"Full Example\"></a>Full Example</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:next</span>, <span class=\"symbol\">:value</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(value)</span></span></span><br><span class=\"line\">    @value = value</span><br><span class=\"line\">    @next  = <span class=\"literal\">nil</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedList</span></span></span><br><span class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:head</span>, <span class=\"symbol\">:length</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span></span></span><br><span class=\"line\">    @head = <span class=\"literal\">nil</span></span><br><span class=\"line\">    @length = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_all</span></span></span><br><span class=\"line\">    current_node = @head</span><br><span class=\"line\">    puts <span class=\"string\">\":----- Linked List: -----&gt;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(current_node)</span><br><span class=\"line\">      puts <span class=\"string\">\"object_id: <span class=\"subst\">#&#123;current_node.object_id&#125;</span> - value: <span class=\"subst\">#&#123;current_node.value&#125;</span>\\n\"</span></span><br><span class=\"line\">      current_node = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(value)</span></span></span><br><span class=\"line\">    current_node = @head</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> current_node</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(current_node.<span class=\"keyword\">next</span>)</span><br><span class=\"line\">        current_node = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\">      current_node.<span class=\"keyword\">next</span> = Node.new(value)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      @head = Node.new(value)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    @length += <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(position)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"keyword\">if</span>(!@head <span class=\"params\">||</span> position &gt; @length)</span><br><span class=\"line\"></span><br><span class=\"line\">    prev_node = current_node = @head</span><br><span class=\"line\">    i = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(current_node)</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i == position)</span><br><span class=\"line\">        prev_node.<span class=\"keyword\">next</span> = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">      prev_node = current_node</span><br><span class=\"line\">      current_node = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">      i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># find node nth from the end of linked list</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find_nth_from_end_list</span><span class=\"params\">(n)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span> <span class=\"params\">||</span> n &gt; @length <span class=\"params\">||</span> !@head)</span><br><span class=\"line\"></span><br><span class=\"line\">    current_node = @head</span><br><span class=\"line\">    i = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(current_node)</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i + n == @length)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> current_node</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br><span class=\"line\">        current_node = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># remove duplicate node</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">remove_duplicate</span></span></span><br><span class=\"line\">    current_node = @head</span><br><span class=\"line\">    hash = &#123;&#125;</span><br><span class=\"line\">    i = <span class=\"number\">0</span></span><br><span class=\"line\">    sum_of_deleted = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(current_node)</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(hash.key?(current_node.value))</span><br><span class=\"line\">        <span class=\"comment\"># position in the next duplicate  will change after we remove any items</span></span><br><span class=\"line\">        delete(i - sum_of_deleted)</span><br><span class=\"line\">        sum_of_deleted += <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        hash[current_node.value] = <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">      i += <span class=\"number\">1</span></span><br><span class=\"line\">      current_node = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># remove middle node</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">remove_middle_node</span></span></span><br><span class=\"line\">    position = @length/<span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    i = <span class=\"number\">0</span></span><br><span class=\"line\">    prev_node = current_node = @head</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(current_node)</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i == position)</span><br><span class=\"line\">        prev_node.<span class=\"keyword\">next</span> = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        prev_node = current_node</span><br><span class=\"line\">        current_node = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reverse</span></span></span><br><span class=\"line\">    mid = @length / <span class=\"number\">2</span></span><br><span class=\"line\">    i = <span class=\"number\">1</span></span><br><span class=\"line\">    current_node = @head</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid)</span><br><span class=\"line\">      swap(current_node, find_nth_from_end_list(i))</span><br><span class=\"line\">      current_node = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">      i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># plus two linked list</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">plus</span><span class=\"params\">(l2)</span></span></span><br><span class=\"line\">    result = LinkedList.new</span><br><span class=\"line\">    curr1 = @head</span><br><span class=\"line\">    curr2 = l2.head</span><br><span class=\"line\">    remember_number = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(curr1 <span class=\"params\">||</span> curr2)</span><br><span class=\"line\">      val1 = curr1 ? curr1.value : <span class=\"number\">0</span></span><br><span class=\"line\">      val2 = curr2 ? curr2.value : <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">      sum = val1 + val2 + remember_number</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> sum &gt;= <span class=\"number\">10</span></span><br><span class=\"line\">        sum %= <span class=\"number\">10</span></span><br><span class=\"line\">        remember_number = <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">      result.add(sum)</span><br><span class=\"line\"></span><br><span class=\"line\">      curr1 = curr1.<span class=\"keyword\">next</span></span><br><span class=\"line\">      curr2 = curr2.<span class=\"keyword\">next</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    result</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_circular_linked_list?</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"keyword\">if</span> !@head</span><br><span class=\"line\">    hash = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    current_node = @head</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(current_node)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"keyword\">if</span>(hash.key?(current_node.object_id))</span><br><span class=\"line\"></span><br><span class=\"line\">      hash[current_node.object_id] = <span class=\"literal\">true</span></span><br><span class=\"line\">      current_node = current_node.<span class=\"keyword\">next</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  private</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">swap</span><span class=\"params\">(node1, node2)</span></span></span><br><span class=\"line\">    tmp_value = node2.value</span><br><span class=\"line\">    node2.value = node1.value</span><br><span class=\"line\">    node1.value = tmp_value</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Source\"><a href=\"#Source\" class=\"headerlink\" title=\"Source\"></a>Source</h2><blockquote>\n<p><a href=\"https://github.com/hdchinh/ruby_cracking_code/tree/master/linked_lists\" target=\"_blank\" rel=\"noopener\">https://github.com/hdchinh/ruby_cracking_code/tree/master/linked_lists</a></p>\n</blockquote>\n"},{"title":"Hello Hexo!","date":"2019-11-12T03:38:22.000Z","_content":"\n![the con](/../images/thecon.jpg)\n\n1. `hexo init new_project`\n\n2. `hexo s`\n\n3. `hexo clean` (remove public folder)\n\n4. `hexo generate` (generate static site from your post and something related)\n\n5. `hexo deploy` (install and use hexo-deployer-git)\n\n6. Config _config.yml to use hexo-deployer-git and add some information\n\n-----\n","source":"_posts/hello-hexo.md","raw":"---\ntitle: Hello Hexo!\ndate: 2019-11-12 10:38:22\ntags:\n---\n\n![the con](/../images/thecon.jpg)\n\n1. `hexo init new_project`\n\n2. `hexo s`\n\n3. `hexo clean` (remove public folder)\n\n4. `hexo generate` (generate static site from your post and something related)\n\n5. `hexo deploy` (install and use hexo-deployer-git)\n\n6. Config _config.yml to use hexo-deployer-git and add some information\n\n-----\n","slug":"hello-hexo","published":1,"updated":"2019-11-30T10:59:00.003Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7suhf003h5rrs17ppa5eg","content":"<p><img src=\"/../images/thecon.jpg\" alt=\"the con\"></p>\n<ol>\n<li><p><code>hexo init new_project</code></p>\n</li>\n<li><p><code>hexo s</code></p>\n</li>\n<li><p><code>hexo clean</code> (remove public folder)</p>\n</li>\n<li><p><code>hexo generate</code> (generate static site from your post and something related)</p>\n</li>\n<li><p><code>hexo deploy</code> (install and use hexo-deployer-git)</p>\n</li>\n<li><p>Config _config.yml to use hexo-deployer-git and add some information</p>\n</li>\n</ol>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/../images/thecon.jpg\" alt=\"the con\"></p>\n<ol>\n<li><p><code>hexo init new_project</code></p>\n</li>\n<li><p><code>hexo s</code></p>\n</li>\n<li><p><code>hexo clean</code> (remove public folder)</p>\n</li>\n<li><p><code>hexo generate</code> (generate static site from your post and something related)</p>\n</li>\n<li><p><code>hexo deploy</code> (install and use hexo-deployer-git)</p>\n</li>\n<li><p>Config _config.yml to use hexo-deployer-git and add some information</p>\n</li>\n</ol>\n<hr>\n"},{"title":"Book Notes: Mateprograming Ruby 2","date":"2019-09-20T17:00:00.000Z","draft":false,"mytag":"#TIL","_content":"\n## IMAGES\n\n![hoa](/images/meta2/1.png)\n\n![hoa](/images/meta2/2.png)\n\n![hoa](/images/meta2/3.png)\n\n![hoa](/images/meta2/4.png)\n\n![hoa](/images/meta2/5.png)\n\n<!-- ![hoa](/images/meta2/6.png) -->\n\n![hoa](/images/meta2/7.png)\n\n![hoa](/images/meta2/8.png)\n\n![hoa](/images/meta2/9.png)\n\n\n\n## RUBY OBJECT MODEL\n\n### Open Classes\n\n\n`rails g model Movie title:string director:string`\n\n```ruby\nclass Movie < ActiveRecord:Base; end\n```\n\n1) What about methods such as `title=` and title, which access object attributes (accessor methods for short)? This is where metaprogramming comes in: Bob doesn’t have to write those methods. Active Record defines them automatically, after inferring their names from the database schema. ActiveRecord::Base reads the schema at runtime, discovers that the movies table has two columns named title and director, and defines accessor methods for two attributes of the same name. This means that Active Record defines methods such as `Movie#title` and `Movie#director=` out of thin air while the program runs.\n\nOpen Class\n```ruby\nclass Numeric\n  def to_money(currency = nil)\n    Money.from_numeric(self, currency || Money.default_currency)\n  end\nend\n```\n\n2) As cool as they are, however, Open Classes have a dark side—one that you’re about to experience.\n\n| This can override the method of superclass and make wrong result in somewhere (monkeypath). So we need be careful when set the name for the override method.\n\n### Inside the Object Model\n\n3) Objects that share the same class also share the same methods, so the methods must be stored in the class, not the object.\n\n4) The \"false\" argument here means: ignore inherited methods Class.instance_methods(false) # => [:allocate, :new, :superclass]\n\n5) The superclass of Class is Module—which is to say, every class is also a module.\nTo be precise, a class is a module with three additional instance methods (new, allocate, and superclass)\n\n6) All the constants in a program are arranged in a tree similar to a file system.\n\n7) The Module class also provides an instance method and a class method that, confusingly, are both called constants.\n\n8) What’s an object? It’s a bunch of instance variables, plus a link to a class. The object’s methods don’t live in the object—they live in the object’s class, where they’re called the instance methods of the class.\n\n9) What’s a class? It’s an object (an instance of Class), plus a list of instance methods and a link to a superclass. Class is a subclass of Module, so a class is also a module\n\n10) These are instance methods of the Class class. Like any object, a class has its own methods, such as new. Also like any object, classes must be accessed through references. You already have a constant reference to each class: the class’s name.\n\n11) Using load, however, has a side effect. The motd.rb file probably defines variables and classes. Although variables fall out of scope when the file has finished loading, constants don’t. As a result, motd.rb can pollute your program with the names of its own constants—in particular, class names. You can force motd.rb to keep its constants to itself by passing a second, optional argument to load: `load('motd.rb', true)` If you load a file this way, Ruby creates **an anonymous module**, uses that module as a Namespace to contain all the constants from motd.rb, and then destroys the module. The require method is quite similar to load, but it’s meant for a different purpose. You use load to execute code, and you use require to import libraries. That’s why require has no second argument: those leftover class names are probably the reason why you imported the file in the first place. Also, that’s why require tries only once to load each file, while load executes the file again every time you call it.\n\nWhat’s the class of Object?\nWhat’s the superclass of Module?\nWhat’s the class of Class?\n\n### What Happens When You Call a Method?\n\n12) When you call a method, Ruby does two things:\n1. It finds the method. This is a process called method lookup.\n2. It executes the method. To do that, Ruby needs something called self.\n\n13) Before you look at a more complicated example, though, you need to know about two new concepts: the receiver and the ancestors chain.The receiver is the object that you call a method on. For example, if you write `my_string.reverse()`, then `my_string` is the receiver. To understand the concept of an ancestors chain, look at any Ruby class. Then imagine moving from the class into its superclass, then into the superclass’s superclass, and so on, until you reach BasicObject, the root of the Ruby class hierarchy. The path of classes you just traversed is the ancestors chain of the class.\nMySubclass.ancestors # => [MySubclass, MyClass, Object, Kernel, BasicObject]\n\n14) When you include a module in a class (or even in another module), Ruby inserts the module in the ancestors chain, right above the including class itself:\n\n15) Starting from Ruby 2.0, you also have a second way to insert a module in a class’s chain of ancestors: **the prepend method**. It works like include, but it inserts the module below the including class (sometimes called the includer).\n\n```ruby\nclass C2\n prepend M2\nend\nclass D2 < C2; end\nD2.ancestors # => [D2, M2, C2, Object, Kernel, BasicObject]\n```\n\n16) This is true every time you include or prepend a module: if that module is already in the chain, Ruby silently ignores the second inclusion.\n\nKernel.private_instance_methods.grep(/^pr/) # => [:printf, :print, :proc]\n\n17) The trick here is that class Object includes Kernel, so Kernel gets into every object’s ancestors chain. Every line of Ruby is always executed inside an object, so you can call the instance methods in Kernel from anywhere.\n\n18) You can take advantage of this mechanism yourself: if you add a method to Spell: Kernel Method Kernel, this Kernel Method will be available to all objects. To prove that Kernel Methods are actually useful, you can look at the way some Ruby libraries use them.\n\n19) Every line of Ruby code is executed inside an object—the so-called current object. The current object is also known as self, because you can access it with the self keyword.\n\n20) Only one object can take the role of self at a given time, but no object holds that role for a long time. In particular, when you call a method, the receiver becomes self. From that moment on, all instance variables are instance variables of self, and all methods called without an explicit receiver are called on self.\n\n21) As soon as you start a Ruby program, you’re sitting within an object named main that the Ruby interpreter created for you. This object is sometimes called the top-level context, because it’s the object you’re in when you’re at the top level of the call stack: either you haven’t called any method yet or all the methods that you called have returned.\n\n22) This code refines the String class with a new to_alphanumeric method. Differently from a regular Open Class, however, a Refinement is not active by default. If you try to call   `String#to_alphanumeric`, you’ll get an error: `\"my *1st* refinement!\".to_alphanumeric ❮ NoMethodError: undefined method 'to_alphanumeric' [...]` To activate the changes, you have to do so explicitly, with the using method: using StringExtensions\n\n23) you can call refine in a regular module, but you cannot call it in a class, even if a class is itself a module.\n\n## METHODS\n\n### Dynamic Methods\n\n24) If that kind of breaching of encapsulation makes you uneasy, you can use public_send instead. It’s like send, but it makes a point of respecting the receiver’s privacy. Be prepared, however, for the fact that Ruby code in the wild rarely bothers with this concern. If anything, a lot of Ruby programmers use send exactly because it allows calling private methods, not in spite of that\n\n```ruby\nclass DS\n  def initialize # connect to data source...\n  def get_cpu_info(workstation_id) # ...\n  def get_cpu_price(workstation_id) # ...\n  def get_mouse_info(workstation_id) # ...\n  def get_mouse_price(workstation_id) # ...\n  def get_keyboard_info(workstation_id) # ...\n  def get_keyboard_price(workstation_id) # ...\n  def get_display_info(workstation_id) # ...\n  def get_display_price(workstation_id) # ...\n  # ...and so on\nend\n```\n\n```ruby\nclass Computer\n  def initialize(computer_id, data_source)\n    @id = computer_id\n    @data_source = data_source\n  end\n  \n  def mouse\n    info = @data_source.get_mouse_info(@id)\n    price = @data_source.get_mouse_price(@id)\n    result = \"Mouse: #{info} ($#{price})\"\n    return \"* #{result}\" if price >= 100\n    result\n  end\n   \n  def cpu\n    info = @data_source.get_cpu_info(@id)\n    price = @data_source.get_cpu_price(@id)\n    result = \"Cpu: #{info} ($#{price})\"\n    return \"* #{result}\" if price >= 100\n    result\n  end\n    \n  def keyboard\n    info = @data_source.get_keyboard_info(@id)\n    price = @data_source.get_keyboard_price(@id)\n    result = \"Keyboard: #{info} ($#{price})\"\n    return \"* #{result}\" if price >= 100\n    result\n  end\n   # ...\nend\n```\n\nDYNAMIC DISPATCH\n\n```ruby\nclass Computer\n  def initialize(computer_id, data_source)\n  @id = computer_id\n  @data_source = data_source\n  end\n  \n  def mouse\n    component :mouse\n  end\n\n  def cpu\n    component :cpu\n  end\n    \n  def keyboard\n    component :keyboard\n  end\n    \n  def component(name)\n    info = @data_source.send \"get_#{name}_info\", @id\n    price = @data_source.send \"get_#{name}_price\", @id\n    result = \"#{name.capitalize}: #{info} ($#{price})\"\n    return \"* #{result}\" if price >= 100\n    result\n  end\nend\n```\n\nDYNAMIC METHOD\n\n```ruby\nclass Computer\n  def initialize(computer_id, data_source)\n    @id = computer_id\n    @data_source = data_source\n  end\n  \n  def self.define_component(name)\n    define_method(name) do\n      info = @data_source.send \"get_#{name}_info\", @id\n      price = @data_source.send \"get_#{name}_price\", @id\n      result = \"#{name.capitalize}: #{info} ($#{price})\"\n      return \"* #{result}\" if price >= 100\n      result\n    end\n  end\n     \n  define_component :mouse\n  define_component :cpu\n  define_component :keyboard\nend\n\n```\n\nBEST WAY\n\n```ruby\nclass Computer\n  def initialize(computer_id, data_source)\n    @id = computer_id\n    @data_source = data_source\n    data_source.methods.grep(/^get_(.*)_info$/) { Computer.define_component $1 }\n  end\n    \n  def self.define_component(name)\n    define_method(name) do\n      # ...\n    end\n  end\nend\n```\n\n### method_missing\n\n25) The Hashie gem contains a little bit of magic called Hashie::Mash. A Mash is a more powerful version of Ruby’s standard OpenStruct class: a hash-like object whose attributes work like Ruby variables. If you want a new attribute, just assign a value to the attribute, and it will spring into existence:\n\n```ruby\nrequire 'hashie'\nicecream = Hashie::Mash.new\nicecream.flavor = \"strawberry\"\nicecream.flavor # => \"strawberry\"\n```\n\nWhat hanppen inside?\n\n```ruby\nmodule Hashie\n  class Mash < Hashie::Hash\n    def method_missing(method_name, *args, &blk)\n      return self.[](method_name, &blk) if key?(method_name)\n      match = method_name.to_s.match(/(.*?)([?=!]?)$/)\n      case match[2]\n      when \"=\"\n      self[match[1]] = args.first\n      # ...\n      else\n      default(method_name, *args, &blk)\n      end\n    end\n    # ...\n  end\nend\n```\n\n26) **Ghost Methods** (57) are usually icing on the cake, but some objects actually rely almost exclusively on them. These objects are often wrappers for something else—maybe another object, a web service, or code written in a different language. They collect method calls through method_missing and forward them to the wrapped object. Let’s look at a complex real-life example.\n\nRefactor:\n\n```ruby\nclass Computer\n  def initialize(computer_id, data_source)\n    @id = computer_id\n    @data_source = data_source\n  end\n  \n  def method_missing(name)\n    super if !@data_source.respond_to?(\"get_#{name}_info\")\n    info = @data_source.send(\"get_#{name}_info\", @id)\n    price = @data_source.send(\"get_#{name}_price\", @id)\n    result = \"#{name.capitalize}: #{info} ($#{price})\"\n    return \"* #{result}\" if price >= 100\n    result\n  end\nend\n```\n\n27) Khi dùng ghost method, giả sử trong method_missing chúng ta muốn tạo ra 1 method x, tuy nhiên x lại có trong cây kế thừa => x trong method missing sẽ không được gọi. Lúc này ta cần Blank Slates.\n\n### Blank Slates\n\n28) If you don’t need the inherited method, you can fix the problem by removing it. While you’re at it, you might want to remove most methods from the class, preventing such name clashes from ever happening again. A skinny class Spell: Blank Slate with a minimal number of methods is called a Blank Slate. As it turns out, Ruby has a ready-made Blank Slate for you to use\n\n29) If you don’t specify a superclass, your classes inherit by default from Object, which is itself a subclass of BasicObject. If you want a Blank Slate (66), you can inherit directly from BasicObject instead. For example, if Computer inherited directly from BasicObject, then it wouldn’t have a problematic display method.\n=> không lấy nhầm method trong class Object, vì lớp Computer được kế thừa trực tiếp từ BasicObject\n\n30) Inheriting from BasicObject is the quicker way to define a Blank Slate in Ruby.\n`class Computer < BasicObject`\n\n31) You can remove a method from a class by using either Module#undef_method or Module#remove_method. The drastic undef_method removes any method, including the inherited ones. The kinder remove_method removes the method from the receiver, but it leaves inherited methods alone. Let’s look at a real-life library that uses undef_method to create a Blank Slate.\n\n```ruby\nclass BlankSlate\n  # Hide the method named +name+ in the BlankSlate class. Don't\n  # hide +instance_eval+ or any method beginning with \"__\".\n  def self.hide(name)\n    # ...\n    if instance_methods.include?(name._blankslate_as_name) &&\n      name !~ /^(__|instance_eval$)/\n      undef_method name\n    end\n  end\n  # ...\n  instance_methods.each { |m| hide(m) }\nend\n```\n\n32) **use Dynamic Methods if you can and Ghost Methods if you have to**\n\n\n## BLOCKS\n\n### Blocks Are Closures\n\n```ruby\ndef my_method\n  x = \"Goodbye\"\n  yield(\"cruel\")\nend\n\nx = \"Hello\"\nmy_method {|y| \"#{x}, #{y} world\" } # => \"Hello, cruel world\"\n```\n\n33) When you create the block, you capture the local bindings, such as x. Then you pass the block to a method that has its own separate set of bindings. In the previous example, those bindings also include a variable named x. Still, the code in the block sees the x that was around when the block was defined, not the method’s x, which is not visible at all in the block.\n\n34) khi gọi 1 block, nó lưu vết lại các ràng buộc cục bộ nơi block được gọi, sau đó block được truyền cho 1 method, mà method đó sẽ có các ràng cuộc cục bộ của riêng nó, và block sẽ sử dụng ràng buộc của mình (ví dụ như biến x ở trên).\n\n```ruby\ndef just_yield\n  yield\nend\n\ntop_level_variable = 1\njust_yield do\n  top_level_variable += 1\n  local_to_block = 1\nend\n\ntop_level_variable # => 2\nlocal_to_block # => Error!\n```\nTrong ví dụ này thì local_to_block là 1 binding thuộc block, và ra ngoài ngữ cảnh block nó không có giá trị.\n\n35) This example shows how scope changes as your program runs, tracking the names of bindings with the Kernel#local_variables method:\n\n```ruby\nv1 = 1\n\nclass MyClass\n  v2 = 2\n  local_variables # => [:v2]\n  def my_method\n    v3 = 3\n    local_variables\n  end\n  local_variables # => [:v2]\nend\n  \nobj = MyClass.new\nobj.my_method # => [:v3]\nobj.my_method # => [:v3]\nlocal_variables # => [:v1, :obj]\n```\n\n36) There are exactly three places where a program leaves the previous scope behind and opens a new one:\nClass definitions\nModule definitions\nMethods\n\n37) Scope changes whenever the program enters (or exits) a class or module definition or a method. These three borders are marked by the keywords class, module, and def, respectively. Each of these keywords acts like a **Scope Gate**.\n\n```ruby\nv1 = 1\nclass MyClass # SCOPE GATE: entering class\n  v2 = 2\n  local_variables # => [\"v2\"]\n  def my_method # SCOPE GATE: entering def\n    v3 = 3\n    local_variables\n  end # SCOPE GATE: leaving def\n  \n  local_variables # => [\"v2\"]\nend # SCOPE GATE: leaving class\n  \nobj = MyClass.new\nobj.my_method # => [:v3]\nlocal_variables # => [:v1, :obj]\n```\n\n```ruby\nmy_var = \"Success\"\n  \nMyClass = Class.new do\n  \"#{my_var} in the class definition\"\n  \n  define_method :my_method do\n    \"#{my_var} in the method\"\n  end\nend\n```\n\nkhai báo thông thường thì my_var không thể sử dụng trong class hoặc def (vì nó mở ra  1 scope mới). Nên dùng call method gọi là **flat scope**.\n\n38) If you replace Scope Gates with method calls, you allow one scope to see variables from another scope. Technically, this trick should be called nested lexical scopes, but many Ruby coders refer to it simply as “flattening the scope,” meaning that the two scopes share variables as if the scopes were squeezed together. For short, you can call this spell a Flat Scope.\n\n39) Once you know about Flat Scopes (83), you can do pretty much whatever you want with scopes. For example, assume that you want to share a variable among a few methods, and you don’t want anybody else to see that variable. You can do that by defining all the methods in the same Flat Scope as the variable:\n\n```ruby\ndef define_methods\n  shared = 0\n  Kernel.send :define_method, :counter do\n    shared\n  end\n\n  Kernel.send :define_method, :inc do |x|\n    shared += x\n  end\nend\n\nMuốn chỉ share variable cho 1 vài method nhất định, dùng các phương thức support bởi kernel và gọi đây là **Flat Scope**.\n\n```\n\n### instance_eval()\n\n```ruby\nv = 2\nobj.instance_eval { @v = v }\nobj.instance_eval { @v } # => 2\n```\n\n40) The three lines in the previous example are evaluated in the same Flat Scope (83), so they can all access the local variable v—but the blocks are evaluated with the object as self, so they can also access obj’s instance variable @v. In all these cases, you can call the block that you pass to instance_eval a Context Probe, because it’s like a snippet of code that you dip inside an object to do Spell: Context Probe something in there\n\n41) To solve this problem Ruby provides the standard library class Proc. \nA Proc isa block that has been turned into an object. You can create a Proc by passing\nthe block to Proc.new\n\n### Callable Objects\n\n42) To attach a binding to the block, you can add one special argument to the method. This argument must be the last in the list of arguments and prefixed by an & sign.\n\n```ruby\ndef my_method(&the_proc)\n  the_proc\nend\n    \np = my_method {|name| \"Hello, #{name}!\" }\np.class # => Proc\np.call(\"Bill\") # => \"Hello, Bill!\"\n\n\ndef my_method(greeting)\n  \"#{greeting}, #{yield}!\"\nend\n    \nmy_proc = proc { \"Bill\" }\nmy_method(\"Hello\", &my_proc)\n```\nWhen you call my_method, the & converts my_proc to a block and passes that block to the method.\n\n43) There are two differences between procs and lambdas. One has to do with the return keyword, and the other concerns the checking of arguments.\n\nIn a lambda, return just returns from the lambda.\nIn a proc, return behaves differently. Rather than return from the proc, it returns from the scope where the proc itself was defined:\n\nlambdas tend to be less tolerant than procs (and regular blocks) when it comes to arguments. Call a lambda with the wrong arity, and it fails with an ArgumentError. On the other hand, a proc fits the argument list to its own expectations:\n\n```ruby\nclass MyClass\n  def initialize(value)\n    @x = value\n  end\n    \n  def my_method\n    @x\n  end\nend\n    \nobject = MyClass.new(1)\nm = object.method :my_method\nm.call # => 1\n```\n\n44) By calling Kernel#method, you get the method itself as a Method object, which you can later execute with Method#call.\n\n### Writing a Domain-Specific Language\n\nN/A\n\n## CLASS DEFINITIONS\n\n### Class Definitions Demystified\n\n### Singleton Methods\n\n### Singleton Classes\n\n### Method Wrappers\n\n45) At the top level of your program, the current class is Object, the class of main. (**That’s why, if you define a method at the top level, that method becomes an instance method of Object.**)\n\n46) Module#class_eval is very different from BasicObject#instance_eval, which you learned about earlier in instance_eval(), on page 85. instance_eval only changes self, **while class_eval changes both self and the current class.**\n\n```ruby\ndef add_method_to(a_class)\n  a_class.class_eval do\n    def m; 'Hello!'; end\n  end\nend\n\nadd_method_to String\n\"abc\".m # => \"Hello!\"\n```\n","source":"_posts/meta-programming-ruby.md","raw":"---\ntitle: \"Book Notes: Mateprograming Ruby 2\"\ndate: 2019-09-21\ndraft: false\ntags: [\"ruby\"]\ncategories: [\"til\"]\nmytag: \"#TIL\"\n---\n\n## IMAGES\n\n![hoa](/images/meta2/1.png)\n\n![hoa](/images/meta2/2.png)\n\n![hoa](/images/meta2/3.png)\n\n![hoa](/images/meta2/4.png)\n\n![hoa](/images/meta2/5.png)\n\n<!-- ![hoa](/images/meta2/6.png) -->\n\n![hoa](/images/meta2/7.png)\n\n![hoa](/images/meta2/8.png)\n\n![hoa](/images/meta2/9.png)\n\n\n\n## RUBY OBJECT MODEL\n\n### Open Classes\n\n\n`rails g model Movie title:string director:string`\n\n```ruby\nclass Movie < ActiveRecord:Base; end\n```\n\n1) What about methods such as `title=` and title, which access object attributes (accessor methods for short)? This is where metaprogramming comes in: Bob doesn’t have to write those methods. Active Record defines them automatically, after inferring their names from the database schema. ActiveRecord::Base reads the schema at runtime, discovers that the movies table has two columns named title and director, and defines accessor methods for two attributes of the same name. This means that Active Record defines methods such as `Movie#title` and `Movie#director=` out of thin air while the program runs.\n\nOpen Class\n```ruby\nclass Numeric\n  def to_money(currency = nil)\n    Money.from_numeric(self, currency || Money.default_currency)\n  end\nend\n```\n\n2) As cool as they are, however, Open Classes have a dark side—one that you’re about to experience.\n\n| This can override the method of superclass and make wrong result in somewhere (monkeypath). So we need be careful when set the name for the override method.\n\n### Inside the Object Model\n\n3) Objects that share the same class also share the same methods, so the methods must be stored in the class, not the object.\n\n4) The \"false\" argument here means: ignore inherited methods Class.instance_methods(false) # => [:allocate, :new, :superclass]\n\n5) The superclass of Class is Module—which is to say, every class is also a module.\nTo be precise, a class is a module with three additional instance methods (new, allocate, and superclass)\n\n6) All the constants in a program are arranged in a tree similar to a file system.\n\n7) The Module class also provides an instance method and a class method that, confusingly, are both called constants.\n\n8) What’s an object? It’s a bunch of instance variables, plus a link to a class. The object’s methods don’t live in the object—they live in the object’s class, where they’re called the instance methods of the class.\n\n9) What’s a class? It’s an object (an instance of Class), plus a list of instance methods and a link to a superclass. Class is a subclass of Module, so a class is also a module\n\n10) These are instance methods of the Class class. Like any object, a class has its own methods, such as new. Also like any object, classes must be accessed through references. You already have a constant reference to each class: the class’s name.\n\n11) Using load, however, has a side effect. The motd.rb file probably defines variables and classes. Although variables fall out of scope when the file has finished loading, constants don’t. As a result, motd.rb can pollute your program with the names of its own constants—in particular, class names. You can force motd.rb to keep its constants to itself by passing a second, optional argument to load: `load('motd.rb', true)` If you load a file this way, Ruby creates **an anonymous module**, uses that module as a Namespace to contain all the constants from motd.rb, and then destroys the module. The require method is quite similar to load, but it’s meant for a different purpose. You use load to execute code, and you use require to import libraries. That’s why require has no second argument: those leftover class names are probably the reason why you imported the file in the first place. Also, that’s why require tries only once to load each file, while load executes the file again every time you call it.\n\nWhat’s the class of Object?\nWhat’s the superclass of Module?\nWhat’s the class of Class?\n\n### What Happens When You Call a Method?\n\n12) When you call a method, Ruby does two things:\n1. It finds the method. This is a process called method lookup.\n2. It executes the method. To do that, Ruby needs something called self.\n\n13) Before you look at a more complicated example, though, you need to know about two new concepts: the receiver and the ancestors chain.The receiver is the object that you call a method on. For example, if you write `my_string.reverse()`, then `my_string` is the receiver. To understand the concept of an ancestors chain, look at any Ruby class. Then imagine moving from the class into its superclass, then into the superclass’s superclass, and so on, until you reach BasicObject, the root of the Ruby class hierarchy. The path of classes you just traversed is the ancestors chain of the class.\nMySubclass.ancestors # => [MySubclass, MyClass, Object, Kernel, BasicObject]\n\n14) When you include a module in a class (or even in another module), Ruby inserts the module in the ancestors chain, right above the including class itself:\n\n15) Starting from Ruby 2.0, you also have a second way to insert a module in a class’s chain of ancestors: **the prepend method**. It works like include, but it inserts the module below the including class (sometimes called the includer).\n\n```ruby\nclass C2\n prepend M2\nend\nclass D2 < C2; end\nD2.ancestors # => [D2, M2, C2, Object, Kernel, BasicObject]\n```\n\n16) This is true every time you include or prepend a module: if that module is already in the chain, Ruby silently ignores the second inclusion.\n\nKernel.private_instance_methods.grep(/^pr/) # => [:printf, :print, :proc]\n\n17) The trick here is that class Object includes Kernel, so Kernel gets into every object’s ancestors chain. Every line of Ruby is always executed inside an object, so you can call the instance methods in Kernel from anywhere.\n\n18) You can take advantage of this mechanism yourself: if you add a method to Spell: Kernel Method Kernel, this Kernel Method will be available to all objects. To prove that Kernel Methods are actually useful, you can look at the way some Ruby libraries use them.\n\n19) Every line of Ruby code is executed inside an object—the so-called current object. The current object is also known as self, because you can access it with the self keyword.\n\n20) Only one object can take the role of self at a given time, but no object holds that role for a long time. In particular, when you call a method, the receiver becomes self. From that moment on, all instance variables are instance variables of self, and all methods called without an explicit receiver are called on self.\n\n21) As soon as you start a Ruby program, you’re sitting within an object named main that the Ruby interpreter created for you. This object is sometimes called the top-level context, because it’s the object you’re in when you’re at the top level of the call stack: either you haven’t called any method yet or all the methods that you called have returned.\n\n22) This code refines the String class with a new to_alphanumeric method. Differently from a regular Open Class, however, a Refinement is not active by default. If you try to call   `String#to_alphanumeric`, you’ll get an error: `\"my *1st* refinement!\".to_alphanumeric ❮ NoMethodError: undefined method 'to_alphanumeric' [...]` To activate the changes, you have to do so explicitly, with the using method: using StringExtensions\n\n23) you can call refine in a regular module, but you cannot call it in a class, even if a class is itself a module.\n\n## METHODS\n\n### Dynamic Methods\n\n24) If that kind of breaching of encapsulation makes you uneasy, you can use public_send instead. It’s like send, but it makes a point of respecting the receiver’s privacy. Be prepared, however, for the fact that Ruby code in the wild rarely bothers with this concern. If anything, a lot of Ruby programmers use send exactly because it allows calling private methods, not in spite of that\n\n```ruby\nclass DS\n  def initialize # connect to data source...\n  def get_cpu_info(workstation_id) # ...\n  def get_cpu_price(workstation_id) # ...\n  def get_mouse_info(workstation_id) # ...\n  def get_mouse_price(workstation_id) # ...\n  def get_keyboard_info(workstation_id) # ...\n  def get_keyboard_price(workstation_id) # ...\n  def get_display_info(workstation_id) # ...\n  def get_display_price(workstation_id) # ...\n  # ...and so on\nend\n```\n\n```ruby\nclass Computer\n  def initialize(computer_id, data_source)\n    @id = computer_id\n    @data_source = data_source\n  end\n  \n  def mouse\n    info = @data_source.get_mouse_info(@id)\n    price = @data_source.get_mouse_price(@id)\n    result = \"Mouse: #{info} ($#{price})\"\n    return \"* #{result}\" if price >= 100\n    result\n  end\n   \n  def cpu\n    info = @data_source.get_cpu_info(@id)\n    price = @data_source.get_cpu_price(@id)\n    result = \"Cpu: #{info} ($#{price})\"\n    return \"* #{result}\" if price >= 100\n    result\n  end\n    \n  def keyboard\n    info = @data_source.get_keyboard_info(@id)\n    price = @data_source.get_keyboard_price(@id)\n    result = \"Keyboard: #{info} ($#{price})\"\n    return \"* #{result}\" if price >= 100\n    result\n  end\n   # ...\nend\n```\n\nDYNAMIC DISPATCH\n\n```ruby\nclass Computer\n  def initialize(computer_id, data_source)\n  @id = computer_id\n  @data_source = data_source\n  end\n  \n  def mouse\n    component :mouse\n  end\n\n  def cpu\n    component :cpu\n  end\n    \n  def keyboard\n    component :keyboard\n  end\n    \n  def component(name)\n    info = @data_source.send \"get_#{name}_info\", @id\n    price = @data_source.send \"get_#{name}_price\", @id\n    result = \"#{name.capitalize}: #{info} ($#{price})\"\n    return \"* #{result}\" if price >= 100\n    result\n  end\nend\n```\n\nDYNAMIC METHOD\n\n```ruby\nclass Computer\n  def initialize(computer_id, data_source)\n    @id = computer_id\n    @data_source = data_source\n  end\n  \n  def self.define_component(name)\n    define_method(name) do\n      info = @data_source.send \"get_#{name}_info\", @id\n      price = @data_source.send \"get_#{name}_price\", @id\n      result = \"#{name.capitalize}: #{info} ($#{price})\"\n      return \"* #{result}\" if price >= 100\n      result\n    end\n  end\n     \n  define_component :mouse\n  define_component :cpu\n  define_component :keyboard\nend\n\n```\n\nBEST WAY\n\n```ruby\nclass Computer\n  def initialize(computer_id, data_source)\n    @id = computer_id\n    @data_source = data_source\n    data_source.methods.grep(/^get_(.*)_info$/) { Computer.define_component $1 }\n  end\n    \n  def self.define_component(name)\n    define_method(name) do\n      # ...\n    end\n  end\nend\n```\n\n### method_missing\n\n25) The Hashie gem contains a little bit of magic called Hashie::Mash. A Mash is a more powerful version of Ruby’s standard OpenStruct class: a hash-like object whose attributes work like Ruby variables. If you want a new attribute, just assign a value to the attribute, and it will spring into existence:\n\n```ruby\nrequire 'hashie'\nicecream = Hashie::Mash.new\nicecream.flavor = \"strawberry\"\nicecream.flavor # => \"strawberry\"\n```\n\nWhat hanppen inside?\n\n```ruby\nmodule Hashie\n  class Mash < Hashie::Hash\n    def method_missing(method_name, *args, &blk)\n      return self.[](method_name, &blk) if key?(method_name)\n      match = method_name.to_s.match(/(.*?)([?=!]?)$/)\n      case match[2]\n      when \"=\"\n      self[match[1]] = args.first\n      # ...\n      else\n      default(method_name, *args, &blk)\n      end\n    end\n    # ...\n  end\nend\n```\n\n26) **Ghost Methods** (57) are usually icing on the cake, but some objects actually rely almost exclusively on them. These objects are often wrappers for something else—maybe another object, a web service, or code written in a different language. They collect method calls through method_missing and forward them to the wrapped object. Let’s look at a complex real-life example.\n\nRefactor:\n\n```ruby\nclass Computer\n  def initialize(computer_id, data_source)\n    @id = computer_id\n    @data_source = data_source\n  end\n  \n  def method_missing(name)\n    super if !@data_source.respond_to?(\"get_#{name}_info\")\n    info = @data_source.send(\"get_#{name}_info\", @id)\n    price = @data_source.send(\"get_#{name}_price\", @id)\n    result = \"#{name.capitalize}: #{info} ($#{price})\"\n    return \"* #{result}\" if price >= 100\n    result\n  end\nend\n```\n\n27) Khi dùng ghost method, giả sử trong method_missing chúng ta muốn tạo ra 1 method x, tuy nhiên x lại có trong cây kế thừa => x trong method missing sẽ không được gọi. Lúc này ta cần Blank Slates.\n\n### Blank Slates\n\n28) If you don’t need the inherited method, you can fix the problem by removing it. While you’re at it, you might want to remove most methods from the class, preventing such name clashes from ever happening again. A skinny class Spell: Blank Slate with a minimal number of methods is called a Blank Slate. As it turns out, Ruby has a ready-made Blank Slate for you to use\n\n29) If you don’t specify a superclass, your classes inherit by default from Object, which is itself a subclass of BasicObject. If you want a Blank Slate (66), you can inherit directly from BasicObject instead. For example, if Computer inherited directly from BasicObject, then it wouldn’t have a problematic display method.\n=> không lấy nhầm method trong class Object, vì lớp Computer được kế thừa trực tiếp từ BasicObject\n\n30) Inheriting from BasicObject is the quicker way to define a Blank Slate in Ruby.\n`class Computer < BasicObject`\n\n31) You can remove a method from a class by using either Module#undef_method or Module#remove_method. The drastic undef_method removes any method, including the inherited ones. The kinder remove_method removes the method from the receiver, but it leaves inherited methods alone. Let’s look at a real-life library that uses undef_method to create a Blank Slate.\n\n```ruby\nclass BlankSlate\n  # Hide the method named +name+ in the BlankSlate class. Don't\n  # hide +instance_eval+ or any method beginning with \"__\".\n  def self.hide(name)\n    # ...\n    if instance_methods.include?(name._blankslate_as_name) &&\n      name !~ /^(__|instance_eval$)/\n      undef_method name\n    end\n  end\n  # ...\n  instance_methods.each { |m| hide(m) }\nend\n```\n\n32) **use Dynamic Methods if you can and Ghost Methods if you have to**\n\n\n## BLOCKS\n\n### Blocks Are Closures\n\n```ruby\ndef my_method\n  x = \"Goodbye\"\n  yield(\"cruel\")\nend\n\nx = \"Hello\"\nmy_method {|y| \"#{x}, #{y} world\" } # => \"Hello, cruel world\"\n```\n\n33) When you create the block, you capture the local bindings, such as x. Then you pass the block to a method that has its own separate set of bindings. In the previous example, those bindings also include a variable named x. Still, the code in the block sees the x that was around when the block was defined, not the method’s x, which is not visible at all in the block.\n\n34) khi gọi 1 block, nó lưu vết lại các ràng buộc cục bộ nơi block được gọi, sau đó block được truyền cho 1 method, mà method đó sẽ có các ràng cuộc cục bộ của riêng nó, và block sẽ sử dụng ràng buộc của mình (ví dụ như biến x ở trên).\n\n```ruby\ndef just_yield\n  yield\nend\n\ntop_level_variable = 1\njust_yield do\n  top_level_variable += 1\n  local_to_block = 1\nend\n\ntop_level_variable # => 2\nlocal_to_block # => Error!\n```\nTrong ví dụ này thì local_to_block là 1 binding thuộc block, và ra ngoài ngữ cảnh block nó không có giá trị.\n\n35) This example shows how scope changes as your program runs, tracking the names of bindings with the Kernel#local_variables method:\n\n```ruby\nv1 = 1\n\nclass MyClass\n  v2 = 2\n  local_variables # => [:v2]\n  def my_method\n    v3 = 3\n    local_variables\n  end\n  local_variables # => [:v2]\nend\n  \nobj = MyClass.new\nobj.my_method # => [:v3]\nobj.my_method # => [:v3]\nlocal_variables # => [:v1, :obj]\n```\n\n36) There are exactly three places where a program leaves the previous scope behind and opens a new one:\nClass definitions\nModule definitions\nMethods\n\n37) Scope changes whenever the program enters (or exits) a class or module definition or a method. These three borders are marked by the keywords class, module, and def, respectively. Each of these keywords acts like a **Scope Gate**.\n\n```ruby\nv1 = 1\nclass MyClass # SCOPE GATE: entering class\n  v2 = 2\n  local_variables # => [\"v2\"]\n  def my_method # SCOPE GATE: entering def\n    v3 = 3\n    local_variables\n  end # SCOPE GATE: leaving def\n  \n  local_variables # => [\"v2\"]\nend # SCOPE GATE: leaving class\n  \nobj = MyClass.new\nobj.my_method # => [:v3]\nlocal_variables # => [:v1, :obj]\n```\n\n```ruby\nmy_var = \"Success\"\n  \nMyClass = Class.new do\n  \"#{my_var} in the class definition\"\n  \n  define_method :my_method do\n    \"#{my_var} in the method\"\n  end\nend\n```\n\nkhai báo thông thường thì my_var không thể sử dụng trong class hoặc def (vì nó mở ra  1 scope mới). Nên dùng call method gọi là **flat scope**.\n\n38) If you replace Scope Gates with method calls, you allow one scope to see variables from another scope. Technically, this trick should be called nested lexical scopes, but many Ruby coders refer to it simply as “flattening the scope,” meaning that the two scopes share variables as if the scopes were squeezed together. For short, you can call this spell a Flat Scope.\n\n39) Once you know about Flat Scopes (83), you can do pretty much whatever you want with scopes. For example, assume that you want to share a variable among a few methods, and you don’t want anybody else to see that variable. You can do that by defining all the methods in the same Flat Scope as the variable:\n\n```ruby\ndef define_methods\n  shared = 0\n  Kernel.send :define_method, :counter do\n    shared\n  end\n\n  Kernel.send :define_method, :inc do |x|\n    shared += x\n  end\nend\n\nMuốn chỉ share variable cho 1 vài method nhất định, dùng các phương thức support bởi kernel và gọi đây là **Flat Scope**.\n\n```\n\n### instance_eval()\n\n```ruby\nv = 2\nobj.instance_eval { @v = v }\nobj.instance_eval { @v } # => 2\n```\n\n40) The three lines in the previous example are evaluated in the same Flat Scope (83), so they can all access the local variable v—but the blocks are evaluated with the object as self, so they can also access obj’s instance variable @v. In all these cases, you can call the block that you pass to instance_eval a Context Probe, because it’s like a snippet of code that you dip inside an object to do Spell: Context Probe something in there\n\n41) To solve this problem Ruby provides the standard library class Proc. \nA Proc isa block that has been turned into an object. You can create a Proc by passing\nthe block to Proc.new\n\n### Callable Objects\n\n42) To attach a binding to the block, you can add one special argument to the method. This argument must be the last in the list of arguments and prefixed by an & sign.\n\n```ruby\ndef my_method(&the_proc)\n  the_proc\nend\n    \np = my_method {|name| \"Hello, #{name}!\" }\np.class # => Proc\np.call(\"Bill\") # => \"Hello, Bill!\"\n\n\ndef my_method(greeting)\n  \"#{greeting}, #{yield}!\"\nend\n    \nmy_proc = proc { \"Bill\" }\nmy_method(\"Hello\", &my_proc)\n```\nWhen you call my_method, the & converts my_proc to a block and passes that block to the method.\n\n43) There are two differences between procs and lambdas. One has to do with the return keyword, and the other concerns the checking of arguments.\n\nIn a lambda, return just returns from the lambda.\nIn a proc, return behaves differently. Rather than return from the proc, it returns from the scope where the proc itself was defined:\n\nlambdas tend to be less tolerant than procs (and regular blocks) when it comes to arguments. Call a lambda with the wrong arity, and it fails with an ArgumentError. On the other hand, a proc fits the argument list to its own expectations:\n\n```ruby\nclass MyClass\n  def initialize(value)\n    @x = value\n  end\n    \n  def my_method\n    @x\n  end\nend\n    \nobject = MyClass.new(1)\nm = object.method :my_method\nm.call # => 1\n```\n\n44) By calling Kernel#method, you get the method itself as a Method object, which you can later execute with Method#call.\n\n### Writing a Domain-Specific Language\n\nN/A\n\n## CLASS DEFINITIONS\n\n### Class Definitions Demystified\n\n### Singleton Methods\n\n### Singleton Classes\n\n### Method Wrappers\n\n45) At the top level of your program, the current class is Object, the class of main. (**That’s why, if you define a method at the top level, that method becomes an instance method of Object.**)\n\n46) Module#class_eval is very different from BasicObject#instance_eval, which you learned about earlier in instance_eval(), on page 85. instance_eval only changes self, **while class_eval changes both self and the current class.**\n\n```ruby\ndef add_method_to(a_class)\n  a_class.class_eval do\n    def m; 'Hello!'; end\n  end\nend\n\nadd_method_to String\n\"abc\".m # => \"Hello!\"\n```\n","slug":"meta-programming-ruby","published":1,"updated":"2019-11-13T11:59:42.647Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4e7suhh003k5rrscjtdbts0","content":"<h2 id=\"IMAGES\"><a href=\"#IMAGES\" class=\"headerlink\" title=\"IMAGES\"></a>IMAGES</h2><p><img src=\"/images/meta2/1.png\" alt=\"hoa\"></p>\n<p><img src=\"/images/meta2/2.png\" alt=\"hoa\"></p>\n<p><img src=\"/images/meta2/3.png\" alt=\"hoa\"></p>\n<p><img src=\"/images/meta2/4.png\" alt=\"hoa\"></p>\n<p><img src=\"/images/meta2/5.png\" alt=\"hoa\"></p>\n<!-- ![hoa](/images/meta2/6.png) -->\n\n<p><img src=\"/images/meta2/7.png\" alt=\"hoa\"></p>\n<p><img src=\"/images/meta2/8.png\" alt=\"hoa\"></p>\n<p><img src=\"/images/meta2/9.png\" alt=\"hoa\"></p>\n<h2 id=\"RUBY-OBJECT-MODEL\"><a href=\"#RUBY-OBJECT-MODEL\" class=\"headerlink\" title=\"RUBY OBJECT MODEL\"></a>RUBY OBJECT MODEL</h2><h3 id=\"Open-Classes\"><a href=\"#Open-Classes\" class=\"headerlink\" title=\"Open Classes\"></a>Open Classes</h3><p><code>rails g model Movie title:string director:string</code></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Movie</span> &lt; ActiveRecord:<span class=\"title\">Base</span>;</span> <span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>1) What about methods such as <code>title=</code> and title, which access object attributes (accessor methods for short)? This is where metaprogramming comes in: Bob doesn’t have to write those methods. Active Record defines them automatically, after inferring their names from the database schema. ActiveRecord::Base reads the schema at runtime, discovers that the movies table has two columns named title and director, and defines accessor methods for two attributes of the same name. This means that Active Record defines methods such as <code>Movie#title</code> and <code>Movie#director=</code> out of thin air while the program runs.</p>\n<p>Open Class</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Numeric</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_money</span><span class=\"params\">(currency = <span class=\"literal\">nil</span>)</span></span></span><br><span class=\"line\">    Money.from_numeric(<span class=\"keyword\">self</span>, currency <span class=\"params\">||</span> Money.default_currency)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>2) As cool as they are, however, Open Classes have a dark side—one that you’re about to experience.</p>\n<p>| This can override the method of superclass and make wrong result in somewhere (monkeypath). So we need be careful when set the name for the override method.</p>\n<h3 id=\"Inside-the-Object-Model\"><a href=\"#Inside-the-Object-Model\" class=\"headerlink\" title=\"Inside the Object Model\"></a>Inside the Object Model</h3><p>3) Objects that share the same class also share the same methods, so the methods must be stored in the class, not the object.</p>\n<p>4) The “false” argument here means: ignore inherited methods Class.instance_methods(false) # =&gt; [:allocate, :new, :superclass]</p>\n<p>5) The superclass of Class is Module—which is to say, every class is also a module.<br>To be precise, a class is a module with three additional instance methods (new, allocate, and superclass)</p>\n<p>6) All the constants in a program are arranged in a tree similar to a file system.</p>\n<p>7) The Module class also provides an instance method and a class method that, confusingly, are both called constants.</p>\n<p>8) What’s an object? It’s a bunch of instance variables, plus a link to a class. The object’s methods don’t live in the object—they live in the object’s class, where they’re called the instance methods of the class.</p>\n<p>9) What’s a class? It’s an object (an instance of Class), plus a list of instance methods and a link to a superclass. Class is a subclass of Module, so a class is also a module</p>\n<p>10) These are instance methods of the Class class. Like any object, a class has its own methods, such as new. Also like any object, classes must be accessed through references. You already have a constant reference to each class: the class’s name.</p>\n<p>11) Using load, however, has a side effect. The motd.rb file probably defines variables and classes. Although variables fall out of scope when the file has finished loading, constants don’t. As a result, motd.rb can pollute your program with the names of its own constants—in particular, class names. You can force motd.rb to keep its constants to itself by passing a second, optional argument to load: <code>load(&#39;motd.rb&#39;, true)</code> If you load a file this way, Ruby creates <strong>an anonymous module</strong>, uses that module as a Namespace to contain all the constants from motd.rb, and then destroys the module. The require method is quite similar to load, but it’s meant for a different purpose. You use load to execute code, and you use require to import libraries. That’s why require has no second argument: those leftover class names are probably the reason why you imported the file in the first place. Also, that’s why require tries only once to load each file, while load executes the file again every time you call it.</p>\n<p>What’s the class of Object?<br>What’s the superclass of Module?<br>What’s the class of Class?</p>\n<h3 id=\"What-Happens-When-You-Call-a-Method\"><a href=\"#What-Happens-When-You-Call-a-Method\" class=\"headerlink\" title=\"What Happens When You Call a Method?\"></a>What Happens When You Call a Method?</h3><p>12) When you call a method, Ruby does two things:</p>\n<ol>\n<li>It finds the method. This is a process called method lookup.</li>\n<li>It executes the method. To do that, Ruby needs something called self.</li>\n</ol>\n<p>13) Before you look at a more complicated example, though, you need to know about two new concepts: the receiver and the ancestors chain.The receiver is the object that you call a method on. For example, if you write <code>my_string.reverse()</code>, then <code>my_string</code> is the receiver. To understand the concept of an ancestors chain, look at any Ruby class. Then imagine moving from the class into its superclass, then into the superclass’s superclass, and so on, until you reach BasicObject, the root of the Ruby class hierarchy. The path of classes you just traversed is the ancestors chain of the class.<br>MySubclass.ancestors # =&gt; [MySubclass, MyClass, Object, Kernel, BasicObject]</p>\n<p>14) When you include a module in a class (or even in another module), Ruby inserts the module in the ancestors chain, right above the including class itself:</p>\n<p>15) Starting from Ruby 2.0, you also have a second way to insert a module in a class’s chain of ancestors: <strong>the prepend method</strong>. It works like include, but it inserts the module below the including class (sometimes called the includer).</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C2</span></span></span><br><span class=\"line\"> prepend M2</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D2</span> &lt; C2;</span> <span class=\"keyword\">end</span></span><br><span class=\"line\">D2.ancestors <span class=\"comment\"># =&gt; [D2, M2, C2, Object, Kernel, BasicObject]</span></span><br></pre></td></tr></table></figure>\n\n<p>16) This is true every time you include or prepend a module: if that module is already in the chain, Ruby silently ignores the second inclusion.</p>\n<p>Kernel.private_instance_methods.grep(/^pr/) # =&gt; [:printf, :print, :proc]</p>\n<p>17) The trick here is that class Object includes Kernel, so Kernel gets into every object’s ancestors chain. Every line of Ruby is always executed inside an object, so you can call the instance methods in Kernel from anywhere.</p>\n<p>18) You can take advantage of this mechanism yourself: if you add a method to Spell: Kernel Method Kernel, this Kernel Method will be available to all objects. To prove that Kernel Methods are actually useful, you can look at the way some Ruby libraries use them.</p>\n<p>19) Every line of Ruby code is executed inside an object—the so-called current object. The current object is also known as self, because you can access it with the self keyword.</p>\n<p>20) Only one object can take the role of self at a given time, but no object holds that role for a long time. In particular, when you call a method, the receiver becomes self. From that moment on, all instance variables are instance variables of self, and all methods called without an explicit receiver are called on self.</p>\n<p>21) As soon as you start a Ruby program, you’re sitting within an object named main that the Ruby interpreter created for you. This object is sometimes called the top-level context, because it’s the object you’re in when you’re at the top level of the call stack: either you haven’t called any method yet or all the methods that you called have returned.</p>\n<p>22) This code refines the String class with a new to_alphanumeric method. Differently from a regular Open Class, however, a Refinement is not active by default. If you try to call   <code>String#to_alphanumeric</code>, you’ll get an error: <code>&quot;my *1st* refinement!&quot;.to_alphanumeric ❮ NoMethodError: undefined method &#39;to_alphanumeric&#39; [...]</code> To activate the changes, you have to do so explicitly, with the using method: using StringExtensions</p>\n<p>23) you can call refine in a regular module, but you cannot call it in a class, even if a class is itself a module.</p>\n<h2 id=\"METHODS\"><a href=\"#METHODS\" class=\"headerlink\" title=\"METHODS\"></a>METHODS</h2><h3 id=\"Dynamic-Methods\"><a href=\"#Dynamic-Methods\" class=\"headerlink\" title=\"Dynamic Methods\"></a>Dynamic Methods</h3><p>24) If that kind of breaching of encapsulation makes you uneasy, you can use public_send instead. It’s like send, but it makes a point of respecting the receiver’s privacy. Be prepared, however, for the fact that Ruby code in the wild rarely bothers with this concern. If anything, a lot of Ruby programmers use send exactly because it allows calling private methods, not in spite of that</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DS</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span> <span class=\"comment\"># connect to data source...</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_cpu_info</span><span class=\"params\">(workstation_id)</span></span> <span class=\"comment\"># ...</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_cpu_price</span><span class=\"params\">(workstation_id)</span></span> <span class=\"comment\"># ...</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_mouse_info</span><span class=\"params\">(workstation_id)</span></span> <span class=\"comment\"># ...</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_mouse_price</span><span class=\"params\">(workstation_id)</span></span> <span class=\"comment\"># ...</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_keyboard_info</span><span class=\"params\">(workstation_id)</span></span> <span class=\"comment\"># ...</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_keyboard_price</span><span class=\"params\">(workstation_id)</span></span> <span class=\"comment\"># ...</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_display_info</span><span class=\"params\">(workstation_id)</span></span> <span class=\"comment\"># ...</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_display_price</span><span class=\"params\">(workstation_id)</span></span> <span class=\"comment\"># ...</span></span><br><span class=\"line\">  <span class=\"comment\"># ...and so on</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Computer</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(computer_id, data_source)</span></span></span><br><span class=\"line\">    @id = computer_id</span><br><span class=\"line\">    @data_source = data_source</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mouse</span></span></span><br><span class=\"line\">    info = @data_source.get_mouse_info(@id)</span><br><span class=\"line\">    price = @data_source.get_mouse_price(@id)</span><br><span class=\"line\">    result = <span class=\"string\">\"Mouse: <span class=\"subst\">#&#123;info&#125;</span> ($<span class=\"subst\">#&#123;price&#125;</span>)\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"* <span class=\"subst\">#&#123;result&#125;</span>\"</span> <span class=\"keyword\">if</span> price &gt;= <span class=\"number\">100</span></span><br><span class=\"line\">    result</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cpu</span></span></span><br><span class=\"line\">    info = @data_source.get_cpu_info(@id)</span><br><span class=\"line\">    price = @data_source.get_cpu_price(@id)</span><br><span class=\"line\">    result = <span class=\"string\">\"Cpu: <span class=\"subst\">#&#123;info&#125;</span> ($<span class=\"subst\">#&#123;price&#125;</span>)\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"* <span class=\"subst\">#&#123;result&#125;</span>\"</span> <span class=\"keyword\">if</span> price &gt;= <span class=\"number\">100</span></span><br><span class=\"line\">    result</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">keyboard</span></span></span><br><span class=\"line\">    info = @data_source.get_keyboard_info(@id)</span><br><span class=\"line\">    price = @data_source.get_keyboard_price(@id)</span><br><span class=\"line\">    result = <span class=\"string\">\"Keyboard: <span class=\"subst\">#&#123;info&#125;</span> ($<span class=\"subst\">#&#123;price&#125;</span>)\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"* <span class=\"subst\">#&#123;result&#125;</span>\"</span> <span class=\"keyword\">if</span> price &gt;= <span class=\"number\">100</span></span><br><span class=\"line\">    result</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">   <span class=\"comment\"># ...</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>DYNAMIC DISPATCH</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Computer</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(computer_id, data_source)</span></span></span><br><span class=\"line\">  @id = computer_id</span><br><span class=\"line\">  @data_source = data_source</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mouse</span></span></span><br><span class=\"line\">    component <span class=\"symbol\">:mouse</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cpu</span></span></span><br><span class=\"line\">    component <span class=\"symbol\">:cpu</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">keyboard</span></span></span><br><span class=\"line\">    component <span class=\"symbol\">:keyboard</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">component</span><span class=\"params\">(name)</span></span></span><br><span class=\"line\">    info = @data_source.send <span class=\"string\">\"get_<span class=\"subst\">#&#123;name&#125;</span>_info\"</span>, @id</span><br><span class=\"line\">    price = @data_source.send <span class=\"string\">\"get_<span class=\"subst\">#&#123;name&#125;</span>_price\"</span>, @id</span><br><span class=\"line\">    result = <span class=\"string\">\"<span class=\"subst\">#&#123;name.capitalize&#125;</span>: <span class=\"subst\">#&#123;info&#125;</span> ($<span class=\"subst\">#&#123;price&#125;</span>)\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"* <span class=\"subst\">#&#123;result&#125;</span>\"</span> <span class=\"keyword\">if</span> price &gt;= <span class=\"number\">100</span></span><br><span class=\"line\">    result</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>DYNAMIC METHOD</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Computer</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(computer_id, data_source)</span></span></span><br><span class=\"line\">    @id = computer_id</span><br><span class=\"line\">    @data_source = data_source</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">define_component</span><span class=\"params\">(name)</span></span></span><br><span class=\"line\">    define_method(name) <span class=\"keyword\">do</span></span><br><span class=\"line\">      info = @data_source.send <span class=\"string\">\"get_<span class=\"subst\">#&#123;name&#125;</span>_info\"</span>, @id</span><br><span class=\"line\">      price = @data_source.send <span class=\"string\">\"get_<span class=\"subst\">#&#123;name&#125;</span>_price\"</span>, @id</span><br><span class=\"line\">      result = <span class=\"string\">\"<span class=\"subst\">#&#123;name.capitalize&#125;</span>: <span class=\"subst\">#&#123;info&#125;</span> ($<span class=\"subst\">#&#123;price&#125;</span>)\"</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\"* <span class=\"subst\">#&#123;result&#125;</span>\"</span> <span class=\"keyword\">if</span> price &gt;= <span class=\"number\">100</span></span><br><span class=\"line\">      result</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">     </span><br><span class=\"line\">  define_component <span class=\"symbol\">:mouse</span></span><br><span class=\"line\">  define_component <span class=\"symbol\">:cpu</span></span><br><span class=\"line\">  define_component <span class=\"symbol\">:keyboard</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>BEST WAY</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Computer</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(computer_id, data_source)</span></span></span><br><span class=\"line\">    @id = computer_id</span><br><span class=\"line\">    @data_source = data_source</span><br><span class=\"line\">    data_source.methods.grep(<span class=\"regexp\">/^get_(.*)_info$/</span>) &#123; Computer.define_component $1 &#125;</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">define_component</span><span class=\"params\">(name)</span></span></span><br><span class=\"line\">    define_method(name) <span class=\"keyword\">do</span></span><br><span class=\"line\">      <span class=\"comment\"># ...</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"method-missing\"><a href=\"#method-missing\" class=\"headerlink\" title=\"method_missing\"></a>method_missing</h3><p>25) The Hashie gem contains a little bit of magic called Hashie::Mash. A Mash is a more powerful version of Ruby’s standard OpenStruct class: a hash-like object whose attributes work like Ruby variables. If you want a new attribute, just assign a value to the attribute, and it will spring into existence:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'hashie'</span></span><br><span class=\"line\">icecream = Hashie::Mash.new</span><br><span class=\"line\">icecream.flavor = <span class=\"string\">\"strawberry\"</span></span><br><span class=\"line\">icecream.flavor <span class=\"comment\"># =&gt; \"strawberry\"</span></span><br></pre></td></tr></table></figure>\n\n<p>What hanppen inside?</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">Hashie</span></span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mash</span> &lt; Hashie::Hash</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">method_missing</span><span class=\"params\">(method_name, *args, &amp;blk)</span></span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.[](method_name, &amp;blk) <span class=\"keyword\">if</span> key?(method_name)</span><br><span class=\"line\">      match = method_name.to_s.match(<span class=\"regexp\">/(.*?)([?=!]?)$/</span>)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> match[<span class=\"number\">2</span>]</span><br><span class=\"line\">      <span class=\"keyword\">when</span> <span class=\"string\">\"=\"</span></span><br><span class=\"line\">      <span class=\"keyword\">self</span>[match[<span class=\"number\">1</span>]] = args.first</span><br><span class=\"line\">      <span class=\"comment\"># ...</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">      default(method_name, *args, &amp;blk)</span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>26) <strong>Ghost Methods</strong> (57) are usually icing on the cake, but some objects actually rely almost exclusively on them. These objects are often wrappers for something else—maybe another object, a web service, or code written in a different language. They collect method calls through method_missing and forward them to the wrapped object. Let’s look at a complex real-life example.</p>\n<p>Refactor:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Computer</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(computer_id, data_source)</span></span></span><br><span class=\"line\">    @id = computer_id</span><br><span class=\"line\">    @data_source = data_source</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">method_missing</span><span class=\"params\">(name)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">super</span> <span class=\"keyword\">if</span> !@data_source.respond_to?(<span class=\"string\">\"get_<span class=\"subst\">#&#123;name&#125;</span>_info\"</span>)</span><br><span class=\"line\">    info = @data_source.send(<span class=\"string\">\"get_<span class=\"subst\">#&#123;name&#125;</span>_info\"</span>, @id)</span><br><span class=\"line\">    price = @data_source.send(<span class=\"string\">\"get_<span class=\"subst\">#&#123;name&#125;</span>_price\"</span>, @id)</span><br><span class=\"line\">    result = <span class=\"string\">\"<span class=\"subst\">#&#123;name.capitalize&#125;</span>: <span class=\"subst\">#&#123;info&#125;</span> ($<span class=\"subst\">#&#123;price&#125;</span>)\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"* <span class=\"subst\">#&#123;result&#125;</span>\"</span> <span class=\"keyword\">if</span> price &gt;= <span class=\"number\">100</span></span><br><span class=\"line\">    result</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>27) Khi dùng ghost method, giả sử trong method_missing chúng ta muốn tạo ra 1 method x, tuy nhiên x lại có trong cây kế thừa =&gt; x trong method missing sẽ không được gọi. Lúc này ta cần Blank Slates.</p>\n<h3 id=\"Blank-Slates\"><a href=\"#Blank-Slates\" class=\"headerlink\" title=\"Blank Slates\"></a>Blank Slates</h3><p>28) If you don’t need the inherited method, you can fix the problem by removing it. While you’re at it, you might want to remove most methods from the class, preventing such name clashes from ever happening again. A skinny class Spell: Blank Slate with a minimal number of methods is called a Blank Slate. As it turns out, Ruby has a ready-made Blank Slate for you to use</p>\n<p>29) If you don’t specify a superclass, your classes inherit by default from Object, which is itself a subclass of BasicObject. If you want a Blank Slate (66), you can inherit directly from BasicObject instead. For example, if Computer inherited directly from BasicObject, then it wouldn’t have a problematic display method.<br>=&gt; không lấy nhầm method trong class Object, vì lớp Computer được kế thừa trực tiếp từ BasicObject</p>\n<p>30) Inheriting from BasicObject is the quicker way to define a Blank Slate in Ruby.<br><code>class Computer &lt; BasicObject</code></p>\n<p>31) You can remove a method from a class by using either Module#undef_method or Module#remove_method. The drastic undef_method removes any method, including the inherited ones. The kinder remove_method removes the method from the receiver, but it leaves inherited methods alone. Let’s look at a real-life library that uses undef_method to create a Blank Slate.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlankSlate</span></span></span><br><span class=\"line\">  <span class=\"comment\"># Hide the method named +name+ in the BlankSlate class. Don't</span></span><br><span class=\"line\">  <span class=\"comment\"># hide +instance_eval+ or any method beginning with \"__\".</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">hide</span><span class=\"params\">(name)</span></span></span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> instance_methods.<span class=\"keyword\">include</span>?(name._blankslate_as_name) &amp;&amp;</span><br><span class=\"line\">      name !~ <span class=\"regexp\">/^(__|instance_eval$)/</span></span><br><span class=\"line\">      undef_method name</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"comment\"># ...</span></span><br><span class=\"line\">  instance_methods.each &#123; <span class=\"params\">|m|</span> hide(m) &#125;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>32) <strong>use Dynamic Methods if you can and Ghost Methods if you have to</strong></p>\n<h2 id=\"BLOCKS\"><a href=\"#BLOCKS\" class=\"headerlink\" title=\"BLOCKS\"></a>BLOCKS</h2><h3 id=\"Blocks-Are-Closures\"><a href=\"#Blocks-Are-Closures\" class=\"headerlink\" title=\"Blocks Are Closures\"></a>Blocks Are Closures</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_method</span></span></span><br><span class=\"line\">  x = <span class=\"string\">\"Goodbye\"</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span>(<span class=\"string\">\"cruel\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">x = <span class=\"string\">\"Hello\"</span></span><br><span class=\"line\">my_method &#123;<span class=\"params\">|y|</span> <span class=\"string\">\"<span class=\"subst\">#&#123;x&#125;</span>, <span class=\"subst\">#&#123;y&#125;</span> world\"</span> &#125; <span class=\"comment\"># =&gt; \"Hello, cruel world\"</span></span><br></pre></td></tr></table></figure>\n\n<p>33) When you create the block, you capture the local bindings, such as x. Then you pass the block to a method that has its own separate set of bindings. In the previous example, those bindings also include a variable named x. Still, the code in the block sees the x that was around when the block was defined, not the method’s x, which is not visible at all in the block.</p>\n<p>34) khi gọi 1 block, nó lưu vết lại các ràng buộc cục bộ nơi block được gọi, sau đó block được truyền cho 1 method, mà method đó sẽ có các ràng cuộc cục bộ của riêng nó, và block sẽ sử dụng ràng buộc của mình (ví dụ như biến x ở trên).</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">just_yield</span></span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">top_level_variable = <span class=\"number\">1</span></span><br><span class=\"line\">just_yield <span class=\"keyword\">do</span></span><br><span class=\"line\">  top_level_variable += <span class=\"number\">1</span></span><br><span class=\"line\">  local_to_block = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">top_level_variable <span class=\"comment\"># =&gt; 2</span></span><br><span class=\"line\">local_to_block <span class=\"comment\"># =&gt; Error!</span></span><br></pre></td></tr></table></figure>\n<p>Trong ví dụ này thì local_to_block là 1 binding thuộc block, và ra ngoài ngữ cảnh block nó không có giá trị.</p>\n<p>35) This example shows how scope changes as your program runs, tracking the names of bindings with the Kernel#local_variables method:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v1 = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span></span></span><br><span class=\"line\">  v2 = <span class=\"number\">2</span></span><br><span class=\"line\">  local_variables <span class=\"comment\"># =&gt; [:v2]</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_method</span></span></span><br><span class=\"line\">    v3 = <span class=\"number\">3</span></span><br><span class=\"line\">    local_variables</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">  local_variables <span class=\"comment\"># =&gt; [:v2]</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">  </span><br><span class=\"line\">obj = MyClass.new</span><br><span class=\"line\">obj.my_method <span class=\"comment\"># =&gt; [:v3]</span></span><br><span class=\"line\">obj.my_method <span class=\"comment\"># =&gt; [:v3]</span></span><br><span class=\"line\">local_variables <span class=\"comment\"># =&gt; [:v1, :obj]</span></span><br></pre></td></tr></table></figure>\n\n<p>36) There are exactly three places where a program leaves the previous scope behind and opens a new one:<br>Class definitions<br>Module definitions<br>Methods</p>\n<p>37) Scope changes whenever the program enters (or exits) a class or module definition or a method. These three borders are marked by the keywords class, module, and def, respectively. Each of these keywords acts like a <strong>Scope Gate</strong>.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v1 = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> <span class=\"comment\"># SCOPE GATE: entering class</span></span></span><br><span class=\"line\">  v2 = <span class=\"number\">2</span></span><br><span class=\"line\">  local_variables <span class=\"comment\"># =&gt; [\"v2\"]</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_method</span> <span class=\"comment\"># SCOPE GATE: entering def</span></span></span><br><span class=\"line\">    v3 = <span class=\"number\">3</span></span><br><span class=\"line\">    local_variables</span><br><span class=\"line\">  <span class=\"keyword\">end</span> <span class=\"comment\"># SCOPE GATE: leaving def</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  local_variables <span class=\"comment\"># =&gt; [\"v2\"]</span></span><br><span class=\"line\"><span class=\"keyword\">end</span> <span class=\"comment\"># SCOPE GATE: leaving class</span></span><br><span class=\"line\">  </span><br><span class=\"line\">obj = MyClass.new</span><br><span class=\"line\">obj.my_method <span class=\"comment\"># =&gt; [:v3]</span></span><br><span class=\"line\">local_variables <span class=\"comment\"># =&gt; [:v1, :obj]</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_var = <span class=\"string\">\"Success\"</span></span><br><span class=\"line\">  </span><br><span class=\"line\">MyClass = Class.new <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"string\">\"<span class=\"subst\">#&#123;my_var&#125;</span> in the class definition\"</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  define_method <span class=\"symbol\">:my_method</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"string\">\"<span class=\"subst\">#&#123;my_var&#125;</span> in the method\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>khai báo thông thường thì my_var không thể sử dụng trong class hoặc def (vì nó mở ra  1 scope mới). Nên dùng call method gọi là <strong>flat scope</strong>.</p>\n<p>38) If you replace Scope Gates with method calls, you allow one scope to see variables from another scope. Technically, this trick should be called nested lexical scopes, but many Ruby coders refer to it simply as “flattening the scope,” meaning that the two scopes share variables as if the scopes were squeezed together. For short, you can call this spell a Flat Scope.</p>\n<p>39) Once you know about Flat Scopes (83), you can do pretty much whatever you want with scopes. For example, assume that you want to share a variable among a few methods, and you don’t want anybody else to see that variable. You can do that by defining all the methods in the same Flat Scope as the variable:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">define_methods</span></span></span><br><span class=\"line\">  shared = <span class=\"number\">0</span></span><br><span class=\"line\">  Kernel.send <span class=\"symbol\">:define_method</span>, <span class=\"symbol\">:counter</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    shared</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  Kernel.send <span class=\"symbol\">:define_method</span>, <span class=\"symbol\">:inc</span> <span class=\"keyword\">do</span> <span class=\"params\">|x|</span></span><br><span class=\"line\">    shared += x</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">Muốn chỉ share variable cho <span class=\"number\">1</span> vài method nhất định, dùng các phương thức support bởi kernel và gọi đây là **Flat Scope**.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"instance-eval\"><a href=\"#instance-eval\" class=\"headerlink\" title=\"instance_eval()\"></a>instance_eval()</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v = <span class=\"number\">2</span></span><br><span class=\"line\">obj.instance_eval &#123; @v = v &#125;</span><br><span class=\"line\">obj.instance_eval &#123; @v &#125; <span class=\"comment\"># =&gt; 2</span></span><br></pre></td></tr></table></figure>\n\n<p>40) The three lines in the previous example are evaluated in the same Flat Scope (83), so they can all access the local variable v—but the blocks are evaluated with the object as self, so they can also access obj’s instance variable @v. In all these cases, you can call the block that you pass to instance_eval a Context Probe, because it’s like a snippet of code that you dip inside an object to do Spell: Context Probe something in there</p>\n<p>41) To solve this problem Ruby provides the standard library class Proc.<br>A Proc isa block that has been turned into an object. You can create a Proc by passing<br>the block to Proc.new</p>\n<h3 id=\"Callable-Objects\"><a href=\"#Callable-Objects\" class=\"headerlink\" title=\"Callable Objects\"></a>Callable Objects</h3><p>42) To attach a binding to the block, you can add one special argument to the method. This argument must be the last in the list of arguments and prefixed by an &amp; sign.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_method</span><span class=\"params\">(&amp;the_proc)</span></span></span><br><span class=\"line\">  the_proc</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\">p = my_method &#123;<span class=\"params\">|name|</span> <span class=\"string\">\"Hello, <span class=\"subst\">#&#123;name&#125;</span>!\"</span> &#125;</span><br><span class=\"line\">p<span class=\"class\">.<span class=\"keyword\">class</span> <span class=\"comment\"># =&gt; Proc</span></span></span><br><span class=\"line\">p.call(<span class=\"string\">\"Bill\"</span>) <span class=\"comment\"># =&gt; \"Hello, Bill!\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_method</span><span class=\"params\">(greeting)</span></span></span><br><span class=\"line\">  <span class=\"string\">\"<span class=\"subst\">#&#123;greeting&#125;</span>, <span class=\"subst\">#&#123;<span class=\"keyword\">yield</span>&#125;</span>!\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\">my_proc = proc &#123; <span class=\"string\">\"Bill\"</span> &#125;</span><br><span class=\"line\">my_method(<span class=\"string\">\"Hello\"</span>, &amp;my_proc)</span><br></pre></td></tr></table></figure>\n<p>When you call my_method, the &amp; converts my_proc to a block and passes that block to the method.</p>\n<p>43) There are two differences between procs and lambdas. One has to do with the return keyword, and the other concerns the checking of arguments.</p>\n<p>In a lambda, return just returns from the lambda.<br>In a proc, return behaves differently. Rather than return from the proc, it returns from the scope where the proc itself was defined:</p>\n<p>lambdas tend to be less tolerant than procs (and regular blocks) when it comes to arguments. Call a lambda with the wrong arity, and it fails with an ArgumentError. On the other hand, a proc fits the argument list to its own expectations:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(value)</span></span></span><br><span class=\"line\">    @x = value</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_method</span></span></span><br><span class=\"line\">    @x</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\">object = MyClass.new(<span class=\"number\">1</span>)</span><br><span class=\"line\">m = object.method <span class=\"symbol\">:my_method</span></span><br><span class=\"line\">m.call <span class=\"comment\"># =&gt; 1</span></span><br></pre></td></tr></table></figure>\n\n<p>44) By calling Kernel#method, you get the method itself as a Method object, which you can later execute with Method#call.</p>\n<h3 id=\"Writing-a-Domain-Specific-Language\"><a href=\"#Writing-a-Domain-Specific-Language\" class=\"headerlink\" title=\"Writing a Domain-Specific Language\"></a>Writing a Domain-Specific Language</h3><p>N/A</p>\n<h2 id=\"CLASS-DEFINITIONS\"><a href=\"#CLASS-DEFINITIONS\" class=\"headerlink\" title=\"CLASS DEFINITIONS\"></a>CLASS DEFINITIONS</h2><h3 id=\"Class-Definitions-Demystified\"><a href=\"#Class-Definitions-Demystified\" class=\"headerlink\" title=\"Class Definitions Demystified\"></a>Class Definitions Demystified</h3><h3 id=\"Singleton-Methods\"><a href=\"#Singleton-Methods\" class=\"headerlink\" title=\"Singleton Methods\"></a>Singleton Methods</h3><h3 id=\"Singleton-Classes\"><a href=\"#Singleton-Classes\" class=\"headerlink\" title=\"Singleton Classes\"></a>Singleton Classes</h3><h3 id=\"Method-Wrappers\"><a href=\"#Method-Wrappers\" class=\"headerlink\" title=\"Method Wrappers\"></a>Method Wrappers</h3><p>45) At the top level of your program, the current class is Object, the class of main. (<strong>That’s why, if you define a method at the top level, that method becomes an instance method of Object.</strong>)</p>\n<p>46) Module#class_eval is very different from BasicObject#instance_eval, which you learned about earlier in instance_eval(), on page 85. instance_eval only changes self, <strong>while class_eval changes both self and the current class.</strong></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_method_to</span><span class=\"params\">(a_class)</span></span></span><br><span class=\"line\">  a_class.class_eval <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">m</span>;</span> <span class=\"string\">'Hello!'</span>; <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">add_method_to String</span><br><span class=\"line\"><span class=\"string\">\"abc\"</span>.m <span class=\"comment\"># =&gt; \"Hello!\"</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"IMAGES\"><a href=\"#IMAGES\" class=\"headerlink\" title=\"IMAGES\"></a>IMAGES</h2><p><img src=\"/images/meta2/1.png\" alt=\"hoa\"></p>\n<p><img src=\"/images/meta2/2.png\" alt=\"hoa\"></p>\n<p><img src=\"/images/meta2/3.png\" alt=\"hoa\"></p>\n<p><img src=\"/images/meta2/4.png\" alt=\"hoa\"></p>\n<p><img src=\"/images/meta2/5.png\" alt=\"hoa\"></p>\n<!-- ![hoa](/images/meta2/6.png) -->\n\n<p><img src=\"/images/meta2/7.png\" alt=\"hoa\"></p>\n<p><img src=\"/images/meta2/8.png\" alt=\"hoa\"></p>\n<p><img src=\"/images/meta2/9.png\" alt=\"hoa\"></p>\n<h2 id=\"RUBY-OBJECT-MODEL\"><a href=\"#RUBY-OBJECT-MODEL\" class=\"headerlink\" title=\"RUBY OBJECT MODEL\"></a>RUBY OBJECT MODEL</h2><h3 id=\"Open-Classes\"><a href=\"#Open-Classes\" class=\"headerlink\" title=\"Open Classes\"></a>Open Classes</h3><p><code>rails g model Movie title:string director:string</code></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Movie</span> &lt; ActiveRecord:<span class=\"title\">Base</span>;</span> <span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>1) What about methods such as <code>title=</code> and title, which access object attributes (accessor methods for short)? This is where metaprogramming comes in: Bob doesn’t have to write those methods. Active Record defines them automatically, after inferring their names from the database schema. ActiveRecord::Base reads the schema at runtime, discovers that the movies table has two columns named title and director, and defines accessor methods for two attributes of the same name. This means that Active Record defines methods such as <code>Movie#title</code> and <code>Movie#director=</code> out of thin air while the program runs.</p>\n<p>Open Class</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Numeric</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_money</span><span class=\"params\">(currency = <span class=\"literal\">nil</span>)</span></span></span><br><span class=\"line\">    Money.from_numeric(<span class=\"keyword\">self</span>, currency <span class=\"params\">||</span> Money.default_currency)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>2) As cool as they are, however, Open Classes have a dark side—one that you’re about to experience.</p>\n<p>| This can override the method of superclass and make wrong result in somewhere (monkeypath). So we need be careful when set the name for the override method.</p>\n<h3 id=\"Inside-the-Object-Model\"><a href=\"#Inside-the-Object-Model\" class=\"headerlink\" title=\"Inside the Object Model\"></a>Inside the Object Model</h3><p>3) Objects that share the same class also share the same methods, so the methods must be stored in the class, not the object.</p>\n<p>4) The “false” argument here means: ignore inherited methods Class.instance_methods(false) # =&gt; [:allocate, :new, :superclass]</p>\n<p>5) The superclass of Class is Module—which is to say, every class is also a module.<br>To be precise, a class is a module with three additional instance methods (new, allocate, and superclass)</p>\n<p>6) All the constants in a program are arranged in a tree similar to a file system.</p>\n<p>7) The Module class also provides an instance method and a class method that, confusingly, are both called constants.</p>\n<p>8) What’s an object? It’s a bunch of instance variables, plus a link to a class. The object’s methods don’t live in the object—they live in the object’s class, where they’re called the instance methods of the class.</p>\n<p>9) What’s a class? It’s an object (an instance of Class), plus a list of instance methods and a link to a superclass. Class is a subclass of Module, so a class is also a module</p>\n<p>10) These are instance methods of the Class class. Like any object, a class has its own methods, such as new. Also like any object, classes must be accessed through references. You already have a constant reference to each class: the class’s name.</p>\n<p>11) Using load, however, has a side effect. The motd.rb file probably defines variables and classes. Although variables fall out of scope when the file has finished loading, constants don’t. As a result, motd.rb can pollute your program with the names of its own constants—in particular, class names. You can force motd.rb to keep its constants to itself by passing a second, optional argument to load: <code>load(&#39;motd.rb&#39;, true)</code> If you load a file this way, Ruby creates <strong>an anonymous module</strong>, uses that module as a Namespace to contain all the constants from motd.rb, and then destroys the module. The require method is quite similar to load, but it’s meant for a different purpose. You use load to execute code, and you use require to import libraries. That’s why require has no second argument: those leftover class names are probably the reason why you imported the file in the first place. Also, that’s why require tries only once to load each file, while load executes the file again every time you call it.</p>\n<p>What’s the class of Object?<br>What’s the superclass of Module?<br>What’s the class of Class?</p>\n<h3 id=\"What-Happens-When-You-Call-a-Method\"><a href=\"#What-Happens-When-You-Call-a-Method\" class=\"headerlink\" title=\"What Happens When You Call a Method?\"></a>What Happens When You Call a Method?</h3><p>12) When you call a method, Ruby does two things:</p>\n<ol>\n<li>It finds the method. This is a process called method lookup.</li>\n<li>It executes the method. To do that, Ruby needs something called self.</li>\n</ol>\n<p>13) Before you look at a more complicated example, though, you need to know about two new concepts: the receiver and the ancestors chain.The receiver is the object that you call a method on. For example, if you write <code>my_string.reverse()</code>, then <code>my_string</code> is the receiver. To understand the concept of an ancestors chain, look at any Ruby class. Then imagine moving from the class into its superclass, then into the superclass’s superclass, and so on, until you reach BasicObject, the root of the Ruby class hierarchy. The path of classes you just traversed is the ancestors chain of the class.<br>MySubclass.ancestors # =&gt; [MySubclass, MyClass, Object, Kernel, BasicObject]</p>\n<p>14) When you include a module in a class (or even in another module), Ruby inserts the module in the ancestors chain, right above the including class itself:</p>\n<p>15) Starting from Ruby 2.0, you also have a second way to insert a module in a class’s chain of ancestors: <strong>the prepend method</strong>. It works like include, but it inserts the module below the including class (sometimes called the includer).</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C2</span></span></span><br><span class=\"line\"> prepend M2</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D2</span> &lt; C2;</span> <span class=\"keyword\">end</span></span><br><span class=\"line\">D2.ancestors <span class=\"comment\"># =&gt; [D2, M2, C2, Object, Kernel, BasicObject]</span></span><br></pre></td></tr></table></figure>\n\n<p>16) This is true every time you include or prepend a module: if that module is already in the chain, Ruby silently ignores the second inclusion.</p>\n<p>Kernel.private_instance_methods.grep(/^pr/) # =&gt; [:printf, :print, :proc]</p>\n<p>17) The trick here is that class Object includes Kernel, so Kernel gets into every object’s ancestors chain. Every line of Ruby is always executed inside an object, so you can call the instance methods in Kernel from anywhere.</p>\n<p>18) You can take advantage of this mechanism yourself: if you add a method to Spell: Kernel Method Kernel, this Kernel Method will be available to all objects. To prove that Kernel Methods are actually useful, you can look at the way some Ruby libraries use them.</p>\n<p>19) Every line of Ruby code is executed inside an object—the so-called current object. The current object is also known as self, because you can access it with the self keyword.</p>\n<p>20) Only one object can take the role of self at a given time, but no object holds that role for a long time. In particular, when you call a method, the receiver becomes self. From that moment on, all instance variables are instance variables of self, and all methods called without an explicit receiver are called on self.</p>\n<p>21) As soon as you start a Ruby program, you’re sitting within an object named main that the Ruby interpreter created for you. This object is sometimes called the top-level context, because it’s the object you’re in when you’re at the top level of the call stack: either you haven’t called any method yet or all the methods that you called have returned.</p>\n<p>22) This code refines the String class with a new to_alphanumeric method. Differently from a regular Open Class, however, a Refinement is not active by default. If you try to call   <code>String#to_alphanumeric</code>, you’ll get an error: <code>&quot;my *1st* refinement!&quot;.to_alphanumeric ❮ NoMethodError: undefined method &#39;to_alphanumeric&#39; [...]</code> To activate the changes, you have to do so explicitly, with the using method: using StringExtensions</p>\n<p>23) you can call refine in a regular module, but you cannot call it in a class, even if a class is itself a module.</p>\n<h2 id=\"METHODS\"><a href=\"#METHODS\" class=\"headerlink\" title=\"METHODS\"></a>METHODS</h2><h3 id=\"Dynamic-Methods\"><a href=\"#Dynamic-Methods\" class=\"headerlink\" title=\"Dynamic Methods\"></a>Dynamic Methods</h3><p>24) If that kind of breaching of encapsulation makes you uneasy, you can use public_send instead. It’s like send, but it makes a point of respecting the receiver’s privacy. Be prepared, however, for the fact that Ruby code in the wild rarely bothers with this concern. If anything, a lot of Ruby programmers use send exactly because it allows calling private methods, not in spite of that</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DS</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span> <span class=\"comment\"># connect to data source...</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_cpu_info</span><span class=\"params\">(workstation_id)</span></span> <span class=\"comment\"># ...</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_cpu_price</span><span class=\"params\">(workstation_id)</span></span> <span class=\"comment\"># ...</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_mouse_info</span><span class=\"params\">(workstation_id)</span></span> <span class=\"comment\"># ...</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_mouse_price</span><span class=\"params\">(workstation_id)</span></span> <span class=\"comment\"># ...</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_keyboard_info</span><span class=\"params\">(workstation_id)</span></span> <span class=\"comment\"># ...</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_keyboard_price</span><span class=\"params\">(workstation_id)</span></span> <span class=\"comment\"># ...</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_display_info</span><span class=\"params\">(workstation_id)</span></span> <span class=\"comment\"># ...</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_display_price</span><span class=\"params\">(workstation_id)</span></span> <span class=\"comment\"># ...</span></span><br><span class=\"line\">  <span class=\"comment\"># ...and so on</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Computer</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(computer_id, data_source)</span></span></span><br><span class=\"line\">    @id = computer_id</span><br><span class=\"line\">    @data_source = data_source</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mouse</span></span></span><br><span class=\"line\">    info = @data_source.get_mouse_info(@id)</span><br><span class=\"line\">    price = @data_source.get_mouse_price(@id)</span><br><span class=\"line\">    result = <span class=\"string\">\"Mouse: <span class=\"subst\">#&#123;info&#125;</span> ($<span class=\"subst\">#&#123;price&#125;</span>)\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"* <span class=\"subst\">#&#123;result&#125;</span>\"</span> <span class=\"keyword\">if</span> price &gt;= <span class=\"number\">100</span></span><br><span class=\"line\">    result</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cpu</span></span></span><br><span class=\"line\">    info = @data_source.get_cpu_info(@id)</span><br><span class=\"line\">    price = @data_source.get_cpu_price(@id)</span><br><span class=\"line\">    result = <span class=\"string\">\"Cpu: <span class=\"subst\">#&#123;info&#125;</span> ($<span class=\"subst\">#&#123;price&#125;</span>)\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"* <span class=\"subst\">#&#123;result&#125;</span>\"</span> <span class=\"keyword\">if</span> price &gt;= <span class=\"number\">100</span></span><br><span class=\"line\">    result</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">keyboard</span></span></span><br><span class=\"line\">    info = @data_source.get_keyboard_info(@id)</span><br><span class=\"line\">    price = @data_source.get_keyboard_price(@id)</span><br><span class=\"line\">    result = <span class=\"string\">\"Keyboard: <span class=\"subst\">#&#123;info&#125;</span> ($<span class=\"subst\">#&#123;price&#125;</span>)\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"* <span class=\"subst\">#&#123;result&#125;</span>\"</span> <span class=\"keyword\">if</span> price &gt;= <span class=\"number\">100</span></span><br><span class=\"line\">    result</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">   <span class=\"comment\"># ...</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>DYNAMIC DISPATCH</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Computer</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(computer_id, data_source)</span></span></span><br><span class=\"line\">  @id = computer_id</span><br><span class=\"line\">  @data_source = data_source</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mouse</span></span></span><br><span class=\"line\">    component <span class=\"symbol\">:mouse</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cpu</span></span></span><br><span class=\"line\">    component <span class=\"symbol\">:cpu</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">keyboard</span></span></span><br><span class=\"line\">    component <span class=\"symbol\">:keyboard</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">component</span><span class=\"params\">(name)</span></span></span><br><span class=\"line\">    info = @data_source.send <span class=\"string\">\"get_<span class=\"subst\">#&#123;name&#125;</span>_info\"</span>, @id</span><br><span class=\"line\">    price = @data_source.send <span class=\"string\">\"get_<span class=\"subst\">#&#123;name&#125;</span>_price\"</span>, @id</span><br><span class=\"line\">    result = <span class=\"string\">\"<span class=\"subst\">#&#123;name.capitalize&#125;</span>: <span class=\"subst\">#&#123;info&#125;</span> ($<span class=\"subst\">#&#123;price&#125;</span>)\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"* <span class=\"subst\">#&#123;result&#125;</span>\"</span> <span class=\"keyword\">if</span> price &gt;= <span class=\"number\">100</span></span><br><span class=\"line\">    result</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>DYNAMIC METHOD</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Computer</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(computer_id, data_source)</span></span></span><br><span class=\"line\">    @id = computer_id</span><br><span class=\"line\">    @data_source = data_source</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">define_component</span><span class=\"params\">(name)</span></span></span><br><span class=\"line\">    define_method(name) <span class=\"keyword\">do</span></span><br><span class=\"line\">      info = @data_source.send <span class=\"string\">\"get_<span class=\"subst\">#&#123;name&#125;</span>_info\"</span>, @id</span><br><span class=\"line\">      price = @data_source.send <span class=\"string\">\"get_<span class=\"subst\">#&#123;name&#125;</span>_price\"</span>, @id</span><br><span class=\"line\">      result = <span class=\"string\">\"<span class=\"subst\">#&#123;name.capitalize&#125;</span>: <span class=\"subst\">#&#123;info&#125;</span> ($<span class=\"subst\">#&#123;price&#125;</span>)\"</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\"* <span class=\"subst\">#&#123;result&#125;</span>\"</span> <span class=\"keyword\">if</span> price &gt;= <span class=\"number\">100</span></span><br><span class=\"line\">      result</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">     </span><br><span class=\"line\">  define_component <span class=\"symbol\">:mouse</span></span><br><span class=\"line\">  define_component <span class=\"symbol\">:cpu</span></span><br><span class=\"line\">  define_component <span class=\"symbol\">:keyboard</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>BEST WAY</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Computer</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(computer_id, data_source)</span></span></span><br><span class=\"line\">    @id = computer_id</span><br><span class=\"line\">    @data_source = data_source</span><br><span class=\"line\">    data_source.methods.grep(<span class=\"regexp\">/^get_(.*)_info$/</span>) &#123; Computer.define_component $1 &#125;</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">define_component</span><span class=\"params\">(name)</span></span></span><br><span class=\"line\">    define_method(name) <span class=\"keyword\">do</span></span><br><span class=\"line\">      <span class=\"comment\"># ...</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"method-missing\"><a href=\"#method-missing\" class=\"headerlink\" title=\"method_missing\"></a>method_missing</h3><p>25) The Hashie gem contains a little bit of magic called Hashie::Mash. A Mash is a more powerful version of Ruby’s standard OpenStruct class: a hash-like object whose attributes work like Ruby variables. If you want a new attribute, just assign a value to the attribute, and it will spring into existence:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'hashie'</span></span><br><span class=\"line\">icecream = Hashie::Mash.new</span><br><span class=\"line\">icecream.flavor = <span class=\"string\">\"strawberry\"</span></span><br><span class=\"line\">icecream.flavor <span class=\"comment\"># =&gt; \"strawberry\"</span></span><br></pre></td></tr></table></figure>\n\n<p>What hanppen inside?</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">Hashie</span></span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mash</span> &lt; Hashie::Hash</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">method_missing</span><span class=\"params\">(method_name, *args, &amp;blk)</span></span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.[](method_name, &amp;blk) <span class=\"keyword\">if</span> key?(method_name)</span><br><span class=\"line\">      match = method_name.to_s.match(<span class=\"regexp\">/(.*?)([?=!]?)$/</span>)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> match[<span class=\"number\">2</span>]</span><br><span class=\"line\">      <span class=\"keyword\">when</span> <span class=\"string\">\"=\"</span></span><br><span class=\"line\">      <span class=\"keyword\">self</span>[match[<span class=\"number\">1</span>]] = args.first</span><br><span class=\"line\">      <span class=\"comment\"># ...</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">      default(method_name, *args, &amp;blk)</span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>26) <strong>Ghost Methods</strong> (57) are usually icing on the cake, but some objects actually rely almost exclusively on them. These objects are often wrappers for something else—maybe another object, a web service, or code written in a different language. They collect method calls through method_missing and forward them to the wrapped object. Let’s look at a complex real-life example.</p>\n<p>Refactor:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Computer</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(computer_id, data_source)</span></span></span><br><span class=\"line\">    @id = computer_id</span><br><span class=\"line\">    @data_source = data_source</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">method_missing</span><span class=\"params\">(name)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">super</span> <span class=\"keyword\">if</span> !@data_source.respond_to?(<span class=\"string\">\"get_<span class=\"subst\">#&#123;name&#125;</span>_info\"</span>)</span><br><span class=\"line\">    info = @data_source.send(<span class=\"string\">\"get_<span class=\"subst\">#&#123;name&#125;</span>_info\"</span>, @id)</span><br><span class=\"line\">    price = @data_source.send(<span class=\"string\">\"get_<span class=\"subst\">#&#123;name&#125;</span>_price\"</span>, @id)</span><br><span class=\"line\">    result = <span class=\"string\">\"<span class=\"subst\">#&#123;name.capitalize&#125;</span>: <span class=\"subst\">#&#123;info&#125;</span> ($<span class=\"subst\">#&#123;price&#125;</span>)\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"* <span class=\"subst\">#&#123;result&#125;</span>\"</span> <span class=\"keyword\">if</span> price &gt;= <span class=\"number\">100</span></span><br><span class=\"line\">    result</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>27) Khi dùng ghost method, giả sử trong method_missing chúng ta muốn tạo ra 1 method x, tuy nhiên x lại có trong cây kế thừa =&gt; x trong method missing sẽ không được gọi. Lúc này ta cần Blank Slates.</p>\n<h3 id=\"Blank-Slates\"><a href=\"#Blank-Slates\" class=\"headerlink\" title=\"Blank Slates\"></a>Blank Slates</h3><p>28) If you don’t need the inherited method, you can fix the problem by removing it. While you’re at it, you might want to remove most methods from the class, preventing such name clashes from ever happening again. A skinny class Spell: Blank Slate with a minimal number of methods is called a Blank Slate. As it turns out, Ruby has a ready-made Blank Slate for you to use</p>\n<p>29) If you don’t specify a superclass, your classes inherit by default from Object, which is itself a subclass of BasicObject. If you want a Blank Slate (66), you can inherit directly from BasicObject instead. For example, if Computer inherited directly from BasicObject, then it wouldn’t have a problematic display method.<br>=&gt; không lấy nhầm method trong class Object, vì lớp Computer được kế thừa trực tiếp từ BasicObject</p>\n<p>30) Inheriting from BasicObject is the quicker way to define a Blank Slate in Ruby.<br><code>class Computer &lt; BasicObject</code></p>\n<p>31) You can remove a method from a class by using either Module#undef_method or Module#remove_method. The drastic undef_method removes any method, including the inherited ones. The kinder remove_method removes the method from the receiver, but it leaves inherited methods alone. Let’s look at a real-life library that uses undef_method to create a Blank Slate.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlankSlate</span></span></span><br><span class=\"line\">  <span class=\"comment\"># Hide the method named +name+ in the BlankSlate class. Don't</span></span><br><span class=\"line\">  <span class=\"comment\"># hide +instance_eval+ or any method beginning with \"__\".</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">hide</span><span class=\"params\">(name)</span></span></span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> instance_methods.<span class=\"keyword\">include</span>?(name._blankslate_as_name) &amp;&amp;</span><br><span class=\"line\">      name !~ <span class=\"regexp\">/^(__|instance_eval$)/</span></span><br><span class=\"line\">      undef_method name</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"comment\"># ...</span></span><br><span class=\"line\">  instance_methods.each &#123; <span class=\"params\">|m|</span> hide(m) &#125;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>32) <strong>use Dynamic Methods if you can and Ghost Methods if you have to</strong></p>\n<h2 id=\"BLOCKS\"><a href=\"#BLOCKS\" class=\"headerlink\" title=\"BLOCKS\"></a>BLOCKS</h2><h3 id=\"Blocks-Are-Closures\"><a href=\"#Blocks-Are-Closures\" class=\"headerlink\" title=\"Blocks Are Closures\"></a>Blocks Are Closures</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_method</span></span></span><br><span class=\"line\">  x = <span class=\"string\">\"Goodbye\"</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span>(<span class=\"string\">\"cruel\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">x = <span class=\"string\">\"Hello\"</span></span><br><span class=\"line\">my_method &#123;<span class=\"params\">|y|</span> <span class=\"string\">\"<span class=\"subst\">#&#123;x&#125;</span>, <span class=\"subst\">#&#123;y&#125;</span> world\"</span> &#125; <span class=\"comment\"># =&gt; \"Hello, cruel world\"</span></span><br></pre></td></tr></table></figure>\n\n<p>33) When you create the block, you capture the local bindings, such as x. Then you pass the block to a method that has its own separate set of bindings. In the previous example, those bindings also include a variable named x. Still, the code in the block sees the x that was around when the block was defined, not the method’s x, which is not visible at all in the block.</p>\n<p>34) khi gọi 1 block, nó lưu vết lại các ràng buộc cục bộ nơi block được gọi, sau đó block được truyền cho 1 method, mà method đó sẽ có các ràng cuộc cục bộ của riêng nó, và block sẽ sử dụng ràng buộc của mình (ví dụ như biến x ở trên).</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">just_yield</span></span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">top_level_variable = <span class=\"number\">1</span></span><br><span class=\"line\">just_yield <span class=\"keyword\">do</span></span><br><span class=\"line\">  top_level_variable += <span class=\"number\">1</span></span><br><span class=\"line\">  local_to_block = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">top_level_variable <span class=\"comment\"># =&gt; 2</span></span><br><span class=\"line\">local_to_block <span class=\"comment\"># =&gt; Error!</span></span><br></pre></td></tr></table></figure>\n<p>Trong ví dụ này thì local_to_block là 1 binding thuộc block, và ra ngoài ngữ cảnh block nó không có giá trị.</p>\n<p>35) This example shows how scope changes as your program runs, tracking the names of bindings with the Kernel#local_variables method:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v1 = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span></span></span><br><span class=\"line\">  v2 = <span class=\"number\">2</span></span><br><span class=\"line\">  local_variables <span class=\"comment\"># =&gt; [:v2]</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_method</span></span></span><br><span class=\"line\">    v3 = <span class=\"number\">3</span></span><br><span class=\"line\">    local_variables</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">  local_variables <span class=\"comment\"># =&gt; [:v2]</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">  </span><br><span class=\"line\">obj = MyClass.new</span><br><span class=\"line\">obj.my_method <span class=\"comment\"># =&gt; [:v3]</span></span><br><span class=\"line\">obj.my_method <span class=\"comment\"># =&gt; [:v3]</span></span><br><span class=\"line\">local_variables <span class=\"comment\"># =&gt; [:v1, :obj]</span></span><br></pre></td></tr></table></figure>\n\n<p>36) There are exactly three places where a program leaves the previous scope behind and opens a new one:<br>Class definitions<br>Module definitions<br>Methods</p>\n<p>37) Scope changes whenever the program enters (or exits) a class or module definition or a method. These three borders are marked by the keywords class, module, and def, respectively. Each of these keywords acts like a <strong>Scope Gate</strong>.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v1 = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> <span class=\"comment\"># SCOPE GATE: entering class</span></span></span><br><span class=\"line\">  v2 = <span class=\"number\">2</span></span><br><span class=\"line\">  local_variables <span class=\"comment\"># =&gt; [\"v2\"]</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_method</span> <span class=\"comment\"># SCOPE GATE: entering def</span></span></span><br><span class=\"line\">    v3 = <span class=\"number\">3</span></span><br><span class=\"line\">    local_variables</span><br><span class=\"line\">  <span class=\"keyword\">end</span> <span class=\"comment\"># SCOPE GATE: leaving def</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  local_variables <span class=\"comment\"># =&gt; [\"v2\"]</span></span><br><span class=\"line\"><span class=\"keyword\">end</span> <span class=\"comment\"># SCOPE GATE: leaving class</span></span><br><span class=\"line\">  </span><br><span class=\"line\">obj = MyClass.new</span><br><span class=\"line\">obj.my_method <span class=\"comment\"># =&gt; [:v3]</span></span><br><span class=\"line\">local_variables <span class=\"comment\"># =&gt; [:v1, :obj]</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_var = <span class=\"string\">\"Success\"</span></span><br><span class=\"line\">  </span><br><span class=\"line\">MyClass = Class.new <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"string\">\"<span class=\"subst\">#&#123;my_var&#125;</span> in the class definition\"</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  define_method <span class=\"symbol\">:my_method</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"string\">\"<span class=\"subst\">#&#123;my_var&#125;</span> in the method\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>khai báo thông thường thì my_var không thể sử dụng trong class hoặc def (vì nó mở ra  1 scope mới). Nên dùng call method gọi là <strong>flat scope</strong>.</p>\n<p>38) If you replace Scope Gates with method calls, you allow one scope to see variables from another scope. Technically, this trick should be called nested lexical scopes, but many Ruby coders refer to it simply as “flattening the scope,” meaning that the two scopes share variables as if the scopes were squeezed together. For short, you can call this spell a Flat Scope.</p>\n<p>39) Once you know about Flat Scopes (83), you can do pretty much whatever you want with scopes. For example, assume that you want to share a variable among a few methods, and you don’t want anybody else to see that variable. You can do that by defining all the methods in the same Flat Scope as the variable:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">define_methods</span></span></span><br><span class=\"line\">  shared = <span class=\"number\">0</span></span><br><span class=\"line\">  Kernel.send <span class=\"symbol\">:define_method</span>, <span class=\"symbol\">:counter</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    shared</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  Kernel.send <span class=\"symbol\">:define_method</span>, <span class=\"symbol\">:inc</span> <span class=\"keyword\">do</span> <span class=\"params\">|x|</span></span><br><span class=\"line\">    shared += x</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">Muốn chỉ share variable cho <span class=\"number\">1</span> vài method nhất định, dùng các phương thức support bởi kernel và gọi đây là **Flat Scope**.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"instance-eval\"><a href=\"#instance-eval\" class=\"headerlink\" title=\"instance_eval()\"></a>instance_eval()</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v = <span class=\"number\">2</span></span><br><span class=\"line\">obj.instance_eval &#123; @v = v &#125;</span><br><span class=\"line\">obj.instance_eval &#123; @v &#125; <span class=\"comment\"># =&gt; 2</span></span><br></pre></td></tr></table></figure>\n\n<p>40) The three lines in the previous example are evaluated in the same Flat Scope (83), so they can all access the local variable v—but the blocks are evaluated with the object as self, so they can also access obj’s instance variable @v. In all these cases, you can call the block that you pass to instance_eval a Context Probe, because it’s like a snippet of code that you dip inside an object to do Spell: Context Probe something in there</p>\n<p>41) To solve this problem Ruby provides the standard library class Proc.<br>A Proc isa block that has been turned into an object. You can create a Proc by passing<br>the block to Proc.new</p>\n<h3 id=\"Callable-Objects\"><a href=\"#Callable-Objects\" class=\"headerlink\" title=\"Callable Objects\"></a>Callable Objects</h3><p>42) To attach a binding to the block, you can add one special argument to the method. This argument must be the last in the list of arguments and prefixed by an &amp; sign.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_method</span><span class=\"params\">(&amp;the_proc)</span></span></span><br><span class=\"line\">  the_proc</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\">p = my_method &#123;<span class=\"params\">|name|</span> <span class=\"string\">\"Hello, <span class=\"subst\">#&#123;name&#125;</span>!\"</span> &#125;</span><br><span class=\"line\">p<span class=\"class\">.<span class=\"keyword\">class</span> <span class=\"comment\"># =&gt; Proc</span></span></span><br><span class=\"line\">p.call(<span class=\"string\">\"Bill\"</span>) <span class=\"comment\"># =&gt; \"Hello, Bill!\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_method</span><span class=\"params\">(greeting)</span></span></span><br><span class=\"line\">  <span class=\"string\">\"<span class=\"subst\">#&#123;greeting&#125;</span>, <span class=\"subst\">#&#123;<span class=\"keyword\">yield</span>&#125;</span>!\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\">my_proc = proc &#123; <span class=\"string\">\"Bill\"</span> &#125;</span><br><span class=\"line\">my_method(<span class=\"string\">\"Hello\"</span>, &amp;my_proc)</span><br></pre></td></tr></table></figure>\n<p>When you call my_method, the &amp; converts my_proc to a block and passes that block to the method.</p>\n<p>43) There are two differences between procs and lambdas. One has to do with the return keyword, and the other concerns the checking of arguments.</p>\n<p>In a lambda, return just returns from the lambda.<br>In a proc, return behaves differently. Rather than return from the proc, it returns from the scope where the proc itself was defined:</p>\n<p>lambdas tend to be less tolerant than procs (and regular blocks) when it comes to arguments. Call a lambda with the wrong arity, and it fails with an ArgumentError. On the other hand, a proc fits the argument list to its own expectations:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(value)</span></span></span><br><span class=\"line\">    @x = value</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_method</span></span></span><br><span class=\"line\">    @x</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\">object = MyClass.new(<span class=\"number\">1</span>)</span><br><span class=\"line\">m = object.method <span class=\"symbol\">:my_method</span></span><br><span class=\"line\">m.call <span class=\"comment\"># =&gt; 1</span></span><br></pre></td></tr></table></figure>\n\n<p>44) By calling Kernel#method, you get the method itself as a Method object, which you can later execute with Method#call.</p>\n<h3 id=\"Writing-a-Domain-Specific-Language\"><a href=\"#Writing-a-Domain-Specific-Language\" class=\"headerlink\" title=\"Writing a Domain-Specific Language\"></a>Writing a Domain-Specific Language</h3><p>N/A</p>\n<h2 id=\"CLASS-DEFINITIONS\"><a href=\"#CLASS-DEFINITIONS\" class=\"headerlink\" title=\"CLASS DEFINITIONS\"></a>CLASS DEFINITIONS</h2><h3 id=\"Class-Definitions-Demystified\"><a href=\"#Class-Definitions-Demystified\" class=\"headerlink\" title=\"Class Definitions Demystified\"></a>Class Definitions Demystified</h3><h3 id=\"Singleton-Methods\"><a href=\"#Singleton-Methods\" class=\"headerlink\" title=\"Singleton Methods\"></a>Singleton Methods</h3><h3 id=\"Singleton-Classes\"><a href=\"#Singleton-Classes\" class=\"headerlink\" title=\"Singleton Classes\"></a>Singleton Classes</h3><h3 id=\"Method-Wrappers\"><a href=\"#Method-Wrappers\" class=\"headerlink\" title=\"Method Wrappers\"></a>Method Wrappers</h3><p>45) At the top level of your program, the current class is Object, the class of main. (<strong>That’s why, if you define a method at the top level, that method becomes an instance method of Object.</strong>)</p>\n<p>46) Module#class_eval is very different from BasicObject#instance_eval, which you learned about earlier in instance_eval(), on page 85. instance_eval only changes self, <strong>while class_eval changes both self and the current class.</strong></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_method_to</span><span class=\"params\">(a_class)</span></span></span><br><span class=\"line\">  a_class.class_eval <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">m</span>;</span> <span class=\"string\">'Hello!'</span>; <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">add_method_to String</span><br><span class=\"line\"><span class=\"string\">\"abc\"</span>.m <span class=\"comment\"># =&gt; \"Hello!\"</span></span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck4e7suf000075rrsclrd6f3j","category_id":"ck4e7sueu00045rrs3k2t2xgj","_id":"ck4e7suf9000f5rrsbtil53bj"},{"post_id":"ck4e7suef00005rrs9up9f8ql","category_id":"ck4e7sueu00045rrs3k2t2xgj","_id":"ck4e7sufd000k5rrs2g9y5ut6"},{"post_id":"ck4e7suf200085rrs6q9pgnr6","category_id":"ck4e7sueu00045rrs3k2t2xgj","_id":"ck4e7suff000n5rrsg023f6mr"},{"post_id":"ck4e7suer00025rrs3e373bzc","category_id":"ck4e7sueu00045rrs3k2t2xgj","_id":"ck4e7sufi000r5rrs8zbvgh45"},{"post_id":"ck4e7suey00065rrsdkt25rug","category_id":"ck4e7suf9000g5rrshumo9feg","_id":"ck4e7sufl000u5rrsf6yqbwhg"},{"post_id":"ck4e7sufh000q5rrsbsg23co0","category_id":"ck4e7suf9000g5rrshumo9feg","_id":"ck4e7sufo00105rrs8zysd3vn"},{"post_id":"ck4e7suf8000e5rrs2aa7fok7","category_id":"ck4e7suf9000g5rrshumo9feg","_id":"ck4e7suft00175rrs3uznh6oy"},{"post_id":"ck4e7sufb000j5rrs9lnyd6jv","category_id":"ck4e7sufp00115rrs4ofn8pzs","_id":"ck4e7sufx001e5rrsgo4qbwcj"},{"post_id":"ck4e7sufu001b5rrs3m9x5c62","category_id":"ck4e7suft00185rrs5tj0b12t","_id":"ck4e7sug1001l5rrs9enf38fp"},{"post_id":"ck4e7sufd000m5rrs0fb9bm2l","category_id":"ck4e7suft00185rrs5tj0b12t","_id":"ck4e7sug3001n5rrsax0acy6n"},{"post_id":"ck4e7sufw001d5rrsg9986xvx","category_id":"ck4e7suft00185rrs5tj0b12t","_id":"ck4e7sug6001s5rrs66fy2orl"},{"post_id":"ck4e7sufz001i5rrs7ptnefno","category_id":"ck4e7suft00185rrs5tj0b12t","_id":"ck4e7sug8001v5rrsg4bp5j2i"},{"post_id":"ck4e7sug0001k5rrsbj7v5c9w","category_id":"ck4e7suf9000g5rrshumo9feg","_id":"ck4e7sugc00205rrs2pud5x0v"},{"post_id":"ck4e7suf6000c5rrs65q3fb98","category_id":"ck4e7suf9000g5rrshumo9feg","_id":"ck4e7sugd00225rrsfunx0y9b"},{"post_id":"ck4e7suf6000c5rrs65q3fb98","category_id":"ck4e7sufx001g5rrsdjqeb0bq","_id":"ck4e7sugg00265rrshh0o418w"},{"post_id":"ck4e7sug5001r5rrs9k6a2guy","category_id":"ck4e7suft00185rrs5tj0b12t","_id":"ck4e7sugi00295rrs2r1808ez"},{"post_id":"ck4e7sufj000s5rrs3xbmbbre","category_id":"ck4e7suft00185rrs5tj0b12t","_id":"ck4e7sugl002e5rrsa6hf73vw"},{"post_id":"ck4e7sufm000x5rrs1cxrd9qm","category_id":"ck4e7suf9000g5rrshumo9feg","_id":"ck4e7sugm002h5rrsd0jk7wpq"},{"post_id":"ck4e7sufm000x5rrs1cxrd9qm","category_id":"ck4e7sufx001g5rrsdjqeb0bq","_id":"ck4e7sugp002m5rrs2bwj666s"},{"post_id":"ck4e7sufn000z5rrs5xuc13v6","category_id":"ck4e7suft00185rrs5tj0b12t","_id":"ck4e7sugr002p5rrs3pfw472t"},{"post_id":"ck4e7sufq00145rrsbq88di4e","category_id":"ck4e7suft00185rrs5tj0b12t","_id":"ck4e7sugu002s5rrs69flbqpn"},{"post_id":"ck4e7sufs00165rrsdds1h8z2","category_id":"ck4e7suft00185rrs5tj0b12t","_id":"ck4e7sugx002v5rrs3kj7cb90"},{"post_id":"ck4e7sug2001m5rrsfq5z230f","category_id":"ck4e7sugr002q5rrsc4fw2xck","_id":"ck4e7suh200315rrs1jilh4sw"},{"post_id":"ck4e7sug7001u5rrs4l5q6q4u","category_id":"ck4e7sugx002w5rrsgljt6lzt","_id":"ck4e7suh600395rrs30uddh7l"},{"post_id":"ck4e7suga001z5rrsfwfnf1ww","category_id":"ck4e7sugr002q5rrsc4fw2xck","_id":"ck4e7suhc003e5rrs97jd9rv5"},{"post_id":"ck4e7sugf00255rrs0eshcw1m","category_id":"ck4e7sugr002q5rrsc4fw2xck","_id":"ck4e7suhk003p5rrs744u8tvf"},{"post_id":"ck4e7sugh00285rrscgbe2u5j","category_id":"ck4e7sugx002w5rrsgljt6lzt","_id":"ck4e7suhm003u5rrshcc5bl0h"},{"post_id":"ck4e7sugk002d5rrs495qakfy","category_id":"ck4e7sugx002w5rrsgljt6lzt","_id":"ck4e7suho003z5rrsarj93xos"},{"post_id":"ck4e7sugl002g5rrs9q4h6kje","category_id":"ck4e7sugx002w5rrsgljt6lzt","_id":"ck4e7suhq00445rrs5r3n911d"},{"post_id":"ck4e7sugo002l5rrs2a6s5zvo","category_id":"ck4e7sugx002w5rrsgljt6lzt","_id":"ck4e7suhr00485rrsgjym1isw"},{"post_id":"ck4e7sugq002o5rrs5rqqc3pj","category_id":"ck4e7suhp00435rrscmqu6shp","_id":"ck4e7suht004c5rrs52gk813n"},{"post_id":"ck4e7sugt002r5rrs79igbci0","category_id":"ck4e7suhp00435rrscmqu6shp","_id":"ck4e7suhu004g5rrs98826bb4"},{"post_id":"ck4e7sugc00215rrs5iab9mlp","category_id":"ck4e7sugx002w5rrsgljt6lzt","_id":"ck4e7suhx004k5rrsg5ugg23y"},{"post_id":"ck4e7sugc00215rrs5iab9mlp","category_id":"ck4e7suhs004b5rrsgvxzadr6","_id":"ck4e7suhy004m5rrsfkfz2zv3"},{"post_id":"ck4e7suha003c5rrsd8s55fru","category_id":"ck4e7suhu004h5rrs7g1seoe0","_id":"ck4e7suhz004o5rrs45uq1m8k"},{"post_id":"ck4e7suhh003k5rrscjtdbts0","category_id":"ck4e7suhu004h5rrs7g1seoe0","_id":"ck4e7sui1004s5rrsevgcep3r"}],"PostTag":[{"post_id":"ck4e7suf000075rrsclrd6f3j","tag_id":"ck4e7suex00055rrsf4pwf5cg","_id":"ck4e7suf6000b5rrsh7n30bg8"},{"post_id":"ck4e7suef00005rrs9up9f8ql","tag_id":"ck4e7suex00055rrsf4pwf5cg","_id":"ck4e7suf8000d5rrsbi9hay4z"},{"post_id":"ck4e7suf200085rrs6q9pgnr6","tag_id":"ck4e7suex00055rrsf4pwf5cg","_id":"ck4e7sufa000i5rrse4ghfcbm"},{"post_id":"ck4e7suer00025rrs3e373bzc","tag_id":"ck4e7suex00055rrsf4pwf5cg","_id":"ck4e7sufd000l5rrs43x77eem"},{"post_id":"ck4e7sufh000q5rrsbsg23co0","tag_id":"ck4e7sufa000h5rrs17n9evg6","_id":"ck4e7sufl000w5rrs1wfv9ugs"},{"post_id":"ck4e7suey00065rrsdkt25rug","tag_id":"ck4e7sufa000h5rrs17n9evg6","_id":"ck4e7sufn000y5rrs45qrcjhi"},{"post_id":"ck4e7suey00065rrsdkt25rug","tag_id":"ck4e7sufg000p5rrsckkt4grj","_id":"ck4e7sufp00125rrs79e4cggf"},{"post_id":"ck4e7sufm000x5rrs1cxrd9qm","tag_id":"ck4e7sufa000h5rrs17n9evg6","_id":"ck4e7sufr00155rrshx1k24g9"},{"post_id":"ck4e7sufm000x5rrs1cxrd9qm","tag_id":"ck4e7sufl000v5rrs3ftb0e0k","_id":"ck4e7sufu00195rrs6yrj3pyo"},{"post_id":"ck4e7suf6000c5rrs65q3fb98","tag_id":"ck4e7sufl000v5rrs3ftb0e0k","_id":"ck4e7sufw001c5rrs0lnr6f2g"},{"post_id":"ck4e7suf6000c5rrs65q3fb98","tag_id":"ck4e7sufa000h5rrs17n9evg6","_id":"ck4e7sufx001f5rrsa8embf57"},{"post_id":"ck4e7suf8000e5rrs2aa7fok7","tag_id":"ck4e7sufa000h5rrs17n9evg6","_id":"ck4e7sug0001j5rrsdor093kq"},{"post_id":"ck4e7sug0001k5rrsbj7v5c9w","tag_id":"ck4e7sufa000h5rrs17n9evg6","_id":"ck4e7sug5001q5rrseibwc6b7"},{"post_id":"ck4e7sufb000j5rrs9lnyd6jv","tag_id":"ck4e7sufy001h5rrshh8905ir","_id":"ck4e7sug7001t5rrs8dpb18xy"},{"post_id":"ck4e7sug5001r5rrs9k6a2guy","tag_id":"ck4e7sufg000p5rrsckkt4grj","_id":"ck4e7suga001y5rrs3zsihkig"},{"post_id":"ck4e7sufd000m5rrs0fb9bm2l","tag_id":"ck4e7sug4001p5rrsg0ljb63n","_id":"ck4e7sugg00275rrsclqvg3vp"},{"post_id":"ck4e7sufd000m5rrs0fb9bm2l","tag_id":"ck4e7sufg000p5rrsckkt4grj","_id":"ck4e7sugi002b5rrs0dy59kog"},{"post_id":"ck4e7sufj000s5rrs3xbmbbre","tag_id":"ck4e7suge00245rrs51b113vv","_id":"ck4e7sugl002f5rrs1sam9mjl"},{"post_id":"ck4e7sufj000s5rrs3xbmbbre","tag_id":"ck4e7sufg000p5rrsckkt4grj","_id":"ck4e7sugn002j5rrs4emp3yck"},{"post_id":"ck4e7sufn000z5rrs5xuc13v6","tag_id":"ck4e7sugj002c5rrs448eb8d0","_id":"ck4e7sugq002n5rrs2d77fuwg"},{"post_id":"ck4e7sufq00145rrsbq88di4e","tag_id":"ck4e7sugo002k5rrs73532zvi","_id":"ck4e7suh0002z5rrsgv5s0xgk"},{"post_id":"ck4e7sufq00145rrsbq88di4e","tag_id":"ck4e7sufg000p5rrsckkt4grj","_id":"ck4e7suh300335rrs82nu9lns"},{"post_id":"ck4e7sufq00145rrsbq88di4e","tag_id":"ck4e7sugj002c5rrs448eb8d0","_id":"ck4e7suh400365rrs8023h1z2"},{"post_id":"ck4e7sufs00165rrsdds1h8z2","tag_id":"ck4e7sufg000p5rrsckkt4grj","_id":"ck4e7suhg003i5rrs44n0et06"},{"post_id":"ck4e7sufs00165rrsdds1h8z2","tag_id":"ck4e7sugo002k5rrs73532zvi","_id":"ck4e7suhi003l5rrs6ml1bccr"},{"post_id":"ck4e7sufs00165rrsdds1h8z2","tag_id":"ck4e7suh400355rrsdg140mz8","_id":"ck4e7suhj003n5rrsd90v0hd8"},{"post_id":"ck4e7sufs00165rrsdds1h8z2","tag_id":"ck4e7sugj002c5rrs448eb8d0","_id":"ck4e7suhk003q5rrsdo1m6ouj"},{"post_id":"ck4e7sufu001b5rrs3m9x5c62","tag_id":"ck4e7sufg000p5rrsckkt4grj","_id":"ck4e7suhl003s5rrs20j27jqy"},{"post_id":"ck4e7sufu001b5rrs3m9x5c62","tag_id":"ck4e7sug4001p5rrsg0ljb63n","_id":"ck4e7suhm003v5rrs2kt2g1kp"},{"post_id":"ck4e7suhh003k5rrscjtdbts0","tag_id":"ck4e7sufa000h5rrs17n9evg6","_id":"ck4e7suhn003x5rrsab659961"},{"post_id":"ck4e7sufw001d5rrsg9986xvx","tag_id":"ck4e7suhi003m5rrs4psm0i3u","_id":"ck4e7suho00405rrs2cq69d0f"},{"post_id":"ck4e7sufw001d5rrsg9986xvx","tag_id":"ck4e7sug4001p5rrsg0ljb63n","_id":"ck4e7suhp00425rrseklj3cpa"},{"post_id":"ck4e7sufz001i5rrs7ptnefno","tag_id":"ck4e7suhm003w5rrs8ljp6gbb","_id":"ck4e7suhq00455rrs2zrp60tt"},{"post_id":"ck4e7sufz001i5rrs7ptnefno","tag_id":"ck4e7sufg000p5rrsckkt4grj","_id":"ck4e7suhq00475rrs4zvkex3b"},{"post_id":"ck4e7sug2001m5rrsfq5z230f","tag_id":"ck4e7suho00415rrsdfz2ee69","_id":"ck4e7suht004d5rrscas61aeq"},{"post_id":"ck4e7sug2001m5rrsfq5z230f","tag_id":"ck4e7suhq00465rrsam501qs4","_id":"ck4e7suht004e5rrse2chesrw"},{"post_id":"ck4e7sug7001u5rrs4l5q6q4u","tag_id":"ck4e7suho00415rrsdfz2ee69","_id":"ck4e7suhv004i5rrsfyuvez0v"},{"post_id":"ck4e7suga001z5rrsfwfnf1ww","tag_id":"ck4e7suht004f5rrs3w429fz0","_id":"ck4e7suhz004p5rrsagung6yr"},{"post_id":"ck4e7suga001z5rrsfwfnf1ww","tag_id":"ck4e7suhq00465rrsam501qs4","_id":"ck4e7sui0004q5rrs36l898xl"},{"post_id":"ck4e7sugc00215rrs5iab9mlp","tag_id":"ck4e7suhy004n5rrs4ly61c1q","_id":"ck4e7sui3004u5rrs0npe65kf"},{"post_id":"ck4e7sugc00215rrs5iab9mlp","tag_id":"ck4e7suho00415rrsdfz2ee69","_id":"ck4e7sui3004v5rrs1f5qbr0f"},{"post_id":"ck4e7sugf00255rrs0eshcw1m","tag_id":"ck4e7suhq00465rrsam501qs4","_id":"ck4e7sui4004x5rrse417gmmk"},{"post_id":"ck4e7sugh00285rrscgbe2u5j","tag_id":"ck4e7suho00415rrsdfz2ee69","_id":"ck4e7sui5004z5rrs31zs7i38"},{"post_id":"ck4e7sugk002d5rrs495qakfy","tag_id":"ck4e7suho00415rrsdfz2ee69","_id":"ck4e7sui600515rrs4kwj15mu"},{"post_id":"ck4e7sugl002g5rrs9q4h6kje","tag_id":"ck4e7sui500505rrs7oq34cb5","_id":"ck4e7sui800545rrs79ol3ew4"},{"post_id":"ck4e7sugl002g5rrs9q4h6kje","tag_id":"ck4e7suho00415rrsdfz2ee69","_id":"ck4e7sui800555rrscinh3dl6"},{"post_id":"ck4e7sugo002l5rrs2a6s5zvo","tag_id":"ck4e7sui700535rrs2zqveng4","_id":"ck4e7suib00585rrsdranhf5q"},{"post_id":"ck4e7sugo002l5rrs2a6s5zvo","tag_id":"ck4e7suho00415rrsdfz2ee69","_id":"ck4e7suib00595rrsafil4b2z"},{"post_id":"ck4e7sugq002o5rrs5rqqc3pj","tag_id":"ck4e7suia00575rrs1p606h5b","_id":"ck4e7suic005b5rrsdqwkguie"},{"post_id":"ck4e7sugt002r5rrs79igbci0","tag_id":"ck4e7suia00575rrs1p606h5b","_id":"ck4e7suid005d5rrsebnmauvn"},{"post_id":"ck4e7sugv002u5rrsab83fod8","tag_id":"ck4e7suid005c5rrs14ux734b","_id":"ck4e7suif005f5rrsewqt3d21"},{"post_id":"ck4e7sugy002x5rrs5vjxapg3","tag_id":"ck4e7suid005c5rrs14ux734b","_id":"ck4e7suig005h5rrs927uaetm"},{"post_id":"ck4e7suh100305rrs65gz3i4j","tag_id":"ck4e7suho00415rrsdfz2ee69","_id":"ck4e7suih005j5rrs3apu6ve6"},{"post_id":"ck4e7suh300345rrs52639th0","tag_id":"ck4e7suho00415rrsdfz2ee69","_id":"ck4e7suij005m5rrs362k5x7u"},{"post_id":"ck4e7suh300345rrs52639th0","tag_id":"ck4e7suid005c5rrs14ux734b","_id":"ck4e7suij005n5rrs72ezftlp"},{"post_id":"ck4e7suh500375rrse7b0b2k8","tag_id":"ck4e7suho00415rrsdfz2ee69","_id":"ck4e7suik005p5rrsergw2qlh"},{"post_id":"ck4e7suh7003a5rrs44lx9cjt","tag_id":"ck4e7suho00415rrsdfz2ee69","_id":"ck4e7suip005r5rrse3d0ekc0"},{"post_id":"ck4e7suha003c5rrsd8s55fru","tag_id":"ck4e7suia00575rrs1p606h5b","_id":"ck4e7suiq005t5rrs55hibo7r"},{"post_id":"ck4e7suhc003f5rrs2tq807f1","tag_id":"ck4e7suho00415rrsdfz2ee69","_id":"ck4e7suiq005u5rrs16l1d82h"}],"Tag":[{"name":"unix","_id":"ck4e7suex00055rrsf4pwf5cg"},{"name":"ruby","_id":"ck4e7sufa000h5rrs17n9evg6"},{"name":"rails","_id":"ck4e7sufg000p5rrsckkt4grj"},{"name":"programming","_id":"ck4e7sufl000v5rrs3ftb0e0k"},{"name":"random","_id":"ck4e7sufy001h5rrshh8905ir"},{"name":"secure","_id":"ck4e7sug4001p5rrsg0ljb63n"},{"name":"database","_id":"ck4e7suge00245rrs51b113vv"},{"name":"til","_id":"ck4e7sugj002c5rrs448eb8d0"},{"name":"aws","_id":"ck4e7sugo002k5rrs73532zvi"},{"name":"carrierwave","_id":"ck4e7suh400355rrsdg140mz8"},{"name":"https","_id":"ck4e7suhi003m5rrs4psm0i3u"},{"name":"activerecord","_id":"ck4e7suhm003w5rrs8ljp6gbb"},{"name":"RUBY","_id":"ck4e7suho00415rrsdfz2ee69"},{"name":"RAILS","_id":"ck4e7suhq00465rrsam501qs4"},{"name":"SECURE","_id":"ck4e7suht004f5rrs3w429fz0"},{"name":"SOLID","_id":"ck4e7suhy004n5rrs4ly61c1q"},{"name":"RACK","_id":"ck4e7sui500505rrs7oq34cb5"},{"name":"ORM","_id":"ck4e7sui700535rrs2zqveng4"},{"name":"TIl","_id":"ck4e7suia00575rrs1p606h5b"},{"name":"TIL","_id":"ck4e7suid005c5rrs14ux734b"}]}}